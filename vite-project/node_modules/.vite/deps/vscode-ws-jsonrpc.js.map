{
  "version": 3,
  "sources": ["../../vscode-ws-jsonrpc/src/disposable.ts", "../../vscode-ws-jsonrpc/src/socket/reader.ts", "../../vscode-ws-jsonrpc/src/socket/writer.ts", "../../vscode-ws-jsonrpc/src/socket/connection.ts", "../../vscode-ws-jsonrpc/src/logger.ts", "../../vscode-ws-jsonrpc/src/connection.ts"],
  "sourcesContent": ["/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { Disposable } from 'vscode-jsonrpc';\n\nexport class DisposableCollection implements Disposable {\n    protected readonly disposables: Disposable[] = [];\n\n    dispose(): void {\n        while (this.disposables.length !== 0) {\n            this.disposables.pop()!.dispose();\n        }\n    }\n\n    push(disposable: Disposable): Disposable {\n        const disposables = this.disposables;\n        disposables.push(disposable);\n        return {\n            dispose(): void {\n                const index = disposables.indexOf(disposable);\n                if (index !== -1) {\n                    disposables.splice(index, 1);\n                }\n            }\n        };\n    }\n}\n", "/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { Disposable } from 'vscode-jsonrpc';\nimport { DataCallback, AbstractMessageReader, MessageReader } from 'vscode-jsonrpc/lib/common/messageReader.js';\nimport { IWebSocket } from './socket.js';\n\nexport class WebSocketMessageReader extends AbstractMessageReader implements MessageReader {\n    protected state: 'initial' | 'listening' | 'closed' = 'initial';\n    protected callback: DataCallback | undefined;\n    protected readonly events: { message?: any, error?: any }[] = [];\n\n    constructor(protected readonly socket: IWebSocket) {\n        super();\n        this.socket.onMessage(message =>\n            this.readMessage(message)\n        );\n        this.socket.onError(error =>\n            this.fireError(error)\n        );\n        this.socket.onClose((code, reason) => {\n            if (code !== 1000) {\n                const error: Error = {\n                    name: '' + code,\n                    message: `Error during socket reconnect: code = ${code}, reason = ${reason}`\n                };\n                this.fireError(error);\n            }\n            this.fireClose();\n        });\n    }\n\n    listen(callback: DataCallback): Disposable {\n        if (this.state === 'initial') {\n            this.state = 'listening';\n            this.callback = callback;\n            while (this.events.length !== 0) {\n                const event = this.events.pop()!;\n                if (event.message) {\n                    this.readMessage(event.message);\n                } else if (event.error) {\n                    this.fireError(event.error);\n                } else {\n                    this.fireClose();\n                }\n            }\n        }\n        return {\n            dispose: () => {\n                if (this.callback === callback) {\n                    this.callback = undefined;\n                }\n            }\n        };\n    }\n\n    protected readMessage(message: any): void {\n        if (this.state === 'initial') {\n            this.events.splice(0, 0, { message });\n        } else if (this.state === 'listening') {\n            try {\n                const data = JSON.parse(message);\n                this.callback!(data);\n            } catch (err) {\n                const error: Error = {\n                    name: '' + 400,\n                    message: `Error during message parsing, reason = ${typeof err === 'object' ? (err as any).message : 'unknown'}`\n                };\n                this.fireError(error);\n            }\n        }\n    }\n\n    protected override fireError(error: any): void {\n        if (this.state === 'initial') {\n            this.events.splice(0, 0, { error });\n        } else if (this.state === 'listening') {\n            super.fireError(error);\n        }\n    }\n\n    protected override fireClose(): void {\n        if (this.state === 'initial') {\n            this.events.splice(0, 0, {});\n        } else if (this.state === 'listening') {\n            super.fireClose();\n        }\n        this.state = 'closed';\n    }\n}\n", "/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { Message } from 'vscode-jsonrpc/lib/common/messages.js';\nimport { AbstractMessageWriter, MessageWriter } from 'vscode-jsonrpc/lib/common/messageWriter.js';\nimport { IWebSocket } from './socket.js';\n\nexport class WebSocketMessageWriter extends AbstractMessageWriter implements MessageWriter {\n    protected errorCount = 0;\n\n    constructor(protected readonly socket: IWebSocket) {\n        super();\n    }\n\n    end(): void {\n    }\n\n    async write(msg: Message): Promise<void> {\n        try {\n            const content = JSON.stringify(msg);\n            this.socket.send(content);\n        } catch (e) {\n            this.errorCount++;\n            this.fireError(e, msg, this.errorCount);\n        }\n    }\n}\n", "/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { MessageConnection, createMessageConnection, Logger } from 'vscode-jsonrpc';\nimport { IWebSocket } from './socket.js';\nimport { WebSocketMessageReader } from './reader.js';\nimport { WebSocketMessageWriter } from './writer.js';\n\nexport function createWebSocketConnection(socket: IWebSocket, logger: Logger): MessageConnection {\n    const messageReader = new WebSocketMessageReader(socket);\n    const messageWriter = new WebSocketMessageWriter(socket);\n    const connection = createMessageConnection(messageReader, messageWriter, logger);\n    connection.onClose(() => connection.dispose());\n    return connection;\n}\n", "/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nimport { Logger } from 'vscode-jsonrpc';\n\nexport class ConsoleLogger implements Logger {\n    public error(message: string): void {\n        console.error(message);\n    }\n\n    public warn(message: string): void {\n        console.warn(message);\n    }\n\n    public info(message: string): void {\n        console.info(message);\n    }\n\n    public log(message: string): void {\n        console.log(message);\n    }\n\n    public debug(message: string): void {\n        console.debug(message);\n    }\n}\n", "/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { MessageConnection, Logger } from 'vscode-jsonrpc';\nimport { createWebSocketConnection } from './socket/connection.js';\nimport { IWebSocket } from './socket/socket.js';\nimport { ConsoleLogger } from './logger.js';\n\nexport function listen(options: {\n    webSocket: WebSocket;\n    logger?: Logger;\n    onConnection: (connection: MessageConnection) => void;\n}) {\n    const { webSocket, onConnection } = options;\n    const logger = options.logger || new ConsoleLogger();\n    webSocket.onopen = () => {\n        const socket = toSocket(webSocket);\n        const connection = createWebSocketConnection(socket, logger);\n        onConnection(connection);\n    };\n}\n\nexport function toSocket(webSocket: WebSocket): IWebSocket {\n    return {\n        send: content => webSocket.send(content),\n        onMessage: cb => {\n            webSocket.onmessage = event => cb(event.data);\n        },\n        onError: cb => {\n            webSocket.onerror = event => {\n                if ('message' in event) {\n                    cb((event as any).message);\n                }\n            };\n        },\n        onClose: cb => {\n            webSocket.onclose = event => cb(event.code, event.reason);\n        },\n        dispose: () => webSocket.close()\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
