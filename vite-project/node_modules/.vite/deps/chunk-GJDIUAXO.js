import {
  TELEMETRY_CRASH_REPORTER_SETTING_ID,
  TELEMETRY_OLD_SETTING_ID,
  TELEMETRY_SETTING_ID,
  cloneAndChange,
  getRemoteName,
  init_objects,
  init_remoteHosts,
  init_telemetry
} from "./chunk-N5MAMNNV.js";
import {
  __esm
} from "./chunk-PGWBAY6J.js";

// node_modules/vscode/external/tslib/tslib.es6.js
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
var init_tslib_es6 = __esm({
  "node_modules/vscode/external/tslib/tslib.es6.js"() {
  }
});

// node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js
function supportsTelemetry(productService, environmentService) {
  if (!environmentService.isBuilt && !environmentService.disableTelemetry) {
    return true;
  }
  return !(environmentService.disableTelemetry || !productService.enableTelemetry || environmentService.extensionTestsLocationURI);
}
function isLoggingOnly(productService, environmentService) {
  var _a;
  if (environmentService.isBuilt) {
    return false;
  }
  if (environmentService.disableTelemetry) {
    return false;
  }
  if (productService.enableTelemetry && ((_a = productService.aiConfig) == null ? void 0 : _a.ariaKey)) {
    return false;
  }
  return true;
}
function getTelemetryLevel(configurationService) {
  const newConfig = configurationService.getValue(TELEMETRY_SETTING_ID);
  const crashReporterConfig = configurationService.getValue(TELEMETRY_CRASH_REPORTER_SETTING_ID);
  const oldConfig = configurationService.getValue(TELEMETRY_OLD_SETTING_ID);
  if (oldConfig === false || crashReporterConfig === false) {
    return 0;
  }
  switch (newConfig ?? "all") {
    case "all":
      return 3;
    case "error":
      return 2;
    case "crash":
      return 1;
    case "off":
      return 0;
  }
}
function cleanRemoteAuthority(remoteAuthority) {
  if (!remoteAuthority) {
    return "none";
  }
  const remoteName = getRemoteName(remoteAuthority);
  return telemetryAllowedAuthorities.has(remoteName) ? remoteName : "other";
}
function anonymizeFilePaths(stack, cleanupPatterns) {
  if (!stack || !stack.includes("/") && !stack.includes("\\")) {
    return stack;
  }
  let updatedStack = stack;
  const cleanUpIndexes = [];
  for (const regexp of cleanupPatterns) {
    while (true) {
      const result = regexp.exec(stack);
      if (!result) {
        break;
      }
      cleanUpIndexes.push([result.index, regexp.lastIndex]);
    }
  }
  const nodeModulesRegex = /^[\\\/]?(node_modules|node_modules\.asar)[\\\/]/;
  const fileRegex = /(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-\._]+(\\\\|\\|\/))+[\w-\._]*/g;
  let lastIndex = 0;
  updatedStack = "";
  while (true) {
    const result = fileRegex.exec(stack);
    if (!result) {
      break;
    }
    const overlappingRange = cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex);
    if (!nodeModulesRegex.test(result[0]) && !overlappingRange) {
      updatedStack += stack.substring(lastIndex, result.index) + "<REDACTED: user-file-path>";
      lastIndex = fileRegex.lastIndex;
    }
  }
  if (lastIndex < stack.length) {
    updatedStack += stack.substr(lastIndex);
  }
  return updatedStack;
}
function removePropertiesWithPossibleUserInfo(property) {
  if (!property) {
    return property;
  }
  const userDataRegexes = [
    { label: "Google API Key", regex: /AIza[A-Za-z0-9_\\\-]{35}/ },
    { label: "Slack Token", regex: /xox[pbar]\-[A-Za-z0-9]/ },
    { label: "Generic Secret", regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },
    { label: "Email", regex: /@[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+/ }
  ];
  for (const secretRegex of userDataRegexes) {
    if (secretRegex.regex.test(property)) {
      return `<REDACTED: ${secretRegex.label}>`;
    }
  }
  return property;
}
function cleanData(data, cleanUpPatterns) {
  return cloneAndChange(data, (value) => {
    if (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, "isTrustedTelemetryValue")) {
      return value.value;
    }
    if (typeof value === "string") {
      let updatedProperty = value.replaceAll("%20", " ");
      updatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);
      for (const regexp of cleanUpPatterns) {
        updatedProperty = updatedProperty.replace(regexp, "");
      }
      updatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);
      return updatedProperty;
    }
    return void 0;
  });
}
var TelemetryTrustedValue, NullEndpointTelemetryService, extensionTelemetryLogChannelId, telemetryAllowedAuthorities;
var init_telemetryUtils = __esm({
  "node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js"() {
    init_objects();
    init_remoteHosts();
    init_telemetry();
    TelemetryTrustedValue = class {
      constructor(value) {
        this.value = value;
        this.isTrustedTelemetryValue = true;
      }
    };
    NullEndpointTelemetryService = class {
      async publicLog(_endpoint, _eventName, _data) {
      }
      async publicLogError(_endpoint, _errorEventName, _data) {
      }
    };
    extensionTelemetryLogChannelId = "extensionTelemetryLog";
    telemetryAllowedAuthorities = /* @__PURE__ */ new Set(
      ["ssh-remote", "dev-container", "attached-container", "wsl", "tunnel", "codespaces", "amlext"]
    );
  }
});

export {
  __decorate,
  __param,
  init_tslib_es6,
  TelemetryTrustedValue,
  NullEndpointTelemetryService,
  extensionTelemetryLogChannelId,
  supportsTelemetry,
  isLoggingOnly,
  getTelemetryLevel,
  cleanRemoteAuthority,
  cleanData,
  init_telemetryUtils
};
//# sourceMappingURL=chunk-GJDIUAXO.js.map
