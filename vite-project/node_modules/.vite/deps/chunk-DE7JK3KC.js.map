{
  "version": 3,
  "sources": ["../../vscode/vscode/src/vs/platform/theme/common/tokenClassificationRegistry.js"],
  "sourcesContent": ["import { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nconst TOKEN_TYPE_WILDCARD = '*';\nconst TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR = ':';\nconst CLASSIFIER_MODIFIER_SEPARATOR = '.';\nconst idPattern = '\\\\w+[-_\\\\w+]*';\nconst typeAndModifierIdPattern = `^${idPattern}$`;\nconst selectorPattern = `^(${idPattern}|\\\\*)(\\\\${CLASSIFIER_MODIFIER_SEPARATOR}${idPattern})*(${TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR}${idPattern})?$`;\nconst fontStylePattern = '^(\\\\s*(italic|bold|underline|strikethrough))*\\\\s*$';\nclass TokenStyle {\n    constructor(foreground, bold, underline, strikethrough, italic) {\n        this.foreground = foreground;\n        this.bold = bold;\n        this.underline = underline;\n        this.strikethrough = strikethrough;\n        this.italic = italic;\n    }\n}\n( (function(TokenStyle) {\n    function toJSONObject(style) {\n        return {\n            _foreground: style.foreground === undefined ? null : Color.Format.CSS.formatHexA(style.foreground, true),\n            _bold: style.bold === undefined ? null : style.bold,\n            _underline: style.underline === undefined ? null : style.underline,\n            _italic: style.italic === undefined ? null : style.italic,\n            _strikethrough: style.strikethrough === undefined ? null : style.strikethrough,\n        };\n    }\n    TokenStyle.toJSONObject = toJSONObject;\n    function fromJSONObject(obj) {\n        if (obj) {\n            const boolOrUndef = (b) => (typeof b === 'boolean') ? b : undefined;\n            const colorOrUndef = (s) => (typeof s === 'string') ? ( Color.fromHex(s)) : undefined;\n            return ( new TokenStyle(\n                colorOrUndef(obj._foreground),\n                boolOrUndef(obj._bold),\n                boolOrUndef(obj._underline),\n                boolOrUndef(obj._strikethrough),\n                boolOrUndef(obj._italic)\n            ));\n        }\n        return undefined;\n    }\n    TokenStyle.fromJSONObject = fromJSONObject;\n    function equals(s1, s2) {\n        if (s1 === s2) {\n            return true;\n        }\n        return s1 !== undefined && s2 !== undefined\n            && (s1.foreground instanceof Color ? s1.foreground.equals(s2.foreground) : s2.foreground === undefined)\n            && s1.bold === s2.bold\n            && s1.underline === s2.underline\n            && s1.strikethrough === s2.strikethrough\n            && s1.italic === s2.italic;\n    }\n    TokenStyle.equals = equals;\n    function is(s) {\n        return s instanceof TokenStyle;\n    }\n    TokenStyle.is = is;\n    function fromData(data) {\n        return ( new TokenStyle(\n            data.foreground,\n            data.bold,\n            data.underline,\n            data.strikethrough,\n            data.italic\n        ));\n    }\n    TokenStyle.fromData = fromData;\n    function fromSettings(foreground, fontStyle, bold, underline, strikethrough, italic) {\n        let foregroundColor = undefined;\n        if (foreground !== undefined) {\n            foregroundColor = ( Color.fromHex(foreground));\n        }\n        if (fontStyle !== undefined) {\n            bold = italic = underline = strikethrough = false;\n            const expression = /italic|bold|underline|strikethrough/g;\n            let match;\n            while ((match = expression.exec(fontStyle))) {\n                switch (match[0]) {\n                    case 'bold':\n                        bold = true;\n                        break;\n                    case 'italic':\n                        italic = true;\n                        break;\n                    case 'underline':\n                        underline = true;\n                        break;\n                    case 'strikethrough':\n                        strikethrough = true;\n                        break;\n                }\n            }\n        }\n        return ( new TokenStyle(foregroundColor, bold, underline, strikethrough, italic));\n    }\n    TokenStyle.fromSettings = fromSettings;\n})(TokenStyle || (TokenStyle = {})));\nvar SemanticTokenRule;\n( (function(SemanticTokenRule) {\n    function fromJSONObject(registry, o) {\n        if (o && typeof o._selector === 'string' && o._style) {\n            const style = TokenStyle.fromJSONObject(o._style);\n            if (style) {\n                try {\n                    return { selector: registry.parseTokenSelector(o._selector), style };\n                }\n                catch (_ignore) {\n                }\n            }\n        }\n        return undefined;\n    }\n    SemanticTokenRule.fromJSONObject = fromJSONObject;\n    function toJSONObject(rule) {\n        return {\n            _selector: rule.selector.id,\n            _style: TokenStyle.toJSONObject(rule.style)\n        };\n    }\n    SemanticTokenRule.toJSONObject = toJSONObject;\n    function equals(r1, r2) {\n        if (r1 === r2) {\n            return true;\n        }\n        return r1 !== undefined && r2 !== undefined\n            && r1.selector && r2.selector && r1.selector.id === r2.selector.id\n            && TokenStyle.equals(r1.style, r2.style);\n    }\n    SemanticTokenRule.equals = equals;\n    function is(r) {\n        return r && r.selector && typeof r.selector.id === 'string' && TokenStyle.is(r.style);\n    }\n    SemanticTokenRule.is = is;\n})(SemanticTokenRule || (SemanticTokenRule = {})));\nclass TokenClassificationRegistry {\n    constructor() {\n        this._onDidChangeSchema = ( new Emitter());\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.currentTypeNumber = 0;\n        this.currentModifierBit = 1;\n        this.tokenStylingDefaultRules = [];\n        this.tokenStylingSchema = {\n            type: 'object',\n            properties: {},\n            patternProperties: {\n                [selectorPattern]: getStylingSchemeEntry()\n            },\n            additionalProperties: false,\n            definitions: {\n                style: {\n                    type: 'object',\n                    description: ( nls.localize('schema.token.settings', 'Colors and styles for the token.')),\n                    properties: {\n                        foreground: {\n                            type: 'string',\n                            description: ( nls.localize('schema.token.foreground', 'Foreground color for the token.')),\n                            format: 'color-hex',\n                            default: '#ff0000'\n                        },\n                        background: {\n                            type: 'string',\n                            deprecationMessage: ( nls.localize(\n                                'schema.token.background.warning',\n                                'Token background colors are currently not supported.'\n                            ))\n                        },\n                        fontStyle: {\n                            type: 'string',\n                            description: ( nls.localize(\n                                'schema.token.fontStyle',\n                                'Sets the all font styles of the rule: \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'\n                            )),\n                            pattern: fontStylePattern,\n                            patternErrorMessage: ( nls.localize(\n                                'schema.fontStyle.error',\n                                'Font style must be \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. The empty string unsets all styles.'\n                            )),\n                            defaultSnippets: [\n                                { label: ( nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)')), bodyText: '\"\"' },\n                                { body: 'italic' },\n                                { body: 'bold' },\n                                { body: 'underline' },\n                                { body: 'strikethrough' },\n                                { body: 'italic bold' },\n                                { body: 'italic underline' },\n                                { body: 'italic strikethrough' },\n                                { body: 'bold underline' },\n                                { body: 'bold strikethrough' },\n                                { body: 'underline strikethrough' },\n                                { body: 'italic bold underline' },\n                                { body: 'italic bold strikethrough' },\n                                { body: 'italic underline strikethrough' },\n                                { body: 'bold underline strikethrough' },\n                                { body: 'italic bold underline strikethrough' }\n                            ]\n                        },\n                        bold: {\n                            type: 'boolean',\n                            description: ( nls.localize(\n                                'schema.token.bold',\n                                'Sets or unsets the font style to bold. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        italic: {\n                            type: 'boolean',\n                            description: ( nls.localize(\n                                'schema.token.italic',\n                                'Sets or unsets the font style to italic. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        underline: {\n                            type: 'boolean',\n                            description: ( nls.localize(\n                                'schema.token.underline',\n                                'Sets or unsets the font style to underline. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        strikethrough: {\n                            type: 'boolean',\n                            description: ( nls.localize(\n                                'schema.token.strikethrough',\n                                'Sets or unsets the font style to strikethrough. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        }\n                    },\n                    defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n                }\n            }\n        };\n        this.tokenTypeById = Object.create(null);\n        this.tokenModifierById = Object.create(null);\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenType(id, description, superType, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw new Error('Invalid token type id.');\n        }\n        if (superType && !superType.match(typeAndModifierIdPattern)) {\n            throw new Error('Invalid token super type id.');\n        }\n        const num = this.currentTypeNumber++;\n        const tokenStyleContribution = { num, id, superType, description, deprecationMessage };\n        this.tokenTypeById[id] = tokenStyleContribution;\n        const stylingSchemeEntry = getStylingSchemeEntry(description, deprecationMessage);\n        this.tokenStylingSchema.properties[id] = stylingSchemeEntry;\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenModifier(id, description, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw new Error('Invalid token modifier id.');\n        }\n        const num = this.currentModifierBit;\n        this.currentModifierBit = this.currentModifierBit * 2;\n        const tokenStyleContribution = { num, id, description, deprecationMessage };\n        this.tokenModifierById[id] = tokenStyleContribution;\n        this.tokenStylingSchema.properties[`*.${id}`] = getStylingSchemeEntry(description, deprecationMessage);\n    }\n    parseTokenSelector(selectorString, language) {\n        const selector = parseClassifierString(selectorString, language);\n        if (!selector.type) {\n            return {\n                match: () => -1,\n                id: '$invalid'\n            };\n        }\n        return {\n            match: (type, modifiers, language) => {\n                let score = 0;\n                if (selector.language !== undefined) {\n                    if (selector.language !== language) {\n                        return -1;\n                    }\n                    score += 10;\n                }\n                if (selector.type !== TOKEN_TYPE_WILDCARD) {\n                    const hierarchy = this.getTypeHierarchy(type);\n                    const level = hierarchy.indexOf(selector.type);\n                    if (level === -1) {\n                        return -1;\n                    }\n                    score += (100 - level);\n                }\n                for (const selectorModifier of selector.modifiers) {\n                    if (modifiers.indexOf(selectorModifier) === -1) {\n                        return -1;\n                    }\n                }\n                return score + selector.modifiers.length * 100;\n            },\n            id: `${[selector.type, ...selector.modifiers.sort()].join('.')}${selector.language !== undefined ? ':' + selector.language : ''}`\n        };\n    }\n    registerTokenStyleDefault(selector, defaults) {\n        this.tokenStylingDefaultRules.push({ selector, defaults });\n    }\n    deregisterTokenStyleDefault(selector) {\n        const selectorString = selector.id;\n        this.tokenStylingDefaultRules = this.tokenStylingDefaultRules.filter(r => r.selector.id !== selectorString);\n    }\n    deregisterTokenType(id) {\n        delete this.tokenTypeById[id];\n        delete this.tokenStylingSchema.properties[id];\n        this.typeHierarchy = Object.create(null);\n    }\n    deregisterTokenModifier(id) {\n        delete this.tokenModifierById[id];\n        delete this.tokenStylingSchema.properties[`*.${id}`];\n    }\n    getTokenTypes() {\n        return ( ( Object.keys(this.tokenTypeById)).map(id => this.tokenTypeById[id]));\n    }\n    getTokenModifiers() {\n        return ( ( Object.keys(this.tokenModifierById)).map(id => this.tokenModifierById[id]));\n    }\n    getTokenStylingSchema() {\n        return this.tokenStylingSchema;\n    }\n    getTokenStylingDefaultRules() {\n        return this.tokenStylingDefaultRules;\n    }\n    getTypeHierarchy(typeId) {\n        let hierarchy = this.typeHierarchy[typeId];\n        if (!hierarchy) {\n            this.typeHierarchy[typeId] = hierarchy = [typeId];\n            let type = this.tokenTypeById[typeId];\n            while (type && type.superType) {\n                hierarchy.push(type.superType);\n                type = this.tokenTypeById[type.superType];\n            }\n        }\n        return hierarchy;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return ( ( Object.keys(this.tokenTypeById)).sort(sorter).map(k => `- \\`${k}\\`: ${this.tokenTypeById[k].description}`)).join('\\n');\n    }\n}\nconst CHAR_LANGUAGE = TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR.charCodeAt(0);\nconst CHAR_MODIFIER = CLASSIFIER_MODIFIER_SEPARATOR.charCodeAt(0);\nfunction parseClassifierString(s, defaultLanguage) {\n    let k = s.length;\n    let language = defaultLanguage;\n    const modifiers = [];\n    for (let i = k - 1; i >= 0; i--) {\n        const ch = s.charCodeAt(i);\n        if (ch === CHAR_LANGUAGE || ch === CHAR_MODIFIER) {\n            const segment = s.substring(i + 1, k);\n            k = i;\n            if (ch === CHAR_LANGUAGE) {\n                language = segment;\n            }\n            else {\n                modifiers.push(segment);\n            }\n        }\n    }\n    const type = s.substring(0, k);\n    return { type, modifiers, language };\n}\nconst tokenClassificationRegistry = createDefaultTokenClassificationRegistry();\nfunction createDefaultTokenClassificationRegistry() {\n    const registry = ( new TokenClassificationRegistry());\n    function registerTokenType(id, description, scopesToProbe = [], superType, deprecationMessage) {\n        registry.registerTokenType(id, description, superType, deprecationMessage);\n        if (scopesToProbe) {\n            registerTokenStyleDefault(id, scopesToProbe);\n        }\n        return id;\n    }\n    function registerTokenStyleDefault(selectorString, scopesToProbe) {\n        try {\n            const selector = registry.parseTokenSelector(selectorString);\n            registry.registerTokenStyleDefault(selector, { scopesToProbe });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    registerTokenType('comment', ( nls.localize('comment', \"Style for comments.\")), [['comment']]);\n    registerTokenType('string', ( nls.localize('string', \"Style for strings.\")), [['string']]);\n    registerTokenType('keyword', ( nls.localize('keyword', \"Style for keywords.\")), [['keyword.control']]);\n    registerTokenType('number', ( nls.localize('number', \"Style for numbers.\")), [['constant.numeric']]);\n    registerTokenType('regexp', ( nls.localize('regexp', \"Style for expressions.\")), [['constant.regexp']]);\n    registerTokenType('operator', ( nls.localize('operator', \"Style for operators.\")), [['keyword.operator']]);\n    registerTokenType('namespace', ( nls.localize('namespace', \"Style for namespaces.\")), [['entity.name.namespace']]);\n    registerTokenType('type', ( nls.localize('type', \"Style for types.\")), [['entity.name.type'], ['support.type']]);\n    registerTokenType('struct', ( nls.localize('struct', \"Style for structs.\")), [['entity.name.type.struct']]);\n    registerTokenType('class', ( nls.localize('class', \"Style for classes.\")), [['entity.name.type.class'], ['support.class']]);\n    registerTokenType('interface', ( nls.localize('interface', \"Style for interfaces.\")), [['entity.name.type.interface']]);\n    registerTokenType('enum', ( nls.localize('enum', \"Style for enums.\")), [['entity.name.type.enum']]);\n    registerTokenType('typeParameter', ( nls.localize('typeParameter', \"Style for type parameters.\")), [['entity.name.type.parameter']]);\n    registerTokenType('function', ( nls.localize('function', \"Style for functions\")), [['entity.name.function'], ['support.function']]);\n    registerTokenType('member', ( nls.localize('member', \"Style for member functions\")), [], 'method', 'Deprecated use `method` instead');\n    registerTokenType('method', ( nls.localize('method', \"Style for method (member functions)\")), [['entity.name.function.member'], ['support.function']]);\n    registerTokenType('macro', ( nls.localize('macro', \"Style for macros.\")), [['entity.name.function.preprocessor']]);\n    registerTokenType('variable', ( nls.localize('variable', \"Style for variables.\")), [['variable.other.readwrite'], ['entity.name.variable']]);\n    registerTokenType('parameter', ( nls.localize('parameter', \"Style for parameters.\")), [['variable.parameter']]);\n    registerTokenType('property', ( nls.localize('property', \"Style for properties.\")), [['variable.other.property']]);\n    registerTokenType('enumMember', ( nls.localize('enumMember', \"Style for enum members.\")), [['variable.other.enummember']]);\n    registerTokenType('event', ( nls.localize('event', \"Style for events.\")), [['variable.other.event']]);\n    registerTokenType('decorator', ( nls.localize('decorator', \"Style for decorators & annotations.\")), [['entity.name.decorator'], ['entity.name.function']]);\n    registerTokenType('label', ( nls.localize('labels', \"Style for labels. \")), undefined);\n    registry.registerTokenModifier('declaration', ( nls.localize('declaration', \"Style for all symbol declarations.\")), undefined);\n    registry.registerTokenModifier('documentation', ( nls.localize('documentation', \"Style to use for references in documentation.\")), undefined);\n    registry.registerTokenModifier('static', ( nls.localize('static', \"Style to use for symbols that are static.\")), undefined);\n    registry.registerTokenModifier('abstract', ( nls.localize('abstract', \"Style to use for symbols that are abstract.\")), undefined);\n    registry.registerTokenModifier('deprecated', ( nls.localize('deprecated', \"Style to use for symbols that are deprecated.\")), undefined);\n    registry.registerTokenModifier('modification', ( nls.localize('modification', \"Style to use for write accesses.\")), undefined);\n    registry.registerTokenModifier('async', ( nls.localize('async', \"Style to use for symbols that are async.\")), undefined);\n    registry.registerTokenModifier('readonly', ( nls.localize('readonly', \"Style to use for symbols that are read-only.\")), undefined);\n    registerTokenStyleDefault('variable.readonly', [['variable.other.constant']]);\n    registerTokenStyleDefault('property.readonly', [['variable.other.constant.property']]);\n    registerTokenStyleDefault('type.defaultLibrary', [['support.type']]);\n    registerTokenStyleDefault('class.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('interface.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('variable.defaultLibrary', [['support.variable'], ['support.other.variable']]);\n    registerTokenStyleDefault('variable.defaultLibrary.readonly', [['support.constant']]);\n    registerTokenStyleDefault('property.defaultLibrary', [['support.variable.property']]);\n    registerTokenStyleDefault('property.defaultLibrary.readonly', [['support.constant.property']]);\n    registerTokenStyleDefault('function.defaultLibrary', [['support.function']]);\n    registerTokenStyleDefault('member.defaultLibrary', [['support.function']]);\n    return registry;\n}\nfunction getTokenClassificationRegistry() {\n    return tokenClassificationRegistry;\n}\nfunction getStylingSchemeEntry(description, deprecationMessage) {\n    return {\n        description,\n        deprecationMessage,\n        defaultSnippets: [{ body: '${1:#ff0000}' }],\n        anyOf: [\n            {\n                type: 'string',\n                format: 'color-hex'\n            },\n            {\n                $ref: '#/definitions/style'\n            }\n        ]\n    };\n}\nconst tokenStylingSchemaId = 'vscode://schemas/token-styling';\nconst schemaRegistry = platform.Registry.as(Extensions.JSONContribution);\nschemaRegistry.registerSchema(tokenStylingSchemaId, tokenClassificationRegistry.getTokenStylingSchema());\nconst delayer = ( new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(tokenStylingSchemaId), 200));\ntokenClassificationRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\nexport { SemanticTokenRule, TokenStyle, getTokenClassificationRegistry, parseClassifierString, tokenStylingSchemaId, typeAndModifierIdPattern };\n"],
  "mappings": "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",
  "names": ["TokenStyle", "SemanticTokenRule", "language"]
}
