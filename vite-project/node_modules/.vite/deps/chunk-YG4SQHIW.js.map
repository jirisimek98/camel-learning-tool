{
  "version": 3,
  "sources": ["../../vscode/lifecycle.js"],
  "sourcesContent": ["import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from './vscode/src/vs/workbench/common/contributions.js';\nimport { ILifecycleService } from './vscode/src/vs/workbench/services/lifecycle/common/lifecycle.js';\nimport { Barrier, RunOnceScheduler, runWhenIdle } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nconst renderWorkbenchEmitter = new Emitter();\nconst onRenderWorkbench = renderWorkbenchEmitter.event;\nconst serviceInitializedBarrier = new Barrier();\nconst serviceInitializePreParticipants = [];\nconst serviceInitializeParticipants = [];\nconst serviceInitializePostParticipants = [];\nfunction registerServiceInitializePreParticipant(participant) {\n    serviceInitializePreParticipants.push(participant);\n}\nfunction registerServiceInitializeParticipant(participant) {\n    serviceInitializeParticipants.push(participant);\n}\nfunction registerServiceInitializePostParticipant(participant) {\n    serviceInitializePostParticipants.push(participant);\n}\nasync function startup(instantiationService) {\n    await instantiationService.invokeFunction(async (accessor) => {\n        await Promise.all(( serviceInitializePreParticipants.map(participant => participant(accessor))));\n    });\n    await instantiationService.invokeFunction(async (accessor) => {\n        const lifecycleService = accessor.get(ILifecycleService);\n        await Promise.all(( serviceInitializeParticipants.map(participant => participant(accessor))));\n        lifecycleService.phase = 2 ;\n    });\n    await instantiationService.invokeFunction(async (accessor) => {\n        await Promise.all(( serviceInitializePostParticipants.map(participant => participant(accessor))));\n    });\n    serviceInitializedBarrier.open();\n    instantiationService.invokeFunction(accessor => {\n        const lifecycleService = accessor.get(ILifecycleService);\n        ( Registry.as(Extensions.Workbench)).start(accessor);\n        renderWorkbenchEmitter.fire(accessor);\n        lifecycleService.phase = 3 ;\n        const eventuallyPhaseScheduler = new RunOnceScheduler(() => {\n            runWhenIdle(() => {\n                lifecycleService.phase = 4 ;\n            }, 2500);\n        }, 2500);\n        eventuallyPhaseScheduler.schedule();\n    });\n}\nexport { onRenderWorkbench, registerServiceInitializeParticipant, registerServiceInitializePostParticipant, registerServiceInitializePreParticipant, serviceInitializedBarrier, startup };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA,IAAM,yBAAyB,IAAI,QAAQ;AAC3C,IAAM,oBAAoB,uBAAuB;AACjD,IAAM,4BAA4B,IAAI,QAAQ;AAC9C,IAAM,mCAAmC,CAAC;AAC1C,IAAM,gCAAgC,CAAC;AACvC,IAAM,oCAAoC,CAAC;AAC3C,SAAS,wCAAwC,aAAa;AAC1D,mCAAiC,KAAK,WAAW;AACrD;AACA,SAAS,qCAAqC,aAAa;AACvD,gCAA8B,KAAK,WAAW;AAClD;AAIA,eAAe,QAAQ,sBAAsB;AACzC,QAAM,qBAAqB,eAAe,OAAO,aAAa;AAC1D,UAAM,QAAQ,IAAM,iCAAiC,IAAI,iBAAe,YAAY,QAAQ,CAAC,CAAE;AAAA,EACnG,CAAC;AACD,QAAM,qBAAqB,eAAe,OAAO,aAAa;AAC1D,UAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,UAAM,QAAQ,IAAM,8BAA8B,IAAI,iBAAe,YAAY,QAAQ,CAAC,CAAE;AAC5F,qBAAiB,QAAQ;AAAA,EAC7B,CAAC;AACD,QAAM,qBAAqB,eAAe,OAAO,aAAa;AAC1D,UAAM,QAAQ,IAAM,kCAAkC,IAAI,iBAAe,YAAY,QAAQ,CAAC,CAAE;AAAA,EACpG,CAAC;AACD,4BAA0B,KAAK;AAC/B,uBAAqB,eAAe,cAAY;AAC5C,UAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,IAAE,SAAS,GAAG,WAAW,SAAS,EAAG,MAAM,QAAQ;AACnD,2BAAuB,KAAK,QAAQ;AACpC,qBAAiB,QAAQ;AACzB,UAAM,2BAA2B,IAAI,iBAAiB,MAAM;AACxD,kBAAY,MAAM;AACd,yBAAiB,QAAQ;AAAA,MAC7B,GAAG,IAAI;AAAA,IACX,GAAG,IAAI;AACP,6BAAyB,SAAS;AAAA,EACtC,CAAC;AACL;",
  "names": []
}
