import {
  RemoteAuthorityResolverErrorCode,
  init_notebookCommon,
  init_remoteAuthorityResolver,
  isTextStreamMime
} from "./chunk-E2764U5K.js";
import {
  __decorate,
  init_tslib_es6
} from "./chunk-GJDIUAXO.js";
import {
  ExtensionIdentifier,
  FileSystemProviderErrorCode,
  MarkdownString,
  Mimes,
  ResourceMap,
  URI,
  VSBuffer,
  asArray,
  coalesceInPlace,
  equals,
  generateUuid,
  illegalArgument,
  init_arrays,
  init_buffer,
  init_errors,
  init_extensions,
  init_files,
  init_htmlContent,
  init_map,
  init_mime,
  init_strings,
  init_types,
  init_uri,
  init_uuid,
  isNumber,
  isObject,
  isString,
  isStringArray,
  markAsFileSystemProviderError,
  nextCharLength,
  normalizeMimeType
} from "./chunk-N5MAMNNV.js";
import {
  __esm,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-PGWBAY6J.js";

// node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js
function createMessageOfType(type) {
  const result = VSBuffer.alloc(1);
  switch (type) {
    case 0:
      result.writeUInt8(1, 0);
      break;
    case 1:
      result.writeUInt8(2, 0);
      break;
    case 2:
      result.writeUInt8(3, 0);
      break;
  }
  return result;
}
function isMessageOfType(message, type) {
  if (message.byteLength !== 1) {
    return false;
  }
  switch (message.readUInt8(0)) {
    case 1:
      return type === 0;
    case 2:
      return type === 1;
    case 3:
      return type === 2;
    default:
      return false;
  }
}
var UIKind;
var init_extensionHostProtocol = __esm({
  "node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js"() {
    init_buffer();
    (function(UIKind2) {
      UIKind2[UIKind2["Desktop"] = 1] = "Desktop";
      UIKind2[UIKind2["Web"] = 2] = "Web";
    })(UIKind || (UIKind = {}));
  }
});

// node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js
function createProxyIdentifier(identifier) {
  const result = new ProxyIdentifier(identifier);
  identifiers[result.nid] = result;
  return result;
}
function getStringIdentifierForProxy(nid) {
  return identifiers[nid].sid;
}
var _ProxyIdentifier, ProxyIdentifier, identifiers, SerializableObjectWithBuffers;
var init_proxyIdentifier = __esm({
  "node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js"() {
    _ProxyIdentifier = class _ProxyIdentifier {
      constructor(sid) {
        this._proxyIdentifierBrand = void 0;
        this.sid = sid;
        this.nid = ++_ProxyIdentifier.count;
      }
    };
    _ProxyIdentifier.count = 0;
    ProxyIdentifier = _ProxyIdentifier;
    identifiers = [];
    SerializableObjectWithBuffers = class {
      constructor(value) {
        this.value = value;
      }
    };
  }
});

// node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js
var TextEditorRevealType, NotebookEditorRevealType, CandidatePortSource, _IdObject, IdObject, MainContext, ExtHostContext;
var init_extHost_protocol = __esm({
  "node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js"() {
    init_proxyIdentifier();
    (function(TextEditorRevealType3) {
      TextEditorRevealType3[TextEditorRevealType3["Default"] = 0] = "Default";
      TextEditorRevealType3[TextEditorRevealType3["InCenter"] = 1] = "InCenter";
      TextEditorRevealType3[TextEditorRevealType3["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
      TextEditorRevealType3[TextEditorRevealType3["AtTop"] = 3] = "AtTop";
    })(TextEditorRevealType || (TextEditorRevealType = {}));
    (function(NotebookEditorRevealType3) {
      NotebookEditorRevealType3[NotebookEditorRevealType3["Default"] = 0] = "Default";
      NotebookEditorRevealType3[NotebookEditorRevealType3["InCenter"] = 1] = "InCenter";
      NotebookEditorRevealType3[NotebookEditorRevealType3["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
      NotebookEditorRevealType3[NotebookEditorRevealType3["AtTop"] = 3] = "AtTop";
    })(NotebookEditorRevealType || (NotebookEditorRevealType = {}));
    (function(CandidatePortSource2) {
      CandidatePortSource2[CandidatePortSource2["None"] = 0] = "None";
      CandidatePortSource2[CandidatePortSource2["Process"] = 1] = "Process";
      CandidatePortSource2[CandidatePortSource2["Output"] = 2] = "Output";
    })(CandidatePortSource || (CandidatePortSource = {}));
    _IdObject = class _IdObject {
      static mixin(object) {
        object._id = _IdObject._n++;
        return object;
      }
    };
    _IdObject._n = 0;
    IdObject = _IdObject;
    MainContext = {
      MainThreadAuthentication: createProxyIdentifier("MainThreadAuthentication"),
      MainThreadBulkEdits: createProxyIdentifier("MainThreadBulkEdits"),
      MainThreadChatProvider: createProxyIdentifier("MainThreadChatProvider"),
      MainThreadChatSlashCommands: createProxyIdentifier("MainThreadChatSlashCommands"),
      MainThreadChatVariables: createProxyIdentifier("MainThreadChatVariables"),
      MainThreadClipboard: createProxyIdentifier("MainThreadClipboard"),
      MainThreadCommands: createProxyIdentifier("MainThreadCommands"),
      MainThreadComments: createProxyIdentifier("MainThreadComments"),
      MainThreadConfiguration: createProxyIdentifier("MainThreadConfiguration"),
      MainThreadConsole: createProxyIdentifier("MainThreadConsole"),
      MainThreadDebugService: createProxyIdentifier("MainThreadDebugService"),
      MainThreadDecorations: createProxyIdentifier("MainThreadDecorations"),
      MainThreadDiagnostics: createProxyIdentifier("MainThreadDiagnostics"),
      MainThreadDialogs: createProxyIdentifier("MainThreadDiaglogs"),
      MainThreadDocuments: createProxyIdentifier("MainThreadDocuments"),
      MainThreadDocumentContentProviders: createProxyIdentifier("MainThreadDocumentContentProviders"),
      MainThreadTextEditors: createProxyIdentifier("MainThreadTextEditors"),
      MainThreadEditorInsets: createProxyIdentifier("MainThreadEditorInsets"),
      MainThreadEditorTabs: createProxyIdentifier("MainThreadEditorTabs"),
      MainThreadErrors: createProxyIdentifier("MainThreadErrors"),
      MainThreadTreeViews: createProxyIdentifier("MainThreadTreeViews"),
      MainThreadDownloadService: createProxyIdentifier("MainThreadDownloadService"),
      MainThreadKeytar: createProxyIdentifier("MainThreadKeytar"),
      MainThreadLanguageFeatures: createProxyIdentifier("MainThreadLanguageFeatures"),
      MainThreadLanguages: createProxyIdentifier("MainThreadLanguages"),
      MainThreadLogger: createProxyIdentifier("MainThreadLogger"),
      MainThreadMessageService: createProxyIdentifier("MainThreadMessageService"),
      MainThreadOutputService: createProxyIdentifier("MainThreadOutputService"),
      MainThreadProgress: createProxyIdentifier("MainThreadProgress"),
      MainThreadQuickDiff: createProxyIdentifier("MainThreadQuickDiff"),
      MainThreadQuickOpen: createProxyIdentifier("MainThreadQuickOpen"),
      MainThreadStatusBar: createProxyIdentifier("MainThreadStatusBar"),
      MainThreadSecretState: createProxyIdentifier("MainThreadSecretState"),
      MainThreadStorage: createProxyIdentifier("MainThreadStorage"),
      MainThreadTelemetry: createProxyIdentifier("MainThreadTelemetry"),
      MainThreadTerminalService: createProxyIdentifier("MainThreadTerminalService"),
      MainThreadWebviews: createProxyIdentifier("MainThreadWebviews"),
      MainThreadWebviewPanels: createProxyIdentifier("MainThreadWebviewPanels"),
      MainThreadWebviewViews: createProxyIdentifier("MainThreadWebviewViews"),
      MainThreadCustomEditors: createProxyIdentifier("MainThreadCustomEditors"),
      MainThreadUrls: createProxyIdentifier("MainThreadUrls"),
      MainThreadUriOpeners: createProxyIdentifier("MainThreadUriOpeners"),
      MainThreadProfileContentHandlers: createProxyIdentifier("MainThreadProfileContentHandlers"),
      MainThreadWorkspace: createProxyIdentifier("MainThreadWorkspace"),
      MainThreadFileSystem: createProxyIdentifier("MainThreadFileSystem"),
      MainThreadExtensionService: createProxyIdentifier("MainThreadExtensionService"),
      MainThreadSCM: createProxyIdentifier("MainThreadSCM"),
      MainThreadSearch: createProxyIdentifier("MainThreadSearch"),
      MainThreadShare: createProxyIdentifier("MainThreadShare"),
      MainThreadTask: createProxyIdentifier("MainThreadTask"),
      MainThreadWindow: createProxyIdentifier("MainThreadWindow"),
      MainThreadLabelService: createProxyIdentifier("MainThreadLabelService"),
      MainThreadNotebook: createProxyIdentifier("MainThreadNotebook"),
      MainThreadNotebookDocuments: createProxyIdentifier("MainThreadNotebookDocumentsShape"),
      MainThreadNotebookEditors: createProxyIdentifier("MainThreadNotebookEditorsShape"),
      MainThreadNotebookKernels: createProxyIdentifier("MainThreadNotebookKernels"),
      MainThreadNotebookRenderers: createProxyIdentifier("MainThreadNotebookRenderers"),
      MainThreadInteractive: createProxyIdentifier("MainThreadInteractive"),
      MainThreadChat: createProxyIdentifier("MainThreadChat"),
      MainThreadInlineChat: createProxyIdentifier("MainThreadInlineChatShape"),
      MainThreadTheming: createProxyIdentifier("MainThreadTheming"),
      MainThreadTunnelService: createProxyIdentifier("MainThreadTunnelService"),
      MainThreadManagedSockets: createProxyIdentifier("MainThreadManagedSockets"),
      MainThreadTimeline: createProxyIdentifier("MainThreadTimeline"),
      MainThreadTesting: createProxyIdentifier("MainThreadTesting"),
      MainThreadLocalization: createProxyIdentifier("MainThreadLocalizationShape"),
      MainThreadAiRelatedInformation: createProxyIdentifier("MainThreadAiRelatedInformation"),
      MainThreadAiEmbeddingVector: createProxyIdentifier("MainThreadAiEmbeddingVector"),
      MainThreadIssueReporter: createProxyIdentifier("MainThreadIssueReporter")
    };
    ExtHostContext = {
      ExtHostCommands: createProxyIdentifier("ExtHostCommands"),
      ExtHostConfiguration: createProxyIdentifier("ExtHostConfiguration"),
      ExtHostDiagnostics: createProxyIdentifier("ExtHostDiagnostics"),
      ExtHostDebugService: createProxyIdentifier("ExtHostDebugService"),
      ExtHostDecorations: createProxyIdentifier("ExtHostDecorations"),
      ExtHostDocumentsAndEditors: createProxyIdentifier("ExtHostDocumentsAndEditors"),
      ExtHostDocuments: createProxyIdentifier("ExtHostDocuments"),
      ExtHostDocumentContentProviders: createProxyIdentifier("ExtHostDocumentContentProviders"),
      ExtHostDocumentSaveParticipant: createProxyIdentifier("ExtHostDocumentSaveParticipant"),
      ExtHostEditors: createProxyIdentifier("ExtHostEditors"),
      ExtHostTreeViews: createProxyIdentifier("ExtHostTreeViews"),
      ExtHostFileSystem: createProxyIdentifier("ExtHostFileSystem"),
      ExtHostFileSystemInfo: createProxyIdentifier("ExtHostFileSystemInfo"),
      ExtHostFileSystemEventService: createProxyIdentifier("ExtHostFileSystemEventService"),
      ExtHostLanguages: createProxyIdentifier("ExtHostLanguages"),
      ExtHostLanguageFeatures: createProxyIdentifier("ExtHostLanguageFeatures"),
      ExtHostQuickOpen: createProxyIdentifier("ExtHostQuickOpen"),
      ExtHostQuickDiff: createProxyIdentifier("ExtHostQuickDiff"),
      ExtHostStatusBar: createProxyIdentifier("ExtHostStatusBar"),
      ExtHostShare: createProxyIdentifier("ExtHostShare"),
      ExtHostExtensionService: createProxyIdentifier("ExtHostExtensionService"),
      ExtHostLogLevelServiceShape: createProxyIdentifier("ExtHostLogLevelServiceShape"),
      ExtHostTerminalService: createProxyIdentifier("ExtHostTerminalService"),
      ExtHostSCM: createProxyIdentifier("ExtHostSCM"),
      ExtHostSearch: createProxyIdentifier("ExtHostSearch"),
      ExtHostTask: createProxyIdentifier("ExtHostTask"),
      ExtHostWorkspace: createProxyIdentifier("ExtHostWorkspace"),
      ExtHostWindow: createProxyIdentifier("ExtHostWindow"),
      ExtHostWebviews: createProxyIdentifier("ExtHostWebviews"),
      ExtHostWebviewPanels: createProxyIdentifier("ExtHostWebviewPanels"),
      ExtHostCustomEditors: createProxyIdentifier("ExtHostCustomEditors"),
      ExtHostWebviewViews: createProxyIdentifier("ExtHostWebviewViews"),
      ExtHostEditorInsets: createProxyIdentifier("ExtHostEditorInsets"),
      ExtHostEditorTabs: createProxyIdentifier("ExtHostEditorTabs"),
      ExtHostProgress: createProxyIdentifier("ExtHostProgress"),
      ExtHostComments: createProxyIdentifier("ExtHostComments"),
      ExtHostSecretState: createProxyIdentifier("ExtHostSecretState"),
      ExtHostStorage: createProxyIdentifier("ExtHostStorage"),
      ExtHostUrls: createProxyIdentifier("ExtHostUrls"),
      ExtHostUriOpeners: createProxyIdentifier("ExtHostUriOpeners"),
      ExtHostProfileContentHandlers: createProxyIdentifier("ExtHostProfileContentHandlers"),
      ExtHostOutputService: createProxyIdentifier("ExtHostOutputService"),
      ExtHosLabelService: createProxyIdentifier("ExtHostLabelService"),
      ExtHostNotebook: createProxyIdentifier("ExtHostNotebook"),
      ExtHostNotebookDocuments: createProxyIdentifier("ExtHostNotebookDocuments"),
      ExtHostNotebookEditors: createProxyIdentifier("ExtHostNotebookEditors"),
      ExtHostNotebookKernels: createProxyIdentifier("ExtHostNotebookKernels"),
      ExtHostNotebookRenderers: createProxyIdentifier("ExtHostNotebookRenderers"),
      ExtHostNotebookDocumentSaveParticipant: createProxyIdentifier("ExtHostNotebookDocumentSaveParticipant"),
      ExtHostInteractive: createProxyIdentifier("ExtHostInteractive"),
      ExtHostInlineChat: createProxyIdentifier("ExtHostInlineChatShape"),
      ExtHostChat: createProxyIdentifier("ExtHostChat"),
      ExtHostChatSlashCommands: createProxyIdentifier("ExtHostChatSlashCommands"),
      ExtHostChatVariables: createProxyIdentifier("ExtHostChatVariables"),
      ExtHostChatProvider: createProxyIdentifier("ExtHostChatProvider"),
      ExtHostAiRelatedInformation: createProxyIdentifier("ExtHostAiRelatedInformation"),
      ExtHostAiEmbeddingVector: createProxyIdentifier("ExtHostAiEmbeddingVector"),
      ExtHostTheming: createProxyIdentifier("ExtHostTheming"),
      ExtHostTunnelService: createProxyIdentifier("ExtHostTunnelService"),
      ExtHostManagedSockets: createProxyIdentifier("ExtHostManagedSockets"),
      ExtHostAuthentication: createProxyIdentifier("ExtHostAuthentication"),
      ExtHostTimeline: createProxyIdentifier("ExtHostTimeline"),
      ExtHostTesting: createProxyIdentifier("ExtHostTesting"),
      ExtHostTelemetry: createProxyIdentifier("ExtHostTelemetry"),
      ExtHostLocalization: createProxyIdentifier("ExtHostLocalization"),
      ExtHostIssueReporter: createProxyIdentifier("ExtHostIssueReporter")
    };
  }
});

// node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js
function es5ClassCompat(target) {
  const interceptFunctions = {
    apply: function() {
      const args = arguments.length === 1 ? [] : arguments[1];
      return Reflect.construct(target, args, arguments[0].constructor);
    },
    call: function() {
      if (arguments.length === 0) {
        return Reflect.construct(target, []);
      } else {
        const [thisArg, ...restArgs] = arguments;
        return Reflect.construct(target, restArgs, thisArg.constructor);
      }
    }
  };
  return Object.assign(target, interceptFunctions);
}
function asStatusBarItemIdentifier(extension, id) {
  return `${ExtensionIdentifier.toKey(extension)}.${id}`;
}
function computeTaskExecutionId(values) {
  let id = "";
  for (let i = 0; i < values.length; i++) {
    id += values[i].replace(/,/g, ",,") + ",";
  }
  return id;
}
function setBreakpointId(bp, id) {
  breakpointIds.set(bp, id);
}
function isStrArrayOrUndefined(arg) {
  return typeof arg === "undefined" || isStringArray(arg);
}
var Disposable_1, Position_1, Range_1, Selection_1, TextEdit_1, NotebookEdit_1, SnippetString_1, Location_1, SymbolInformation_1, DocumentSymbol_1, CodeActionKind_1, MarkdownString_1, TaskGroup_1, Task_1, TreeItem_1, FileSystemError_1, TestMessage_1, FileCoverage_1, TerminalOutputAnchor, _callOnDispose, _a, Disposable, Position, Range, Selection, validateConnectionToken, ResolvedAuthority, ManagedResolvedAuthority, RemoteAuthorityResolverError, EndOfLine, EnvironmentVariableMutatorType, TextEdit, NotebookEdit, SnippetTextEdit, WorkspaceEdit, SnippetString, DiagnosticTag, DiagnosticSeverity, Location, DiagnosticRelatedInformation, Diagnostic, Hover, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolTag, SymbolInformation, DocumentSymbol, CodeActionTriggerKind, CodeAction, _a2, CodeActionKind, NotebookCodeActionKind, SelectionRange, CallHierarchyItem, CallHierarchyIncomingCall, CallHierarchyOutgoingCall, LanguageStatusSeverity, CodeLens, _delegate, _a3, MarkdownString2, ParameterInformation, SignatureInformation, SignatureHelp, SignatureHelpTriggerKind, InlayHintKind, InlayHintLabelPart, InlayHint, CompletionTriggerKind, CompletionItemKind, CompletionItemTag, CompletionItem, CompletionList, InlineSuggestion, InlineSuggestionList, ViewColumn, StatusBarAlignment, TextEditorLineNumbersStyle, TextDocumentSaveReason, TextEditorRevealType2, TextEditorSelectionChangeKind, TextDocumentChangeReason, DecorationRangeBehavior, DocumentLink, Color, ColorInformation, ColorPresentation, SourceControlInputBoxValidationType, TerminalExitReason, TerminalLink, TerminalQuickFixOpener, TerminalQuickFixCommand, TerminalLocation, TerminalProfile, TaskRevealKind, TaskPanelKind, _a4, TaskGroup, ProcessExecution, ShellExecution, ShellQuoting, TaskScope, CustomExecution, _a5, Task, ProgressLocation, ViewBadge, TreeItem, TreeItemCollapsibleState, TreeItemCheckboxState, DataTransferItem, InternalDataTransferItem, _file, InternalFileDataTransferItem, DataTransferFile, _items, _normalizeMime, normalizeMime_fn, _a6, DataTransfer, DocumentDropEdit, DocumentPasteEdit, ThemeIcon, ThemeColor, ConfigurationTarget, RelativePattern, breakpointIds, Breakpoint, SourceBreakpoint, FunctionBreakpoint, DataBreakpoint, DebugAdapterExecutable, DebugAdapterServer, DebugAdapterNamedPipeServer, DebugAdapterInlineImplementation, StackFrameFocus, ThreadFocus, EvaluatableExpression, InlineCompletionTriggerKind, InlineValueText, InlineValueVariableLookup, InlineValueEvaluatableExpression, InlineValueContext, FileChangeType, FileSystemError, FoldingRange, FoldingRangeKind, CommentThreadCollapsibleState, CommentMode, CommentState, CommentThreadState, SemanticTokensLegend, SemanticTokensBuilder, SemanticTokens, SemanticTokensEdit, SemanticTokensEdits, DebugConsoleMode, _a7, QuickInputButtons, QuickPickItemKind, InputBoxValidationSeverity, ExtensionKind, FileDecoration, ColorTheme, ColorThemeKind, NotebookRange, NotebookCellData, NotebookData, _encoder, _NotebookCellOutputItem, NotebookCellOutputItem, NotebookCellOutput, NotebookCellKind, NotebookCellExecutionState, NotebookCellStatusBarAlignment, NotebookEditorRevealType2, NotebookCellStatusBarItem, NotebookControllerAffinity, NotebookControllerAffinity2, NotebookRendererScript, NotebookKernelSourceAction, TimelineItem, ExtensionMode, ExtensionRuntime, StandardTokenType, LinkedEditingRanges, PortAttributes, TestResultState, TestRunProfileKind, TestRunRequest, TestMessage, TestTag, CoveredCount, FileCoverage, StatementCoverage, BranchCoverage, FunctionCoverage, ExternalUriOpenerPriority, WorkspaceTrustState, PortAutoForwardAction, TypeHierarchyItem, TextTabInput, TextDiffTabInput, TextMergeTabInput, CustomEditorTabInput, WebviewEditorTabInput, NotebookEditorTabInput, NotebookDiffEditorTabInput, TerminalEditorTabInput, InteractiveWindowInput, InteractiveSessionVoteDirection, InteractiveSessionCopyKind, InteractiveEditorResponseFeedbackKind, ChatMessageRole, ChatVariableLevel, ChatMessage, RelatedInformationType;
var init_extHostTypes = __esm({
  "node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js"() {
    init_tslib_es6();
    init_arrays();
    init_errors();
    init_htmlContent();
    init_map();
    init_mime();
    init_strings();
    init_types();
    init_uri();
    init_uuid();
    init_extensions();
    init_files();
    init_remoteAuthorityResolver();
    init_notebookCommon();
    (function(TerminalOutputAnchor2) {
      TerminalOutputAnchor2[TerminalOutputAnchor2["Top"] = 0] = "Top";
      TerminalOutputAnchor2[TerminalOutputAnchor2["Bottom"] = 1] = "Bottom";
    })(TerminalOutputAnchor || (TerminalOutputAnchor = {}));
    Disposable = Disposable_1 = (_a = class {
      constructor(callOnDispose) {
        __privateAdd(this, _callOnDispose, void 0);
        __privateSet(this, _callOnDispose, callOnDispose);
      }
      static from(...inDisposables) {
        let disposables = inDisposables;
        return new Disposable_1(function() {
          if (disposables) {
            for (const disposable of disposables) {
              if (disposable && typeof disposable.dispose === "function") {
                disposable.dispose();
              }
            }
            disposables = void 0;
          }
        });
      }
      dispose() {
        if (typeof __privateGet(this, _callOnDispose) === "function") {
          __privateGet(this, _callOnDispose).call(this);
          __privateSet(this, _callOnDispose, void 0);
        }
      }
    }, _callOnDispose = new WeakMap(), _a);
    Disposable = Disposable_1 = __decorate([
      es5ClassCompat
    ], Disposable);
    Position = Position_1 = class Position2 {
      static Min(...positions) {
        if (positions.length === 0) {
          throw new TypeError();
        }
        let result = positions[0];
        for (let i = 1; i < positions.length; i++) {
          const p = positions[i];
          if (p.isBefore(result)) {
            result = p;
          }
        }
        return result;
      }
      static Max(...positions) {
        if (positions.length === 0) {
          throw new TypeError();
        }
        let result = positions[0];
        for (let i = 1; i < positions.length; i++) {
          const p = positions[i];
          if (p.isAfter(result)) {
            result = p;
          }
        }
        return result;
      }
      static isPosition(other) {
        if (!other) {
          return false;
        }
        if (other instanceof Position_1) {
          return true;
        }
        const { line, character } = other;
        if (typeof line === "number" && typeof character === "number") {
          return true;
        }
        return false;
      }
      static of(obj) {
        if (obj instanceof Position_1) {
          return obj;
        } else if (this.isPosition(obj)) {
          return new Position_1(obj.line, obj.character);
        }
        throw new Error("Invalid argument, is NOT a position-like object");
      }
      get line() {
        return this._line;
      }
      get character() {
        return this._character;
      }
      constructor(line, character) {
        if (line < 0) {
          throw illegalArgument("line must be non-negative");
        }
        if (character < 0) {
          throw illegalArgument("character must be non-negative");
        }
        this._line = line;
        this._character = character;
      }
      isBefore(other) {
        if (this._line < other._line) {
          return true;
        }
        if (other._line < this._line) {
          return false;
        }
        return this._character < other._character;
      }
      isBeforeOrEqual(other) {
        if (this._line < other._line) {
          return true;
        }
        if (other._line < this._line) {
          return false;
        }
        return this._character <= other._character;
      }
      isAfter(other) {
        return !this.isBeforeOrEqual(other);
      }
      isAfterOrEqual(other) {
        return !this.isBefore(other);
      }
      isEqual(other) {
        return this._line === other._line && this._character === other._character;
      }
      compareTo(other) {
        if (this._line < other._line) {
          return -1;
        } else if (this._line > other.line) {
          return 1;
        } else {
          if (this._character < other._character) {
            return -1;
          } else if (this._character > other._character) {
            return 1;
          } else {
            return 0;
          }
        }
      }
      translate(lineDeltaOrChange, characterDelta = 0) {
        if (lineDeltaOrChange === null || characterDelta === null) {
          throw illegalArgument();
        }
        let lineDelta;
        if (typeof lineDeltaOrChange === "undefined") {
          lineDelta = 0;
        } else if (typeof lineDeltaOrChange === "number") {
          lineDelta = lineDeltaOrChange;
        } else {
          lineDelta = typeof lineDeltaOrChange.lineDelta === "number" ? lineDeltaOrChange.lineDelta : 0;
          characterDelta = typeof lineDeltaOrChange.characterDelta === "number" ? lineDeltaOrChange.characterDelta : 0;
        }
        if (lineDelta === 0 && characterDelta === 0) {
          return this;
        }
        return new Position_1(this.line + lineDelta, this.character + characterDelta);
      }
      with(lineOrChange, character = this.character) {
        if (lineOrChange === null || character === null) {
          throw illegalArgument();
        }
        let line;
        if (typeof lineOrChange === "undefined") {
          line = this.line;
        } else if (typeof lineOrChange === "number") {
          line = lineOrChange;
        } else {
          line = typeof lineOrChange.line === "number" ? lineOrChange.line : this.line;
          character = typeof lineOrChange.character === "number" ? lineOrChange.character : this.character;
        }
        if (line === this.line && character === this.character) {
          return this;
        }
        return new Position_1(line, character);
      }
      toJSON() {
        return { line: this.line, character: this.character };
      }
    };
    Position = Position_1 = __decorate([
      es5ClassCompat
    ], Position);
    Range = Range_1 = class Range2 {
      static isRange(thing) {
        if (thing instanceof Range_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return Position.isPosition(thing.start) && Position.isPosition(thing.end);
      }
      static of(obj) {
        if (obj instanceof Range_1) {
          return obj;
        }
        if (this.isRange(obj)) {
          return new Range_1(obj.start, obj.end);
        }
        throw new Error("Invalid argument, is NOT a range-like object");
      }
      get start() {
        return this._start;
      }
      get end() {
        return this._end;
      }
      constructor(startLineOrStart, startColumnOrEnd, endLine, endColumn) {
        let start;
        let end;
        if (typeof startLineOrStart === "number" && typeof startColumnOrEnd === "number" && typeof endLine === "number" && typeof endColumn === "number") {
          start = new Position(startLineOrStart, startColumnOrEnd);
          end = new Position(endLine, endColumn);
        } else if (Position.isPosition(startLineOrStart) && Position.isPosition(startColumnOrEnd)) {
          start = Position.of(startLineOrStart);
          end = Position.of(startColumnOrEnd);
        }
        if (!start || !end) {
          throw new Error("Invalid arguments");
        }
        if (start.isBefore(end)) {
          this._start = start;
          this._end = end;
        } else {
          this._start = end;
          this._end = start;
        }
      }
      contains(positionOrRange) {
        if (Range_1.isRange(positionOrRange)) {
          return this.contains(positionOrRange.start) && this.contains(positionOrRange.end);
        } else if (Position.isPosition(positionOrRange)) {
          if (Position.of(positionOrRange).isBefore(this._start)) {
            return false;
          }
          if (this._end.isBefore(positionOrRange)) {
            return false;
          }
          return true;
        }
        return false;
      }
      isEqual(other) {
        return this._start.isEqual(other._start) && this._end.isEqual(other._end);
      }
      intersection(other) {
        const start = Position.Max(other.start, this._start);
        const end = Position.Min(other.end, this._end);
        if (start.isAfter(end)) {
          return void 0;
        }
        return new Range_1(start, end);
      }
      union(other) {
        if (this.contains(other)) {
          return this;
        } else if (other.contains(this)) {
          return other;
        }
        const start = Position.Min(other.start, this._start);
        const end = Position.Max(other.end, this.end);
        return new Range_1(start, end);
      }
      get isEmpty() {
        return this._start.isEqual(this._end);
      }
      get isSingleLine() {
        return this._start.line === this._end.line;
      }
      with(startOrChange, end = this.end) {
        if (startOrChange === null || end === null) {
          throw illegalArgument();
        }
        let start;
        if (!startOrChange) {
          start = this.start;
        } else if (Position.isPosition(startOrChange)) {
          start = startOrChange;
        } else {
          start = startOrChange.start || this.start;
          end = startOrChange.end || this.end;
        }
        if (start.isEqual(this._start) && end.isEqual(this.end)) {
          return this;
        }
        return new Range_1(start, end);
      }
      toJSON() {
        return [this.start, this.end];
      }
    };
    Range = Range_1 = __decorate([
      es5ClassCompat
    ], Range);
    Selection = Selection_1 = class Selection2 extends Range {
      static isSelection(thing) {
        if (thing instanceof Selection_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return Range.isRange(thing) && Position.isPosition(thing.anchor) && Position.isPosition(thing.active) && typeof thing.isReversed === "boolean";
      }
      get anchor() {
        return this._anchor;
      }
      get active() {
        return this._active;
      }
      constructor(anchorLineOrAnchor, anchorColumnOrActive, activeLine, activeColumn) {
        let anchor;
        let active;
        if (typeof anchorLineOrAnchor === "number" && typeof anchorColumnOrActive === "number" && typeof activeLine === "number" && typeof activeColumn === "number") {
          anchor = new Position(anchorLineOrAnchor, anchorColumnOrActive);
          active = new Position(activeLine, activeColumn);
        } else if (Position.isPosition(anchorLineOrAnchor) && Position.isPosition(anchorColumnOrActive)) {
          anchor = Position.of(anchorLineOrAnchor);
          active = Position.of(anchorColumnOrActive);
        }
        if (!anchor || !active) {
          throw new Error("Invalid arguments");
        }
        super(anchor, active);
        this._anchor = anchor;
        this._active = active;
      }
      get isReversed() {
        return this._anchor === this._end;
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end,
          active: this.active,
          anchor: this.anchor
        };
      }
    };
    Selection = Selection_1 = __decorate([
      es5ClassCompat
    ], Selection);
    validateConnectionToken = (connectionToken) => {
      if (typeof connectionToken !== "string" || connectionToken.length === 0 || !/^[0-9A-Za-z_\-]+$/.test(connectionToken)) {
        throw illegalArgument("connectionToken");
      }
    };
    ResolvedAuthority = class {
      static isResolvedAuthority(resolvedAuthority) {
        return resolvedAuthority && typeof resolvedAuthority === "object" && typeof resolvedAuthority.host === "string" && typeof resolvedAuthority.port === "number" && (resolvedAuthority.connectionToken === void 0 || typeof resolvedAuthority.connectionToken === "string");
      }
      constructor(host, port, connectionToken) {
        if (typeof host !== "string" || host.length === 0) {
          throw illegalArgument("host");
        }
        if (typeof port !== "number" || port === 0 || Math.round(port) !== port) {
          throw illegalArgument("port");
        }
        if (typeof connectionToken !== "undefined") {
          validateConnectionToken(connectionToken);
        }
        this.host = host;
        this.port = Math.round(port);
        this.connectionToken = connectionToken;
      }
    };
    ManagedResolvedAuthority = class {
      static isManagedResolvedAuthority(resolvedAuthority) {
        return resolvedAuthority && typeof resolvedAuthority === "object" && typeof resolvedAuthority.makeConnection === "function" && (resolvedAuthority.connectionToken === void 0 || typeof resolvedAuthority.connectionToken === "string");
      }
      constructor(makeConnection, connectionToken) {
        this.makeConnection = makeConnection;
        this.connectionToken = connectionToken;
        if (typeof connectionToken !== "undefined") {
          validateConnectionToken(connectionToken);
        }
      }
    };
    RemoteAuthorityResolverError = class _RemoteAuthorityResolverError extends Error {
      static NotAvailable(message, handled) {
        return new _RemoteAuthorityResolverError(message, RemoteAuthorityResolverErrorCode.NotAvailable, handled);
      }
      static TemporarilyNotAvailable(message) {
        return new _RemoteAuthorityResolverError(message, RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable);
      }
      constructor(message, code = RemoteAuthorityResolverErrorCode.Unknown, detail) {
        super(message);
        this._message = message;
        this._code = code;
        this._detail = detail;
        Object.setPrototypeOf(this, _RemoteAuthorityResolverError.prototype);
      }
    };
    (function(EndOfLine2) {
      EndOfLine2[EndOfLine2["LF"] = 1] = "LF";
      EndOfLine2[EndOfLine2["CRLF"] = 2] = "CRLF";
    })(EndOfLine || (EndOfLine = {}));
    (function(EnvironmentVariableMutatorType2) {
      EnvironmentVariableMutatorType2[EnvironmentVariableMutatorType2["Replace"] = 1] = "Replace";
      EnvironmentVariableMutatorType2[EnvironmentVariableMutatorType2["Append"] = 2] = "Append";
      EnvironmentVariableMutatorType2[EnvironmentVariableMutatorType2["Prepend"] = 3] = "Prepend";
    })(EnvironmentVariableMutatorType || (EnvironmentVariableMutatorType = {}));
    TextEdit = TextEdit_1 = class TextEdit2 {
      static isTextEdit(thing) {
        if (thing instanceof TextEdit_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return Range.isRange(thing) && typeof thing.newText === "string";
      }
      static replace(range, newText) {
        return new TextEdit_1(range, newText);
      }
      static insert(position, newText) {
        return TextEdit_1.replace(new Range(position, position), newText);
      }
      static delete(range) {
        return TextEdit_1.replace(range, "");
      }
      static setEndOfLine(eol) {
        const ret = new TextEdit_1(new Range(new Position(0, 0), new Position(0, 0)), "");
        ret.newEol = eol;
        return ret;
      }
      get range() {
        return this._range;
      }
      set range(value) {
        if (value && !Range.isRange(value)) {
          throw illegalArgument("range");
        }
        this._range = value;
      }
      get newText() {
        return this._newText || "";
      }
      set newText(value) {
        if (value && typeof value !== "string") {
          throw illegalArgument("newText");
        }
        this._newText = value;
      }
      get newEol() {
        return this._newEol;
      }
      set newEol(value) {
        if (value && typeof value !== "number") {
          throw illegalArgument("newEol");
        }
        this._newEol = value;
      }
      constructor(range, newText) {
        this._range = range;
        this._newText = newText;
      }
      toJSON() {
        return {
          range: this.range,
          newText: this.newText,
          newEol: this._newEol
        };
      }
    };
    TextEdit = TextEdit_1 = __decorate([
      es5ClassCompat
    ], TextEdit);
    NotebookEdit = NotebookEdit_1 = class NotebookEdit2 {
      static isNotebookCellEdit(thing) {
        if (thing instanceof NotebookEdit_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return NotebookRange.isNotebookRange(thing) && Array.isArray(thing.newCells);
      }
      static replaceCells(range, newCells) {
        return new NotebookEdit_1(range, newCells);
      }
      static insertCells(index, newCells) {
        return new NotebookEdit_1(new NotebookRange(index, index), newCells);
      }
      static deleteCells(range) {
        return new NotebookEdit_1(range, []);
      }
      static updateCellMetadata(index, newMetadata) {
        const edit = new NotebookEdit_1(new NotebookRange(index, index), []);
        edit.newCellMetadata = newMetadata;
        return edit;
      }
      static updateNotebookMetadata(newMetadata) {
        const edit = new NotebookEdit_1(new NotebookRange(0, 0), []);
        edit.newNotebookMetadata = newMetadata;
        return edit;
      }
      constructor(range, newCells) {
        this.range = range;
        this.newCells = newCells;
      }
    };
    NotebookEdit = NotebookEdit_1 = __decorate([
      es5ClassCompat
    ], NotebookEdit);
    SnippetTextEdit = class _SnippetTextEdit {
      static isSnippetTextEdit(thing) {
        if (thing instanceof _SnippetTextEdit) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return Range.isRange(thing.range) && SnippetString.isSnippetString(thing.snippet);
      }
      static replace(range, snippet) {
        return new _SnippetTextEdit(range, snippet);
      }
      static insert(position, snippet) {
        return _SnippetTextEdit.replace(new Range(position, position), snippet);
      }
      constructor(range, snippet) {
        this.range = range;
        this.snippet = snippet;
      }
    };
    WorkspaceEdit = class WorkspaceEdit2 {
      constructor() {
        this._edits = [];
      }
      _allEntries() {
        return this._edits;
      }
      renameFile(from, to, options, metadata) {
        this._edits.push({ _type: 1, from, to, options, metadata });
      }
      createFile(uri, options, metadata) {
        this._edits.push({ _type: 1, from: void 0, to: uri, options, metadata });
      }
      deleteFile(uri, options, metadata) {
        this._edits.push({ _type: 1, from: uri, to: void 0, options, metadata });
      }
      replaceNotebookMetadata(uri, value, metadata) {
        this._edits.push({ _type: 3, metadata, uri, edit: { editType: 5, metadata: value }, notebookMetadata: value });
      }
      replaceNotebookCells(uri, startOrRange, cellData, metadata) {
        const start = startOrRange.start;
        const end = startOrRange.end;
        if (start !== end || cellData.length > 0) {
          this._edits.push({ _type: 5, uri, index: start, count: end - start, cells: cellData, metadata });
        }
      }
      replaceNotebookCellMetadata(uri, index, cellMetadata, metadata) {
        this._edits.push({ _type: 3, metadata, uri, edit: { editType: 3, index, metadata: cellMetadata } });
      }
      replace(uri, range, newText, metadata) {
        this._edits.push({ _type: 2, uri, edit: new TextEdit(range, newText), metadata });
      }
      insert(resource, position, newText, metadata) {
        this.replace(resource, new Range(position, position), newText, metadata);
      }
      delete(resource, range, metadata) {
        this.replace(resource, range, "", metadata);
      }
      has(uri) {
        return this._edits.some((edit) => edit._type === 2 && edit.uri.toString() === uri.toString());
      }
      set(uri, edits) {
        if (!edits) {
          for (let i = 0; i < this._edits.length; i++) {
            const element = this._edits[i];
            switch (element._type) {
              case 2:
              case 6:
              case 3:
              case 5:
                if (element.uri.toString() === uri.toString()) {
                  this._edits[i] = void 0;
                }
                break;
            }
          }
          coalesceInPlace(this._edits);
        } else {
          for (const editOrTuple of edits) {
            if (!editOrTuple) {
              continue;
            }
            let edit;
            let metadata;
            if (Array.isArray(editOrTuple)) {
              edit = editOrTuple[0];
              metadata = editOrTuple[1];
            } else {
              edit = editOrTuple;
            }
            if (NotebookEdit.isNotebookCellEdit(edit)) {
              if (edit.newCellMetadata) {
                this.replaceNotebookCellMetadata(uri, edit.range.start, edit.newCellMetadata, metadata);
              } else if (edit.newNotebookMetadata) {
                this.replaceNotebookMetadata(uri, edit.newNotebookMetadata, metadata);
              } else {
                this.replaceNotebookCells(uri, edit.range, edit.newCells, metadata);
              }
            } else if (SnippetTextEdit.isSnippetTextEdit(edit)) {
              this._edits.push({ _type: 6, uri, range: edit.range, edit: edit.snippet, metadata });
            } else {
              this._edits.push({ _type: 2, uri, edit, metadata });
            }
          }
        }
      }
      get(uri) {
        const res = [];
        for (const candidate of this._edits) {
          if (candidate._type === 2 && candidate.uri.toString() === uri.toString()) {
            res.push(candidate.edit);
          }
        }
        return res;
      }
      entries() {
        const textEdits = new ResourceMap();
        for (const candidate of this._edits) {
          if (candidate._type === 2) {
            let textEdit = textEdits.get(candidate.uri);
            if (!textEdit) {
              textEdit = [candidate.uri, []];
              textEdits.set(candidate.uri, textEdit);
            }
            textEdit[1].push(candidate.edit);
          }
        }
        return [...textEdits.values()];
      }
      get size() {
        return this.entries().length;
      }
      toJSON() {
        return this.entries();
      }
    };
    WorkspaceEdit = __decorate([
      es5ClassCompat
    ], WorkspaceEdit);
    SnippetString = SnippetString_1 = class SnippetString2 {
      static isSnippetString(thing) {
        if (thing instanceof SnippetString_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return typeof thing.value === "string";
      }
      static _escape(value) {
        return value.replace(/\$|}|\\/g, "\\$&");
      }
      constructor(value) {
        this._tabstop = 1;
        this.value = value || "";
      }
      appendText(string) {
        this.value += SnippetString_1._escape(string);
        return this;
      }
      appendTabstop(number = this._tabstop++) {
        this.value += "$";
        this.value += number;
        return this;
      }
      appendPlaceholder(value, number = this._tabstop++) {
        if (typeof value === "function") {
          const nested = new SnippetString_1();
          nested._tabstop = this._tabstop;
          value(nested);
          this._tabstop = nested._tabstop;
          value = nested.value;
        } else {
          value = SnippetString_1._escape(value);
        }
        this.value += "${";
        this.value += number;
        this.value += ":";
        this.value += value;
        this.value += "}";
        return this;
      }
      appendChoice(values, number = this._tabstop++) {
        const value = values.map((s) => s.replace(/\$|}|\\|,/g, "\\$&")).join(",");
        this.value += "${";
        this.value += number;
        this.value += "|";
        this.value += value;
        this.value += "|}";
        return this;
      }
      appendVariable(name, defaultValue) {
        if (typeof defaultValue === "function") {
          const nested = new SnippetString_1();
          nested._tabstop = this._tabstop;
          defaultValue(nested);
          this._tabstop = nested._tabstop;
          defaultValue = nested.value;
        } else if (typeof defaultValue === "string") {
          defaultValue = defaultValue.replace(/\$|}/g, "\\$&");
        }
        this.value += "${";
        this.value += name;
        if (defaultValue) {
          this.value += ":";
          this.value += defaultValue;
        }
        this.value += "}";
        return this;
      }
    };
    SnippetString = SnippetString_1 = __decorate([
      es5ClassCompat
    ], SnippetString);
    (function(DiagnosticTag2) {
      DiagnosticTag2[DiagnosticTag2["Unnecessary"] = 1] = "Unnecessary";
      DiagnosticTag2[DiagnosticTag2["Deprecated"] = 2] = "Deprecated";
    })(DiagnosticTag || (DiagnosticTag = {}));
    (function(DiagnosticSeverity2) {
      DiagnosticSeverity2[DiagnosticSeverity2["Hint"] = 3] = "Hint";
      DiagnosticSeverity2[DiagnosticSeverity2["Information"] = 2] = "Information";
      DiagnosticSeverity2[DiagnosticSeverity2["Warning"] = 1] = "Warning";
      DiagnosticSeverity2[DiagnosticSeverity2["Error"] = 0] = "Error";
    })(DiagnosticSeverity || (DiagnosticSeverity = {}));
    Location = Location_1 = class Location2 {
      static isLocation(thing) {
        if (thing instanceof Location_1) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return Range.isRange(thing.range) && URI.isUri(thing.uri);
      }
      constructor(uri, rangeOrPosition) {
        this.uri = uri;
        if (!rangeOrPosition)
          ;
        else if (Range.isRange(rangeOrPosition)) {
          this.range = Range.of(rangeOrPosition);
        } else if (Position.isPosition(rangeOrPosition)) {
          this.range = new Range(rangeOrPosition, rangeOrPosition);
        } else {
          throw new Error("Illegal argument");
        }
      }
      toJSON() {
        return {
          uri: this.uri,
          range: this.range
        };
      }
    };
    Location = Location_1 = __decorate([
      es5ClassCompat
    ], Location);
    DiagnosticRelatedInformation = class DiagnosticRelatedInformation2 {
      static is(thing) {
        if (!thing) {
          return false;
        }
        return typeof thing.message === "string" && thing.location && Range.isRange(thing.location.range) && URI.isUri(thing.location.uri);
      }
      constructor(location, message) {
        this.location = location;
        this.message = message;
      }
      static isEqual(a, b) {
        if (a === b) {
          return true;
        }
        if (!a || !b) {
          return false;
        }
        return a.message === b.message && a.location.range.isEqual(b.location.range) && a.location.uri.toString() === b.location.uri.toString();
      }
    };
    DiagnosticRelatedInformation = __decorate([
      es5ClassCompat
    ], DiagnosticRelatedInformation);
    Diagnostic = class Diagnostic2 {
      constructor(range, message, severity = DiagnosticSeverity.Error) {
        if (!Range.isRange(range)) {
          throw new TypeError("range must be set");
        }
        if (!message) {
          throw new TypeError("message must be set");
        }
        this.range = range;
        this.message = message;
        this.severity = severity;
      }
      toJSON() {
        return {
          severity: DiagnosticSeverity[this.severity],
          message: this.message,
          range: this.range,
          source: this.source,
          code: this.code
        };
      }
      static isEqual(a, b) {
        if (a === b) {
          return true;
        }
        if (!a || !b) {
          return false;
        }
        return a.message === b.message && a.severity === b.severity && a.code === b.code && a.severity === b.severity && a.source === b.source && a.range.isEqual(b.range) && equals(a.tags, b.tags) && equals(a.relatedInformation, b.relatedInformation, DiagnosticRelatedInformation.isEqual);
      }
    };
    Diagnostic = __decorate([
      es5ClassCompat
    ], Diagnostic);
    Hover = class Hover2 {
      constructor(contents, range) {
        if (!contents) {
          throw new Error("Illegal argument, contents must be defined");
        }
        if (Array.isArray(contents)) {
          this.contents = contents;
        } else {
          this.contents = [contents];
        }
        this.range = range;
      }
    };
    Hover = __decorate([
      es5ClassCompat
    ], Hover);
    (function(DocumentHighlightKind2) {
      DocumentHighlightKind2[DocumentHighlightKind2["Text"] = 0] = "Text";
      DocumentHighlightKind2[DocumentHighlightKind2["Read"] = 1] = "Read";
      DocumentHighlightKind2[DocumentHighlightKind2["Write"] = 2] = "Write";
    })(DocumentHighlightKind || (DocumentHighlightKind = {}));
    DocumentHighlight = class DocumentHighlight2 {
      constructor(range, kind = DocumentHighlightKind.Text) {
        this.range = range;
        this.kind = kind;
      }
      toJSON() {
        return {
          range: this.range,
          kind: DocumentHighlightKind[this.kind]
        };
      }
    };
    DocumentHighlight = __decorate([
      es5ClassCompat
    ], DocumentHighlight);
    (function(SymbolKind2) {
      SymbolKind2[SymbolKind2["File"] = 0] = "File";
      SymbolKind2[SymbolKind2["Module"] = 1] = "Module";
      SymbolKind2[SymbolKind2["Namespace"] = 2] = "Namespace";
      SymbolKind2[SymbolKind2["Package"] = 3] = "Package";
      SymbolKind2[SymbolKind2["Class"] = 4] = "Class";
      SymbolKind2[SymbolKind2["Method"] = 5] = "Method";
      SymbolKind2[SymbolKind2["Property"] = 6] = "Property";
      SymbolKind2[SymbolKind2["Field"] = 7] = "Field";
      SymbolKind2[SymbolKind2["Constructor"] = 8] = "Constructor";
      SymbolKind2[SymbolKind2["Enum"] = 9] = "Enum";
      SymbolKind2[SymbolKind2["Interface"] = 10] = "Interface";
      SymbolKind2[SymbolKind2["Function"] = 11] = "Function";
      SymbolKind2[SymbolKind2["Variable"] = 12] = "Variable";
      SymbolKind2[SymbolKind2["Constant"] = 13] = "Constant";
      SymbolKind2[SymbolKind2["String"] = 14] = "String";
      SymbolKind2[SymbolKind2["Number"] = 15] = "Number";
      SymbolKind2[SymbolKind2["Boolean"] = 16] = "Boolean";
      SymbolKind2[SymbolKind2["Array"] = 17] = "Array";
      SymbolKind2[SymbolKind2["Object"] = 18] = "Object";
      SymbolKind2[SymbolKind2["Key"] = 19] = "Key";
      SymbolKind2[SymbolKind2["Null"] = 20] = "Null";
      SymbolKind2[SymbolKind2["EnumMember"] = 21] = "EnumMember";
      SymbolKind2[SymbolKind2["Struct"] = 22] = "Struct";
      SymbolKind2[SymbolKind2["Event"] = 23] = "Event";
      SymbolKind2[SymbolKind2["Operator"] = 24] = "Operator";
      SymbolKind2[SymbolKind2["TypeParameter"] = 25] = "TypeParameter";
    })(SymbolKind || (SymbolKind = {}));
    (function(SymbolTag2) {
      SymbolTag2[SymbolTag2["Deprecated"] = 1] = "Deprecated";
    })(SymbolTag || (SymbolTag = {}));
    SymbolInformation = SymbolInformation_1 = class SymbolInformation2 {
      static validate(candidate) {
        if (!candidate.name) {
          throw new Error("name must not be falsy");
        }
      }
      constructor(name, kind, rangeOrContainer, locationOrUri, containerName) {
        this.name = name;
        this.kind = kind;
        this.containerName = containerName;
        if (typeof rangeOrContainer === "string") {
          this.containerName = rangeOrContainer;
        }
        if (locationOrUri instanceof Location) {
          this.location = locationOrUri;
        } else if (rangeOrContainer instanceof Range) {
          this.location = new Location(locationOrUri, rangeOrContainer);
        }
        SymbolInformation_1.validate(this);
      }
      toJSON() {
        return {
          name: this.name,
          kind: SymbolKind[this.kind],
          location: this.location,
          containerName: this.containerName
        };
      }
    };
    SymbolInformation = SymbolInformation_1 = __decorate([
      es5ClassCompat
    ], SymbolInformation);
    DocumentSymbol = DocumentSymbol_1 = class DocumentSymbol2 {
      static validate(candidate) {
        var _a8;
        if (!candidate.name) {
          throw new Error("name must not be falsy");
        }
        if (!candidate.range.contains(candidate.selectionRange)) {
          throw new Error("selectionRange must be contained in fullRange");
        }
        (_a8 = candidate.children) == null ? void 0 : _a8.forEach(DocumentSymbol_1.validate);
      }
      constructor(name, detail, kind, range, selectionRange) {
        this.name = name;
        this.detail = detail;
        this.kind = kind;
        this.range = range;
        this.selectionRange = selectionRange;
        this.children = [];
        DocumentSymbol_1.validate(this);
      }
    };
    DocumentSymbol = DocumentSymbol_1 = __decorate([
      es5ClassCompat
    ], DocumentSymbol);
    (function(CodeActionTriggerKind2) {
      CodeActionTriggerKind2[CodeActionTriggerKind2["Invoke"] = 1] = "Invoke";
      CodeActionTriggerKind2[CodeActionTriggerKind2["Automatic"] = 2] = "Automatic";
    })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
    CodeAction = class CodeAction2 {
      constructor(title, kind) {
        this.title = title;
        this.kind = kind;
      }
    };
    CodeAction = __decorate([
      es5ClassCompat
    ], CodeAction);
    CodeActionKind = (_a2 = class {
      constructor(value) {
        this.value = value;
      }
      append(parts) {
        return new CodeActionKind_1(this.value ? this.value + CodeActionKind_1.sep + parts : parts);
      }
      intersects(other) {
        return this.contains(other) || other.contains(this);
      }
      contains(other) {
        return this.value === other.value || other.value.startsWith(this.value + CodeActionKind_1.sep);
      }
    }, CodeActionKind_1 = _a2, _a2.sep = ".", _a2);
    CodeActionKind = CodeActionKind_1 = __decorate([
      es5ClassCompat
    ], CodeActionKind);
    NotebookCodeActionKind = class extends CodeActionKind {
      constructor(value) {
        super(value);
        this.value = value;
      }
    };
    CodeActionKind.Empty = new CodeActionKind("");
    CodeActionKind.QuickFix = CodeActionKind.Empty.append("quickfix");
    CodeActionKind.Refactor = CodeActionKind.Empty.append("refactor");
    CodeActionKind.RefactorExtract = CodeActionKind.Refactor.append("extract");
    CodeActionKind.RefactorInline = CodeActionKind.Refactor.append("inline");
    CodeActionKind.RefactorMove = CodeActionKind.Refactor.append("move");
    CodeActionKind.RefactorRewrite = CodeActionKind.Refactor.append("rewrite");
    CodeActionKind.Source = CodeActionKind.Empty.append("source");
    CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append("organizeImports");
    CodeActionKind.SourceFixAll = CodeActionKind.Source.append("fixAll");
    CodeActionKind.Notebook = CodeActionKind.Empty.append("notebook");
    SelectionRange = class SelectionRange2 {
      constructor(range, parent) {
        this.range = range;
        this.parent = parent;
        if (parent && !parent.range.contains(this.range)) {
          throw new Error("Invalid argument: parent must contain this range");
        }
      }
    };
    SelectionRange = __decorate([
      es5ClassCompat
    ], SelectionRange);
    CallHierarchyItem = class {
      constructor(kind, name, detail, uri, range, selectionRange) {
        this.kind = kind;
        this.name = name;
        this.detail = detail;
        this.uri = uri;
        this.range = range;
        this.selectionRange = selectionRange;
      }
    };
    CallHierarchyIncomingCall = class {
      constructor(item, fromRanges) {
        this.fromRanges = fromRanges;
        this.from = item;
      }
    };
    CallHierarchyOutgoingCall = class {
      constructor(item, fromRanges) {
        this.fromRanges = fromRanges;
        this.to = item;
      }
    };
    (function(LanguageStatusSeverity2) {
      LanguageStatusSeverity2[LanguageStatusSeverity2["Information"] = 0] = "Information";
      LanguageStatusSeverity2[LanguageStatusSeverity2["Warning"] = 1] = "Warning";
      LanguageStatusSeverity2[LanguageStatusSeverity2["Error"] = 2] = "Error";
    })(LanguageStatusSeverity || (LanguageStatusSeverity = {}));
    CodeLens = class CodeLens2 {
      constructor(range, command) {
        this.range = range;
        this.command = command;
      }
      get isResolved() {
        return !!this.command;
      }
    };
    CodeLens = __decorate([
      es5ClassCompat
    ], CodeLens);
    MarkdownString2 = MarkdownString_1 = (_a3 = class {
      constructor(value, supportThemeIcons = false) {
        __privateAdd(this, _delegate, void 0);
        __privateSet(this, _delegate, new MarkdownString(value, { supportThemeIcons }));
      }
      static isMarkdownString(thing) {
        if (thing instanceof MarkdownString_1) {
          return true;
        }
        return thing && thing.appendCodeblock && thing.appendMarkdown && thing.appendText && thing.value !== void 0;
      }
      get value() {
        return __privateGet(this, _delegate).value;
      }
      set value(value) {
        __privateGet(this, _delegate).value = value;
      }
      get isTrusted() {
        return __privateGet(this, _delegate).isTrusted;
      }
      set isTrusted(value) {
        __privateGet(this, _delegate).isTrusted = value;
      }
      get supportThemeIcons() {
        return __privateGet(this, _delegate).supportThemeIcons;
      }
      set supportThemeIcons(value) {
        __privateGet(this, _delegate).supportThemeIcons = value;
      }
      get supportHtml() {
        return __privateGet(this, _delegate).supportHtml;
      }
      set supportHtml(value) {
        __privateGet(this, _delegate).supportHtml = value;
      }
      get baseUri() {
        return __privateGet(this, _delegate).baseUri;
      }
      set baseUri(value) {
        __privateGet(this, _delegate).baseUri = value;
      }
      appendText(value) {
        __privateGet(this, _delegate).appendText(value);
        return this;
      }
      appendMarkdown(value) {
        __privateGet(this, _delegate).appendMarkdown(value);
        return this;
      }
      appendCodeblock(value, language) {
        __privateGet(this, _delegate).appendCodeblock(language ?? "", value);
        return this;
      }
    }, _delegate = new WeakMap(), _a3);
    MarkdownString2 = MarkdownString_1 = __decorate([
      es5ClassCompat
    ], MarkdownString2);
    ParameterInformation = class ParameterInformation2 {
      constructor(label, documentation) {
        this.label = label;
        this.documentation = documentation;
      }
    };
    ParameterInformation = __decorate([
      es5ClassCompat
    ], ParameterInformation);
    SignatureInformation = class SignatureInformation2 {
      constructor(label, documentation) {
        this.label = label;
        this.documentation = documentation;
        this.parameters = [];
      }
    };
    SignatureInformation = __decorate([
      es5ClassCompat
    ], SignatureInformation);
    SignatureHelp = class SignatureHelp2 {
      constructor() {
        this.activeSignature = 0;
        this.activeParameter = 0;
        this.signatures = [];
      }
    };
    SignatureHelp = __decorate([
      es5ClassCompat
    ], SignatureHelp);
    (function(SignatureHelpTriggerKind2) {
      SignatureHelpTriggerKind2[SignatureHelpTriggerKind2["Invoke"] = 1] = "Invoke";
      SignatureHelpTriggerKind2[SignatureHelpTriggerKind2["TriggerCharacter"] = 2] = "TriggerCharacter";
      SignatureHelpTriggerKind2[SignatureHelpTriggerKind2["ContentChange"] = 3] = "ContentChange";
    })(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));
    (function(InlayHintKind2) {
      InlayHintKind2[InlayHintKind2["Type"] = 1] = "Type";
      InlayHintKind2[InlayHintKind2["Parameter"] = 2] = "Parameter";
    })(InlayHintKind || (InlayHintKind = {}));
    InlayHintLabelPart = class InlayHintLabelPart2 {
      constructor(value) {
        this.value = value;
      }
    };
    InlayHintLabelPart = __decorate([
      es5ClassCompat
    ], InlayHintLabelPart);
    InlayHint = class InlayHint2 {
      constructor(position, label, kind) {
        this.position = position;
        this.label = label;
        this.kind = kind;
      }
    };
    InlayHint = __decorate([
      es5ClassCompat
    ], InlayHint);
    (function(CompletionTriggerKind2) {
      CompletionTriggerKind2[CompletionTriggerKind2["Invoke"] = 0] = "Invoke";
      CompletionTriggerKind2[CompletionTriggerKind2["TriggerCharacter"] = 1] = "TriggerCharacter";
      CompletionTriggerKind2[CompletionTriggerKind2["TriggerForIncompleteCompletions"] = 2] = "TriggerForIncompleteCompletions";
    })(CompletionTriggerKind || (CompletionTriggerKind = {}));
    (function(CompletionItemKind2) {
      CompletionItemKind2[CompletionItemKind2["Text"] = 0] = "Text";
      CompletionItemKind2[CompletionItemKind2["Method"] = 1] = "Method";
      CompletionItemKind2[CompletionItemKind2["Function"] = 2] = "Function";
      CompletionItemKind2[CompletionItemKind2["Constructor"] = 3] = "Constructor";
      CompletionItemKind2[CompletionItemKind2["Field"] = 4] = "Field";
      CompletionItemKind2[CompletionItemKind2["Variable"] = 5] = "Variable";
      CompletionItemKind2[CompletionItemKind2["Class"] = 6] = "Class";
      CompletionItemKind2[CompletionItemKind2["Interface"] = 7] = "Interface";
      CompletionItemKind2[CompletionItemKind2["Module"] = 8] = "Module";
      CompletionItemKind2[CompletionItemKind2["Property"] = 9] = "Property";
      CompletionItemKind2[CompletionItemKind2["Unit"] = 10] = "Unit";
      CompletionItemKind2[CompletionItemKind2["Value"] = 11] = "Value";
      CompletionItemKind2[CompletionItemKind2["Enum"] = 12] = "Enum";
      CompletionItemKind2[CompletionItemKind2["Keyword"] = 13] = "Keyword";
      CompletionItemKind2[CompletionItemKind2["Snippet"] = 14] = "Snippet";
      CompletionItemKind2[CompletionItemKind2["Color"] = 15] = "Color";
      CompletionItemKind2[CompletionItemKind2["File"] = 16] = "File";
      CompletionItemKind2[CompletionItemKind2["Reference"] = 17] = "Reference";
      CompletionItemKind2[CompletionItemKind2["Folder"] = 18] = "Folder";
      CompletionItemKind2[CompletionItemKind2["EnumMember"] = 19] = "EnumMember";
      CompletionItemKind2[CompletionItemKind2["Constant"] = 20] = "Constant";
      CompletionItemKind2[CompletionItemKind2["Struct"] = 21] = "Struct";
      CompletionItemKind2[CompletionItemKind2["Event"] = 22] = "Event";
      CompletionItemKind2[CompletionItemKind2["Operator"] = 23] = "Operator";
      CompletionItemKind2[CompletionItemKind2["TypeParameter"] = 24] = "TypeParameter";
      CompletionItemKind2[CompletionItemKind2["User"] = 25] = "User";
      CompletionItemKind2[CompletionItemKind2["Issue"] = 26] = "Issue";
    })(CompletionItemKind || (CompletionItemKind = {}));
    (function(CompletionItemTag2) {
      CompletionItemTag2[CompletionItemTag2["Deprecated"] = 1] = "Deprecated";
    })(CompletionItemTag || (CompletionItemTag = {}));
    CompletionItem = class CompletionItem2 {
      constructor(label, kind) {
        this.label = label;
        this.kind = kind;
      }
      toJSON() {
        return {
          label: this.label,
          kind: this.kind && CompletionItemKind[this.kind],
          detail: this.detail,
          documentation: this.documentation,
          sortText: this.sortText,
          filterText: this.filterText,
          preselect: this.preselect,
          insertText: this.insertText,
          textEdit: this.textEdit
        };
      }
    };
    CompletionItem = __decorate([
      es5ClassCompat
    ], CompletionItem);
    CompletionList = class CompletionList2 {
      constructor(items = [], isIncomplete = false) {
        this.items = items;
        this.isIncomplete = isIncomplete;
      }
    };
    CompletionList = __decorate([
      es5ClassCompat
    ], CompletionList);
    InlineSuggestion = class InlineSuggestion2 {
      constructor(insertText, range, command) {
        this.insertText = insertText;
        this.range = range;
        this.command = command;
      }
    };
    InlineSuggestion = __decorate([
      es5ClassCompat
    ], InlineSuggestion);
    InlineSuggestionList = class InlineSuggestionList2 {
      constructor(items) {
        this.commands = void 0;
        this.suppressSuggestions = void 0;
        this.items = items;
      }
    };
    InlineSuggestionList = __decorate([
      es5ClassCompat
    ], InlineSuggestionList);
    (function(ViewColumn2) {
      ViewColumn2[ViewColumn2["Active"] = -1] = "Active";
      ViewColumn2[ViewColumn2["Beside"] = -2] = "Beside";
      ViewColumn2[ViewColumn2["One"] = 1] = "One";
      ViewColumn2[ViewColumn2["Two"] = 2] = "Two";
      ViewColumn2[ViewColumn2["Three"] = 3] = "Three";
      ViewColumn2[ViewColumn2["Four"] = 4] = "Four";
      ViewColumn2[ViewColumn2["Five"] = 5] = "Five";
      ViewColumn2[ViewColumn2["Six"] = 6] = "Six";
      ViewColumn2[ViewColumn2["Seven"] = 7] = "Seven";
      ViewColumn2[ViewColumn2["Eight"] = 8] = "Eight";
      ViewColumn2[ViewColumn2["Nine"] = 9] = "Nine";
    })(ViewColumn || (ViewColumn = {}));
    (function(StatusBarAlignment2) {
      StatusBarAlignment2[StatusBarAlignment2["Left"] = 1] = "Left";
      StatusBarAlignment2[StatusBarAlignment2["Right"] = 2] = "Right";
    })(StatusBarAlignment || (StatusBarAlignment = {}));
    (function(TextEditorLineNumbersStyle2) {
      TextEditorLineNumbersStyle2[TextEditorLineNumbersStyle2["Off"] = 0] = "Off";
      TextEditorLineNumbersStyle2[TextEditorLineNumbersStyle2["On"] = 1] = "On";
      TextEditorLineNumbersStyle2[TextEditorLineNumbersStyle2["Relative"] = 2] = "Relative";
    })(TextEditorLineNumbersStyle || (TextEditorLineNumbersStyle = {}));
    (function(TextDocumentSaveReason2) {
      TextDocumentSaveReason2[TextDocumentSaveReason2["Manual"] = 1] = "Manual";
      TextDocumentSaveReason2[TextDocumentSaveReason2["AfterDelay"] = 2] = "AfterDelay";
      TextDocumentSaveReason2[TextDocumentSaveReason2["FocusOut"] = 3] = "FocusOut";
    })(TextDocumentSaveReason || (TextDocumentSaveReason = {}));
    (function(TextEditorRevealType3) {
      TextEditorRevealType3[TextEditorRevealType3["Default"] = 0] = "Default";
      TextEditorRevealType3[TextEditorRevealType3["InCenter"] = 1] = "InCenter";
      TextEditorRevealType3[TextEditorRevealType3["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
      TextEditorRevealType3[TextEditorRevealType3["AtTop"] = 3] = "AtTop";
    })(TextEditorRevealType2 || (TextEditorRevealType2 = {}));
    (function(TextEditorSelectionChangeKind2) {
      TextEditorSelectionChangeKind2[TextEditorSelectionChangeKind2["Keyboard"] = 1] = "Keyboard";
      TextEditorSelectionChangeKind2[TextEditorSelectionChangeKind2["Mouse"] = 2] = "Mouse";
      TextEditorSelectionChangeKind2[TextEditorSelectionChangeKind2["Command"] = 3] = "Command";
    })(TextEditorSelectionChangeKind || (TextEditorSelectionChangeKind = {}));
    (function(TextDocumentChangeReason2) {
      TextDocumentChangeReason2[TextDocumentChangeReason2["Undo"] = 1] = "Undo";
      TextDocumentChangeReason2[TextDocumentChangeReason2["Redo"] = 2] = "Redo";
    })(TextDocumentChangeReason || (TextDocumentChangeReason = {}));
    (function(DecorationRangeBehavior2) {
      DecorationRangeBehavior2[DecorationRangeBehavior2["OpenOpen"] = 0] = "OpenOpen";
      DecorationRangeBehavior2[DecorationRangeBehavior2["ClosedClosed"] = 1] = "ClosedClosed";
      DecorationRangeBehavior2[DecorationRangeBehavior2["OpenClosed"] = 2] = "OpenClosed";
      DecorationRangeBehavior2[DecorationRangeBehavior2["ClosedOpen"] = 3] = "ClosedOpen";
    })(DecorationRangeBehavior || (DecorationRangeBehavior = {}));
    (function(TextEditorSelectionChangeKind2) {
      function fromValue(s) {
        switch (s) {
          case "keyboard":
            return TextEditorSelectionChangeKind2.Keyboard;
          case "mouse":
            return TextEditorSelectionChangeKind2.Mouse;
          case "api":
            return TextEditorSelectionChangeKind2.Command;
        }
        return void 0;
      }
      TextEditorSelectionChangeKind2.fromValue = fromValue;
    })(TextEditorSelectionChangeKind || (TextEditorSelectionChangeKind = {}));
    DocumentLink = class DocumentLink2 {
      constructor(range, target) {
        if (target && !URI.isUri(target)) {
          throw illegalArgument("target");
        }
        if (!Range.isRange(range) || range.isEmpty) {
          throw illegalArgument("range");
        }
        this.range = range;
        this.target = target;
      }
    };
    DocumentLink = __decorate([
      es5ClassCompat
    ], DocumentLink);
    Color = class Color2 {
      constructor(red, green, blue, alpha) {
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
      }
    };
    Color = __decorate([
      es5ClassCompat
    ], Color);
    ColorInformation = class ColorInformation2 {
      constructor(range, color) {
        if (color && !(color instanceof Color)) {
          throw illegalArgument("color");
        }
        if (!Range.isRange(range) || range.isEmpty) {
          throw illegalArgument("range");
        }
        this.range = range;
        this.color = color;
      }
    };
    ColorInformation = __decorate([
      es5ClassCompat
    ], ColorInformation);
    ColorPresentation = class ColorPresentation2 {
      constructor(label) {
        if (!label || typeof label !== "string") {
          throw illegalArgument("label");
        }
        this.label = label;
      }
    };
    ColorPresentation = __decorate([
      es5ClassCompat
    ], ColorPresentation);
    (function(SourceControlInputBoxValidationType2) {
      SourceControlInputBoxValidationType2[SourceControlInputBoxValidationType2["Error"] = 0] = "Error";
      SourceControlInputBoxValidationType2[SourceControlInputBoxValidationType2["Warning"] = 1] = "Warning";
      SourceControlInputBoxValidationType2[SourceControlInputBoxValidationType2["Information"] = 2] = "Information";
    })(
      SourceControlInputBoxValidationType || (SourceControlInputBoxValidationType = {})
    );
    (function(TerminalExitReason2) {
      TerminalExitReason2[TerminalExitReason2["Unknown"] = 0] = "Unknown";
      TerminalExitReason2[TerminalExitReason2["Shutdown"] = 1] = "Shutdown";
      TerminalExitReason2[TerminalExitReason2["Process"] = 2] = "Process";
      TerminalExitReason2[TerminalExitReason2["User"] = 3] = "User";
      TerminalExitReason2[TerminalExitReason2["Extension"] = 4] = "Extension";
    })(TerminalExitReason || (TerminalExitReason = {}));
    TerminalLink = class {
      constructor(startIndex, length, tooltip) {
        this.startIndex = startIndex;
        this.length = length;
        this.tooltip = tooltip;
        if (typeof startIndex !== "number" || startIndex < 0) {
          throw illegalArgument("startIndex");
        }
        if (typeof length !== "number" || length < 1) {
          throw illegalArgument("length");
        }
        if (tooltip !== void 0 && typeof tooltip !== "string") {
          throw illegalArgument("tooltip");
        }
      }
    };
    TerminalQuickFixOpener = class {
      constructor(uri) {
        this.uri = uri;
      }
    };
    TerminalQuickFixCommand = class {
      constructor(terminalCommand) {
        this.terminalCommand = terminalCommand;
      }
    };
    (function(TerminalLocation2) {
      TerminalLocation2[TerminalLocation2["Panel"] = 1] = "Panel";
      TerminalLocation2[TerminalLocation2["Editor"] = 2] = "Editor";
    })(TerminalLocation || (TerminalLocation = {}));
    TerminalProfile = class {
      constructor(options) {
        this.options = options;
        if (typeof options !== "object") {
          throw illegalArgument("options");
        }
      }
    };
    (function(TaskRevealKind2) {
      TaskRevealKind2[TaskRevealKind2["Always"] = 1] = "Always";
      TaskRevealKind2[TaskRevealKind2["Silent"] = 2] = "Silent";
      TaskRevealKind2[TaskRevealKind2["Never"] = 3] = "Never";
    })(TaskRevealKind || (TaskRevealKind = {}));
    (function(TaskPanelKind2) {
      TaskPanelKind2[TaskPanelKind2["Shared"] = 1] = "Shared";
      TaskPanelKind2[TaskPanelKind2["Dedicated"] = 2] = "Dedicated";
      TaskPanelKind2[TaskPanelKind2["New"] = 3] = "New";
    })(TaskPanelKind || (TaskPanelKind = {}));
    TaskGroup = (_a4 = class {
      static from(value) {
        switch (value) {
          case "clean":
            return TaskGroup_1.Clean;
          case "build":
            return TaskGroup_1.Build;
          case "rebuild":
            return TaskGroup_1.Rebuild;
          case "test":
            return TaskGroup_1.Test;
          default:
            return void 0;
        }
      }
      constructor(id, label) {
        this.label = label;
        if (typeof id !== "string") {
          throw illegalArgument("name");
        }
        if (typeof label !== "string") {
          throw illegalArgument("name");
        }
        this._id = id;
      }
      get id() {
        return this._id;
      }
    }, TaskGroup_1 = _a4, _a4.Clean = new TaskGroup_1("clean", "Clean"), _a4.Build = new TaskGroup_1("build", "Build"), _a4.Rebuild = new TaskGroup_1("rebuild", "Rebuild"), _a4.Test = new TaskGroup_1("test", "Test"), _a4);
    TaskGroup = TaskGroup_1 = __decorate([
      es5ClassCompat
    ], TaskGroup);
    ProcessExecution = class ProcessExecution2 {
      constructor(process, varg1, varg2) {
        if (typeof process !== "string") {
          throw illegalArgument("process");
        }
        this._args = [];
        this._process = process;
        if (varg1 !== void 0) {
          if (Array.isArray(varg1)) {
            this._args = varg1;
            this._options = varg2;
          } else {
            this._options = varg1;
          }
        }
      }
      get process() {
        return this._process;
      }
      set process(value) {
        if (typeof value !== "string") {
          throw illegalArgument("process");
        }
        this._process = value;
      }
      get args() {
        return this._args;
      }
      set args(value) {
        if (!Array.isArray(value)) {
          value = [];
        }
        this._args = value;
      }
      get options() {
        return this._options;
      }
      set options(value) {
        this._options = value;
      }
      computeId() {
        const props = [];
        props.push("process");
        if (this._process !== void 0) {
          props.push(this._process);
        }
        if (this._args && this._args.length > 0) {
          for (const arg of this._args) {
            props.push(arg);
          }
        }
        return computeTaskExecutionId(props);
      }
    };
    ProcessExecution = __decorate([
      es5ClassCompat
    ], ProcessExecution);
    ShellExecution = class ShellExecution2 {
      constructor(arg0, arg1, arg2) {
        this._args = [];
        if (Array.isArray(arg1)) {
          if (!arg0) {
            throw illegalArgument("command can't be undefined or null");
          }
          if (typeof arg0 !== "string" && typeof arg0.value !== "string") {
            throw illegalArgument("command");
          }
          this._command = arg0;
          this._args = arg1;
          this._options = arg2;
        } else {
          if (typeof arg0 !== "string") {
            throw illegalArgument("commandLine");
          }
          this._commandLine = arg0;
          this._options = arg1;
        }
      }
      get commandLine() {
        return this._commandLine;
      }
      set commandLine(value) {
        if (typeof value !== "string") {
          throw illegalArgument("commandLine");
        }
        this._commandLine = value;
      }
      get command() {
        return this._command ? this._command : "";
      }
      set command(value) {
        if (typeof value !== "string" && typeof value.value !== "string") {
          throw illegalArgument("command");
        }
        this._command = value;
      }
      get args() {
        return this._args;
      }
      set args(value) {
        this._args = value || [];
      }
      get options() {
        return this._options;
      }
      set options(value) {
        this._options = value;
      }
      computeId() {
        const props = [];
        props.push("shell");
        if (this._commandLine !== void 0) {
          props.push(this._commandLine);
        }
        if (this._command !== void 0) {
          props.push(typeof this._command === "string" ? this._command : this._command.value);
        }
        if (this._args && this._args.length > 0) {
          for (const arg of this._args) {
            props.push(typeof arg === "string" ? arg : arg.value);
          }
        }
        return computeTaskExecutionId(props);
      }
    };
    ShellExecution = __decorate([
      es5ClassCompat
    ], ShellExecution);
    (function(ShellQuoting2) {
      ShellQuoting2[ShellQuoting2["Escape"] = 1] = "Escape";
      ShellQuoting2[ShellQuoting2["Strong"] = 2] = "Strong";
      ShellQuoting2[ShellQuoting2["Weak"] = 3] = "Weak";
    })(ShellQuoting || (ShellQuoting = {}));
    (function(TaskScope2) {
      TaskScope2[TaskScope2["Global"] = 1] = "Global";
      TaskScope2[TaskScope2["Workspace"] = 2] = "Workspace";
    })(TaskScope || (TaskScope = {}));
    CustomExecution = class {
      constructor(callback) {
        this._callback = callback;
      }
      computeId() {
        return "customExecution" + generateUuid();
      }
      set callback(value) {
        this._callback = value;
      }
      get callback() {
        return this._callback;
      }
    };
    Task = (_a5 = class {
      constructor(definition, arg2, arg3, arg4, arg5, arg6) {
        this.__deprecated = false;
        this._definition = this.definition = definition;
        let problemMatchers;
        if (typeof arg2 === "string") {
          this._name = this.name = arg2;
          this._source = this.source = arg3;
          this.execution = arg4;
          problemMatchers = arg5;
          this.__deprecated = true;
        } else if (arg2 === TaskScope.Global || arg2 === TaskScope.Workspace) {
          this.target = arg2;
          this._name = this.name = arg3;
          this._source = this.source = arg4;
          this.execution = arg5;
          problemMatchers = arg6;
        } else {
          this.target = arg2;
          this._name = this.name = arg3;
          this._source = this.source = arg4;
          this.execution = arg5;
          problemMatchers = arg6;
        }
        if (typeof problemMatchers === "string") {
          this._problemMatchers = [problemMatchers];
          this._hasDefinedMatchers = true;
        } else if (Array.isArray(problemMatchers)) {
          this._problemMatchers = problemMatchers;
          this._hasDefinedMatchers = true;
        } else {
          this._problemMatchers = [];
          this._hasDefinedMatchers = false;
        }
        this._isBackground = false;
        this._presentationOptions = /* @__PURE__ */ Object.create(null);
        this._runOptions = /* @__PURE__ */ Object.create(null);
      }
      get _id() {
        return this.__id;
      }
      set _id(value) {
        this.__id = value;
      }
      get _deprecated() {
        return this.__deprecated;
      }
      clear() {
        if (this.__id === void 0) {
          return;
        }
        this.__id = void 0;
        this._scope = void 0;
        this.computeDefinitionBasedOnExecution();
      }
      computeDefinitionBasedOnExecution() {
        if (this._execution instanceof ProcessExecution) {
          this._definition = {
            type: Task_1.ProcessType,
            id: this._execution.computeId()
          };
        } else if (this._execution instanceof ShellExecution) {
          this._definition = {
            type: Task_1.ShellType,
            id: this._execution.computeId()
          };
        } else if (this._execution instanceof CustomExecution) {
          this._definition = {
            type: Task_1.ExtensionCallbackType,
            id: this._execution.computeId()
          };
        } else {
          this._definition = {
            type: Task_1.EmptyType,
            id: generateUuid()
          };
        }
      }
      get definition() {
        return this._definition;
      }
      set definition(value) {
        if (value === void 0 || value === null) {
          throw illegalArgument("Kind can't be undefined or null");
        }
        this.clear();
        this._definition = value;
      }
      get scope() {
        return this._scope;
      }
      set target(value) {
        this.clear();
        this._scope = value;
      }
      get name() {
        return this._name;
      }
      set name(value) {
        if (typeof value !== "string") {
          throw illegalArgument("name");
        }
        this.clear();
        this._name = value;
      }
      get execution() {
        return this._execution;
      }
      set execution(value) {
        if (value === null) {
          value = void 0;
        }
        this.clear();
        this._execution = value;
        const type = this._definition.type;
        if (Task_1.EmptyType === type || Task_1.ProcessType === type || Task_1.ShellType === type || Task_1.ExtensionCallbackType === type) {
          this.computeDefinitionBasedOnExecution();
        }
      }
      get problemMatchers() {
        return this._problemMatchers;
      }
      set problemMatchers(value) {
        if (!Array.isArray(value)) {
          this.clear();
          this._problemMatchers = [];
          this._hasDefinedMatchers = false;
          return;
        } else {
          this.clear();
          this._problemMatchers = value;
          this._hasDefinedMatchers = true;
        }
      }
      get hasDefinedMatchers() {
        return this._hasDefinedMatchers;
      }
      get isBackground() {
        return this._isBackground;
      }
      set isBackground(value) {
        if (value !== true && value !== false) {
          value = false;
        }
        this.clear();
        this._isBackground = value;
      }
      get source() {
        return this._source;
      }
      set source(value) {
        if (typeof value !== "string" || value.length === 0) {
          throw illegalArgument("source must be a string of length > 0");
        }
        this.clear();
        this._source = value;
      }
      get group() {
        return this._group;
      }
      set group(value) {
        if (value === null) {
          value = void 0;
        }
        this.clear();
        this._group = value;
      }
      get detail() {
        return this._detail;
      }
      set detail(value) {
        if (value === null) {
          value = void 0;
        }
        this._detail = value;
      }
      get presentationOptions() {
        return this._presentationOptions;
      }
      set presentationOptions(value) {
        if (value === null || value === void 0) {
          value = /* @__PURE__ */ Object.create(null);
        }
        this.clear();
        this._presentationOptions = value;
      }
      get runOptions() {
        return this._runOptions;
      }
      set runOptions(value) {
        if (value === null || value === void 0) {
          value = /* @__PURE__ */ Object.create(null);
        }
        this.clear();
        this._runOptions = value;
      }
    }, Task_1 = _a5, _a5.ExtensionCallbackType = "customExecution", _a5.ProcessType = "process", _a5.ShellType = "shell", _a5.EmptyType = "$empty", _a5);
    Task = Task_1 = __decorate([
      es5ClassCompat
    ], Task);
    (function(ProgressLocation2) {
      ProgressLocation2[ProgressLocation2["SourceControl"] = 1] = "SourceControl";
      ProgressLocation2[ProgressLocation2["Window"] = 10] = "Window";
      ProgressLocation2[ProgressLocation2["Notification"] = 15] = "Notification";
    })(ProgressLocation || (ProgressLocation = {}));
    (function(ViewBadge2) {
      function isViewBadge(thing) {
        const viewBadgeThing = thing;
        if (!isNumber(viewBadgeThing.value)) {
          console.log("INVALID view badge, invalid value", viewBadgeThing.value);
          return false;
        }
        if (viewBadgeThing.tooltip && !isString(viewBadgeThing.tooltip)) {
          console.log("INVALID view badge, invalid tooltip", viewBadgeThing.tooltip);
          return false;
        }
        return true;
      }
      ViewBadge2.isViewBadge = isViewBadge;
    })(ViewBadge || (ViewBadge = {}));
    TreeItem = TreeItem_1 = class TreeItem2 {
      static isTreeItem(thing, extension) {
        var _a8, _b;
        const treeItemThing = thing;
        if (treeItemThing.checkboxState !== void 0) {
          const checkbox = isNumber(treeItemThing.checkboxState) ? treeItemThing.checkboxState : isObject(treeItemThing.checkboxState) && isNumber(treeItemThing.checkboxState.state) ? treeItemThing.checkboxState.state : void 0;
          const tooltip = !isNumber(treeItemThing.checkboxState) && isObject(treeItemThing.checkboxState) ? treeItemThing.checkboxState.tooltip : void 0;
          if (checkbox === void 0 || checkbox !== TreeItemCheckboxState.Checked && checkbox !== TreeItemCheckboxState.Unchecked || tooltip !== void 0 && !isString(tooltip)) {
            console.log("INVALID tree item, invalid checkboxState", treeItemThing.checkboxState);
            return false;
          }
        }
        if (thing instanceof TreeItem_1) {
          return true;
        }
        if (treeItemThing.label !== void 0 && !isString(treeItemThing.label) && !((_a8 = treeItemThing.label) == null ? void 0 : _a8.label)) {
          console.log("INVALID tree item, invalid label", treeItemThing.label);
          return false;
        }
        if (treeItemThing.id !== void 0 && !isString(treeItemThing.id)) {
          console.log("INVALID tree item, invalid id", treeItemThing.id);
          return false;
        }
        if (treeItemThing.iconPath !== void 0 && !isString(treeItemThing.iconPath) && !URI.isUri(treeItemThing.iconPath) && (!treeItemThing.iconPath || !isString(treeItemThing.iconPath.id))) {
          const asLightAndDarkThing = treeItemThing.iconPath;
          if (!asLightAndDarkThing || !isString(asLightAndDarkThing.light) && !URI.isUri(asLightAndDarkThing.light) && !isString(asLightAndDarkThing.dark) && !URI.isUri(asLightAndDarkThing.dark)) {
            console.log("INVALID tree item, invalid iconPath", treeItemThing.iconPath);
            return false;
          }
        }
        if (treeItemThing.description !== void 0 && !isString(treeItemThing.description) && typeof treeItemThing.description !== "boolean") {
          console.log("INVALID tree item, invalid description", treeItemThing.description);
          return false;
        }
        if (treeItemThing.resourceUri !== void 0 && !URI.isUri(treeItemThing.resourceUri)) {
          console.log("INVALID tree item, invalid resourceUri", treeItemThing.resourceUri);
          return false;
        }
        if (treeItemThing.tooltip !== void 0 && !isString(treeItemThing.tooltip) && !(treeItemThing.tooltip instanceof MarkdownString2)) {
          console.log("INVALID tree item, invalid tooltip", treeItemThing.tooltip);
          return false;
        }
        if (treeItemThing.command !== void 0 && !treeItemThing.command.command) {
          console.log("INVALID tree item, invalid command", treeItemThing.command);
          return false;
        }
        if (treeItemThing.collapsibleState !== void 0 && treeItemThing.collapsibleState < TreeItemCollapsibleState.None && treeItemThing.collapsibleState > TreeItemCollapsibleState.Expanded) {
          console.log("INVALID tree item, invalid collapsibleState", treeItemThing.collapsibleState);
          return false;
        }
        if (treeItemThing.contextValue !== void 0 && !isString(treeItemThing.contextValue)) {
          console.log("INVALID tree item, invalid contextValue", treeItemThing.contextValue);
          return false;
        }
        if (treeItemThing.accessibilityInformation !== void 0 && !((_b = treeItemThing.accessibilityInformation) == null ? void 0 : _b.label)) {
          console.log("INVALID tree item, invalid accessibilityInformation", treeItemThing.accessibilityInformation);
          return false;
        }
        return true;
      }
      constructor(arg1, collapsibleState = TreeItemCollapsibleState.None) {
        this.collapsibleState = collapsibleState;
        if (URI.isUri(arg1)) {
          this.resourceUri = arg1;
        } else {
          this.label = arg1;
        }
      }
    };
    TreeItem = TreeItem_1 = __decorate([
      es5ClassCompat
    ], TreeItem);
    (function(TreeItemCollapsibleState2) {
      TreeItemCollapsibleState2[TreeItemCollapsibleState2["None"] = 0] = "None";
      TreeItemCollapsibleState2[TreeItemCollapsibleState2["Collapsed"] = 1] = "Collapsed";
      TreeItemCollapsibleState2[TreeItemCollapsibleState2["Expanded"] = 2] = "Expanded";
    })(TreeItemCollapsibleState || (TreeItemCollapsibleState = {}));
    (function(TreeItemCheckboxState2) {
      TreeItemCheckboxState2[TreeItemCheckboxState2["Unchecked"] = 0] = "Unchecked";
      TreeItemCheckboxState2[TreeItemCheckboxState2["Checked"] = 1] = "Checked";
    })(TreeItemCheckboxState || (TreeItemCheckboxState = {}));
    DataTransferItem = class DataTransferItem2 {
      async asString() {
        return typeof this.value === "string" ? this.value : JSON.stringify(this.value);
      }
      asFile() {
        return void 0;
      }
      constructor(value) {
        this.value = value;
      }
    };
    DataTransferItem = __decorate([
      es5ClassCompat
    ], DataTransferItem);
    InternalDataTransferItem = class extends DataTransferItem {
    };
    InternalFileDataTransferItem = class extends InternalDataTransferItem {
      constructor(file) {
        super("");
        __privateAdd(this, _file, void 0);
        __privateSet(this, _file, file);
      }
      asFile() {
        return __privateGet(this, _file);
      }
    };
    _file = new WeakMap();
    DataTransferFile = class {
      constructor(name, uri, itemId, getData) {
        this.name = name;
        this.uri = uri;
        this._itemId = itemId;
        this._getData = getData;
      }
      data() {
        return this._getData();
      }
    };
    DataTransfer = (_a6 = class {
      constructor(init) {
        __privateAdd(this, _normalizeMime);
        __privateAdd(this, _items, /* @__PURE__ */ new Map());
        for (const [mime, item] of init ?? []) {
          const existing = __privateGet(this, _items).get(__privateMethod(this, _normalizeMime, normalizeMime_fn).call(this, mime));
          if (existing) {
            existing.push(item);
          } else {
            __privateGet(this, _items).set(__privateMethod(this, _normalizeMime, normalizeMime_fn).call(this, mime), [item]);
          }
        }
      }
      get(mimeType) {
        var _a8;
        return (_a8 = __privateGet(this, _items).get(__privateMethod(this, _normalizeMime, normalizeMime_fn).call(this, mimeType))) == null ? void 0 : _a8[0];
      }
      set(mimeType, value) {
        __privateGet(this, _items).set(__privateMethod(this, _normalizeMime, normalizeMime_fn).call(this, mimeType), [value]);
      }
      forEach(callbackfn, thisArg) {
        for (const [mime, items] of __privateGet(this, _items)) {
          for (const item of items) {
            callbackfn.call(thisArg, item, mime, this);
          }
        }
      }
      *[Symbol.iterator]() {
        for (const [mime, items] of __privateGet(this, _items)) {
          for (const item of items) {
            yield [mime, item];
          }
        }
      }
    }, _items = new WeakMap(), _normalizeMime = new WeakSet(), normalizeMime_fn = function(mimeType) {
      return mimeType.toLowerCase();
    }, _a6);
    DataTransfer = __decorate([
      es5ClassCompat
    ], DataTransfer);
    DocumentDropEdit = class DocumentDropEdit2 {
      constructor(insertText) {
        this.insertText = insertText;
      }
    };
    DocumentDropEdit = __decorate([
      es5ClassCompat
    ], DocumentDropEdit);
    DocumentPasteEdit = class DocumentPasteEdit2 {
      constructor(insertText, label) {
        this.label = label;
        this.insertText = insertText;
      }
    };
    DocumentPasteEdit = __decorate([
      es5ClassCompat
    ], DocumentPasteEdit);
    ThemeIcon = class ThemeIcon2 {
      constructor(id, color) {
        this.id = id;
        this.color = color;
      }
      static isThemeIcon(thing) {
        if (typeof thing.id !== "string") {
          console.log("INVALID ThemeIcon, invalid id", thing.id);
          return false;
        }
        return true;
      }
    };
    ThemeIcon = __decorate([
      es5ClassCompat
    ], ThemeIcon);
    ThemeIcon.File = new ThemeIcon("file");
    ThemeIcon.Folder = new ThemeIcon("folder");
    ThemeColor = class ThemeColor2 {
      constructor(id) {
        this.id = id;
      }
    };
    ThemeColor = __decorate([
      es5ClassCompat
    ], ThemeColor);
    (function(ConfigurationTarget2) {
      ConfigurationTarget2[ConfigurationTarget2["Global"] = 1] = "Global";
      ConfigurationTarget2[ConfigurationTarget2["Workspace"] = 2] = "Workspace";
      ConfigurationTarget2[ConfigurationTarget2["WorkspaceFolder"] = 3] = "WorkspaceFolder";
    })(ConfigurationTarget || (ConfigurationTarget = {}));
    RelativePattern = class RelativePattern2 {
      get base() {
        return this._base;
      }
      set base(base) {
        this._base = base;
        this._baseUri = URI.file(base);
      }
      get baseUri() {
        return this._baseUri;
      }
      set baseUri(baseUri) {
        this._baseUri = baseUri;
        this._base = baseUri.fsPath;
      }
      constructor(base, pattern) {
        if (typeof base !== "string") {
          if (!base || !URI.isUri(base) && !URI.isUri(base.uri)) {
            throw illegalArgument("base");
          }
        }
        if (typeof pattern !== "string") {
          throw illegalArgument("pattern");
        }
        if (typeof base === "string") {
          this.baseUri = URI.file(base);
        } else if (URI.isUri(base)) {
          this.baseUri = base;
        } else {
          this.baseUri = base.uri;
        }
        this.pattern = pattern;
      }
      toJSON() {
        return {
          pattern: this.pattern,
          base: this.base,
          baseUri: this.baseUri.toJSON()
        };
      }
    };
    RelativePattern = __decorate([
      es5ClassCompat
    ], RelativePattern);
    breakpointIds = /* @__PURE__ */ new WeakMap();
    Breakpoint = class Breakpoint2 {
      constructor(enabled, condition, hitCondition, logMessage) {
        this.enabled = typeof enabled === "boolean" ? enabled : true;
        if (typeof condition === "string") {
          this.condition = condition;
        }
        if (typeof hitCondition === "string") {
          this.hitCondition = hitCondition;
        }
        if (typeof logMessage === "string") {
          this.logMessage = logMessage;
        }
      }
      get id() {
        if (!this._id) {
          this._id = breakpointIds.get(this) ?? generateUuid();
        }
        return this._id;
      }
    };
    Breakpoint = __decorate([
      es5ClassCompat
    ], Breakpoint);
    SourceBreakpoint = class SourceBreakpoint2 extends Breakpoint {
      constructor(location, enabled, condition, hitCondition, logMessage) {
        super(enabled, condition, hitCondition, logMessage);
        if (location === null) {
          throw illegalArgument("location");
        }
        this.location = location;
      }
    };
    SourceBreakpoint = __decorate([
      es5ClassCompat
    ], SourceBreakpoint);
    FunctionBreakpoint = class FunctionBreakpoint2 extends Breakpoint {
      constructor(functionName, enabled, condition, hitCondition, logMessage) {
        super(enabled, condition, hitCondition, logMessage);
        this.functionName = functionName;
      }
    };
    FunctionBreakpoint = __decorate([
      es5ClassCompat
    ], FunctionBreakpoint);
    DataBreakpoint = class DataBreakpoint2 extends Breakpoint {
      constructor(label, dataId, canPersist, enabled, condition, hitCondition, logMessage) {
        super(enabled, condition, hitCondition, logMessage);
        if (!dataId) {
          throw illegalArgument("dataId");
        }
        this.label = label;
        this.dataId = dataId;
        this.canPersist = canPersist;
      }
    };
    DataBreakpoint = __decorate([
      es5ClassCompat
    ], DataBreakpoint);
    DebugAdapterExecutable = class DebugAdapterExecutable2 {
      constructor(command, args, options) {
        this.command = command;
        this.args = args || [];
        this.options = options;
      }
    };
    DebugAdapterExecutable = __decorate([
      es5ClassCompat
    ], DebugAdapterExecutable);
    DebugAdapterServer = class DebugAdapterServer2 {
      constructor(port, host) {
        this.port = port;
        this.host = host;
      }
    };
    DebugAdapterServer = __decorate([
      es5ClassCompat
    ], DebugAdapterServer);
    DebugAdapterNamedPipeServer = class DebugAdapterNamedPipeServer2 {
      constructor(path) {
        this.path = path;
      }
    };
    DebugAdapterNamedPipeServer = __decorate([
      es5ClassCompat
    ], DebugAdapterNamedPipeServer);
    DebugAdapterInlineImplementation = class DebugAdapterInlineImplementation2 {
      constructor(impl) {
        this.implementation = impl;
      }
    };
    DebugAdapterInlineImplementation = __decorate([
      es5ClassCompat
    ], DebugAdapterInlineImplementation);
    StackFrameFocus = class StackFrameFocus2 {
      constructor(session, threadId, frameId) {
        this.session = session;
        this.threadId = threadId;
        this.frameId = frameId;
      }
    };
    StackFrameFocus = __decorate([
      es5ClassCompat
    ], StackFrameFocus);
    ThreadFocus = class ThreadFocus2 {
      constructor(session, threadId) {
        this.session = session;
        this.threadId = threadId;
      }
    };
    ThreadFocus = __decorate([
      es5ClassCompat
    ], ThreadFocus);
    EvaluatableExpression = class EvaluatableExpression2 {
      constructor(range, expression) {
        this.range = range;
        this.expression = expression;
      }
    };
    EvaluatableExpression = __decorate([
      es5ClassCompat
    ], EvaluatableExpression);
    (function(InlineCompletionTriggerKind2) {
      InlineCompletionTriggerKind2[InlineCompletionTriggerKind2["Invoke"] = 0] = "Invoke";
      InlineCompletionTriggerKind2[InlineCompletionTriggerKind2["Automatic"] = 1] = "Automatic";
    })(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
    InlineValueText = class InlineValueText2 {
      constructor(range, text) {
        this.range = range;
        this.text = text;
      }
    };
    InlineValueText = __decorate([
      es5ClassCompat
    ], InlineValueText);
    InlineValueVariableLookup = class InlineValueVariableLookup2 {
      constructor(range, variableName, caseSensitiveLookup = true) {
        this.range = range;
        this.variableName = variableName;
        this.caseSensitiveLookup = caseSensitiveLookup;
      }
    };
    InlineValueVariableLookup = __decorate([
      es5ClassCompat
    ], InlineValueVariableLookup);
    InlineValueEvaluatableExpression = class InlineValueEvaluatableExpression2 {
      constructor(range, expression) {
        this.range = range;
        this.expression = expression;
      }
    };
    InlineValueEvaluatableExpression = __decorate([
      es5ClassCompat
    ], InlineValueEvaluatableExpression);
    InlineValueContext = class InlineValueContext2 {
      constructor(frameId, range) {
        this.frameId = frameId;
        this.stoppedLocation = range;
      }
    };
    InlineValueContext = __decorate([
      es5ClassCompat
    ], InlineValueContext);
    (function(FileChangeType2) {
      FileChangeType2[FileChangeType2["Changed"] = 1] = "Changed";
      FileChangeType2[FileChangeType2["Created"] = 2] = "Created";
      FileChangeType2[FileChangeType2["Deleted"] = 3] = "Deleted";
    })(FileChangeType || (FileChangeType = {}));
    FileSystemError = FileSystemError_1 = class FileSystemError2 extends Error {
      static FileExists(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.FileExists,
          FileSystemError_1.FileExists
        );
      }
      static FileNotFound(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.FileNotFound,
          FileSystemError_1.FileNotFound
        );
      }
      static FileNotADirectory(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.FileNotADirectory,
          FileSystemError_1.FileNotADirectory
        );
      }
      static FileIsADirectory(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.FileIsADirectory,
          FileSystemError_1.FileIsADirectory
        );
      }
      static NoPermissions(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.NoPermissions,
          FileSystemError_1.NoPermissions
        );
      }
      static Unavailable(messageOrUri) {
        return new FileSystemError_1(
          messageOrUri,
          FileSystemProviderErrorCode.Unavailable,
          FileSystemError_1.Unavailable
        );
      }
      constructor(uriOrMessage, code = FileSystemProviderErrorCode.Unknown, terminator) {
        super(URI.isUri(uriOrMessage) ? uriOrMessage.toString(true) : uriOrMessage);
        this.code = (terminator == null ? void 0 : terminator.name) ?? "Unknown";
        markAsFileSystemProviderError(this, code);
        Object.setPrototypeOf(this, FileSystemError_1.prototype);
        if (typeof Error.captureStackTrace === "function" && typeof terminator === "function") {
          Error.captureStackTrace(this, terminator);
        }
      }
    };
    FileSystemError = FileSystemError_1 = __decorate([
      es5ClassCompat
    ], FileSystemError);
    FoldingRange = class FoldingRange2 {
      constructor(start, end, kind) {
        this.start = start;
        this.end = end;
        this.kind = kind;
      }
    };
    FoldingRange = __decorate([
      es5ClassCompat
    ], FoldingRange);
    (function(FoldingRangeKind2) {
      FoldingRangeKind2[FoldingRangeKind2["Comment"] = 1] = "Comment";
      FoldingRangeKind2[FoldingRangeKind2["Imports"] = 2] = "Imports";
      FoldingRangeKind2[FoldingRangeKind2["Region"] = 3] = "Region";
    })(FoldingRangeKind || (FoldingRangeKind = {}));
    (function(CommentThreadCollapsibleState2) {
      CommentThreadCollapsibleState2[CommentThreadCollapsibleState2["Collapsed"] = 0] = "Collapsed";
      CommentThreadCollapsibleState2[CommentThreadCollapsibleState2["Expanded"] = 1] = "Expanded";
    })(CommentThreadCollapsibleState || (CommentThreadCollapsibleState = {}));
    (function(CommentMode2) {
      CommentMode2[CommentMode2["Editing"] = 0] = "Editing";
      CommentMode2[CommentMode2["Preview"] = 1] = "Preview";
    })(CommentMode || (CommentMode = {}));
    (function(CommentState2) {
      CommentState2[CommentState2["Published"] = 0] = "Published";
      CommentState2[CommentState2["Draft"] = 1] = "Draft";
    })(CommentState || (CommentState = {}));
    (function(CommentThreadState2) {
      CommentThreadState2[CommentThreadState2["Unresolved"] = 0] = "Unresolved";
      CommentThreadState2[CommentThreadState2["Resolved"] = 1] = "Resolved";
    })(CommentThreadState || (CommentThreadState = {}));
    SemanticTokensLegend = class {
      constructor(tokenTypes, tokenModifiers = []) {
        this.tokenTypes = tokenTypes;
        this.tokenModifiers = tokenModifiers;
      }
    };
    SemanticTokensBuilder = class _SemanticTokensBuilder {
      constructor(legend) {
        this._prevLine = 0;
        this._prevChar = 0;
        this._dataIsSortedAndDeltaEncoded = true;
        this._data = [];
        this._dataLen = 0;
        this._tokenTypeStrToInt = /* @__PURE__ */ new Map();
        this._tokenModifierStrToInt = /* @__PURE__ */ new Map();
        this._hasLegend = false;
        if (legend) {
          this._hasLegend = true;
          for (let i = 0, len = legend.tokenTypes.length; i < len; i++) {
            this._tokenTypeStrToInt.set(legend.tokenTypes[i], i);
          }
          for (let i = 0, len = legend.tokenModifiers.length; i < len; i++) {
            this._tokenModifierStrToInt.set(legend.tokenModifiers[i], i);
          }
        }
      }
      push(arg0, arg1, arg2, arg3, arg4) {
        if (typeof arg0 === "number" && typeof arg1 === "number" && typeof arg2 === "number" && typeof arg3 === "number" && (typeof arg4 === "number" || typeof arg4 === "undefined")) {
          if (typeof arg4 === "undefined") {
            arg4 = 0;
          }
          return this._pushEncoded(arg0, arg1, arg2, arg3, arg4);
        }
        if (Range.isRange(arg0) && typeof arg1 === "string" && isStrArrayOrUndefined(arg2)) {
          return this._push(arg0, arg1, arg2);
        }
        throw illegalArgument();
      }
      _push(range, tokenType, tokenModifiers) {
        if (!this._hasLegend) {
          throw new Error("Legend must be provided in constructor");
        }
        if (range.start.line !== range.end.line) {
          throw new Error("`range` cannot span multiple lines");
        }
        if (!this._tokenTypeStrToInt.has(tokenType)) {
          throw new Error("`tokenType` is not in the provided legend");
        }
        const line = range.start.line;
        const char = range.start.character;
        const length = range.end.character - range.start.character;
        const nTokenType = this._tokenTypeStrToInt.get(tokenType);
        let nTokenModifiers = 0;
        if (tokenModifiers) {
          for (const tokenModifier of tokenModifiers) {
            if (!this._tokenModifierStrToInt.has(tokenModifier)) {
              throw new Error("`tokenModifier` is not in the provided legend");
            }
            const nTokenModifier = this._tokenModifierStrToInt.get(tokenModifier);
            nTokenModifiers |= 1 << nTokenModifier >>> 0;
          }
        }
        this._pushEncoded(line, char, length, nTokenType, nTokenModifiers);
      }
      _pushEncoded(line, char, length, tokenType, tokenModifiers) {
        if (this._dataIsSortedAndDeltaEncoded && (line < this._prevLine || line === this._prevLine && char < this._prevChar)) {
          this._dataIsSortedAndDeltaEncoded = false;
          const tokenCount = this._data.length / 5 | 0;
          let prevLine = 0;
          let prevChar = 0;
          for (let i = 0; i < tokenCount; i++) {
            let line2 = this._data[5 * i];
            let char2 = this._data[5 * i + 1];
            if (line2 === 0) {
              line2 = prevLine;
              char2 += prevChar;
            } else {
              line2 += prevLine;
            }
            this._data[5 * i] = line2;
            this._data[5 * i + 1] = char2;
            prevLine = line2;
            prevChar = char2;
          }
        }
        let pushLine = line;
        let pushChar = char;
        if (this._dataIsSortedAndDeltaEncoded && this._dataLen > 0) {
          pushLine -= this._prevLine;
          if (pushLine === 0) {
            pushChar -= this._prevChar;
          }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
      }
      static _sortAndDeltaEncode(data) {
        const pos = [];
        const tokenCount = data.length / 5 | 0;
        for (let i = 0; i < tokenCount; i++) {
          pos[i] = i;
        }
        pos.sort((a, b) => {
          const aLine = data[5 * a];
          const bLine = data[5 * b];
          if (aLine === bLine) {
            const aChar = data[5 * a + 1];
            const bChar = data[5 * b + 1];
            return aChar - bChar;
          }
          return aLine - bLine;
        });
        const result = new Uint32Array(data.length);
        let prevLine = 0;
        let prevChar = 0;
        for (let i = 0; i < tokenCount; i++) {
          const srcOffset = 5 * pos[i];
          const line = data[srcOffset + 0];
          const char = data[srcOffset + 1];
          const length = data[srcOffset + 2];
          const tokenType = data[srcOffset + 3];
          const tokenModifiers = data[srcOffset + 4];
          const pushLine = line - prevLine;
          const pushChar = pushLine === 0 ? char - prevChar : char;
          const dstOffset = 5 * i;
          result[dstOffset + 0] = pushLine;
          result[dstOffset + 1] = pushChar;
          result[dstOffset + 2] = length;
          result[dstOffset + 3] = tokenType;
          result[dstOffset + 4] = tokenModifiers;
          prevLine = line;
          prevChar = char;
        }
        return result;
      }
      build(resultId) {
        if (!this._dataIsSortedAndDeltaEncoded) {
          return new SemanticTokens(_SemanticTokensBuilder._sortAndDeltaEncode(this._data), resultId);
        }
        return new SemanticTokens(new Uint32Array(this._data), resultId);
      }
    };
    SemanticTokens = class {
      constructor(data, resultId) {
        this.resultId = resultId;
        this.data = data;
      }
    };
    SemanticTokensEdit = class {
      constructor(start, deleteCount, data) {
        this.start = start;
        this.deleteCount = deleteCount;
        this.data = data;
      }
    };
    SemanticTokensEdits = class {
      constructor(edits, resultId) {
        this.resultId = resultId;
        this.edits = edits;
      }
    };
    (function(DebugConsoleMode2) {
      DebugConsoleMode2[DebugConsoleMode2["Separate"] = 0] = "Separate";
      DebugConsoleMode2[DebugConsoleMode2["MergeWithParent"] = 1] = "MergeWithParent";
    })(DebugConsoleMode || (DebugConsoleMode = {}));
    QuickInputButtons = (_a7 = class {
      constructor() {
      }
    }, _a7.Back = { iconPath: new ThemeIcon("arrow-left") }, _a7);
    QuickInputButtons = __decorate([
      es5ClassCompat
    ], QuickInputButtons);
    (function(QuickPickItemKind2) {
      QuickPickItemKind2[QuickPickItemKind2["Separator"] = -1] = "Separator";
      QuickPickItemKind2[QuickPickItemKind2["Default"] = 0] = "Default";
    })(QuickPickItemKind || (QuickPickItemKind = {}));
    (function(InputBoxValidationSeverity2) {
      InputBoxValidationSeverity2[InputBoxValidationSeverity2["Info"] = 1] = "Info";
      InputBoxValidationSeverity2[InputBoxValidationSeverity2["Warning"] = 2] = "Warning";
      InputBoxValidationSeverity2[InputBoxValidationSeverity2["Error"] = 3] = "Error";
    })(InputBoxValidationSeverity || (InputBoxValidationSeverity = {}));
    (function(ExtensionKind2) {
      ExtensionKind2[ExtensionKind2["UI"] = 1] = "UI";
      ExtensionKind2[ExtensionKind2["Workspace"] = 2] = "Workspace";
    })(ExtensionKind || (ExtensionKind = {}));
    FileDecoration = class {
      static validate(d) {
        if (typeof d.badge === "string") {
          let len = nextCharLength(d.badge, 0);
          if (len < d.badge.length) {
            len += nextCharLength(d.badge, len);
          }
          if (d.badge.length > len) {
            throw new Error(`The 'badge'-property must be undefined or a short character`);
          }
        } else if (d.badge) {
          if (!ThemeIcon.isThemeIcon(d.badge)) {
            throw new Error(`The 'badge'-property is not a valid ThemeIcon`);
          }
        }
        if (!d.color && !d.badge && !d.tooltip) {
          throw new Error(`The decoration is empty`);
        }
        return true;
      }
      constructor(badge, tooltip, color) {
        this.badge = badge;
        this.tooltip = tooltip;
        this.color = color;
      }
    };
    ColorTheme = class ColorTheme2 {
      constructor(kind) {
        this.kind = kind;
      }
    };
    ColorTheme = __decorate([
      es5ClassCompat
    ], ColorTheme);
    (function(ColorThemeKind2) {
      ColorThemeKind2[ColorThemeKind2["Light"] = 1] = "Light";
      ColorThemeKind2[ColorThemeKind2["Dark"] = 2] = "Dark";
      ColorThemeKind2[ColorThemeKind2["HighContrast"] = 3] = "HighContrast";
      ColorThemeKind2[ColorThemeKind2["HighContrastLight"] = 4] = "HighContrastLight";
    })(ColorThemeKind || (ColorThemeKind = {}));
    NotebookRange = class _NotebookRange {
      static isNotebookRange(thing) {
        if (thing instanceof _NotebookRange) {
          return true;
        }
        if (!thing) {
          return false;
        }
        return typeof thing.start === "number" && typeof thing.end === "number";
      }
      get start() {
        return this._start;
      }
      get end() {
        return this._end;
      }
      get isEmpty() {
        return this._start === this._end;
      }
      constructor(start, end) {
        if (start < 0) {
          throw illegalArgument("start must be positive");
        }
        if (end < 0) {
          throw illegalArgument("end must be positive");
        }
        if (start <= end) {
          this._start = start;
          this._end = end;
        } else {
          this._start = end;
          this._end = start;
        }
      }
      with(change) {
        let start = this._start;
        let end = this._end;
        if (change.start !== void 0) {
          start = change.start;
        }
        if (change.end !== void 0) {
          end = change.end;
        }
        if (start === this._start && end === this._end) {
          return this;
        }
        return new _NotebookRange(start, end);
      }
    };
    NotebookCellData = class _NotebookCellData {
      static validate(data) {
        if (typeof data.kind !== "number") {
          throw new Error("NotebookCellData MUST have 'kind' property");
        }
        if (typeof data.value !== "string") {
          throw new Error("NotebookCellData MUST have 'value' property");
        }
        if (typeof data.languageId !== "string") {
          throw new Error("NotebookCellData MUST have 'languageId' property");
        }
      }
      static isNotebookCellDataArray(value) {
        return Array.isArray(value) && value.every((elem) => _NotebookCellData.isNotebookCellData(elem));
      }
      static isNotebookCellData(value) {
        return true;
      }
      constructor(kind, value, languageId, mime, outputs, metadata, executionSummary) {
        this.kind = kind;
        this.value = value;
        this.languageId = languageId;
        this.mime = mime;
        this.outputs = outputs ?? [];
        this.metadata = metadata;
        this.executionSummary = executionSummary;
        _NotebookCellData.validate(this);
      }
    };
    NotebookData = class {
      constructor(cells) {
        this.cells = cells;
      }
    };
    _NotebookCellOutputItem = class _NotebookCellOutputItem {
      static isNotebookCellOutputItem(obj) {
        if (obj instanceof _NotebookCellOutputItem) {
          return true;
        }
        if (!obj) {
          return false;
        }
        return typeof obj.mime === "string" && obj.data instanceof Uint8Array;
      }
      static error(err) {
        const obj = {
          name: err.name,
          message: err.message,
          stack: err.stack
        };
        return _NotebookCellOutputItem.json(obj, "application/vnd.code.notebook.error");
      }
      static stdout(value) {
        return _NotebookCellOutputItem.text(value, "application/vnd.code.notebook.stdout");
      }
      static stderr(value) {
        return _NotebookCellOutputItem.text(value, "application/vnd.code.notebook.stderr");
      }
      static bytes(value, mime = "application/octet-stream") {
        return new _NotebookCellOutputItem(value, mime);
      }
      static text(value, mime = Mimes.text) {
        const bytes = __privateGet(_NotebookCellOutputItem, _encoder).encode(String(value));
        return new _NotebookCellOutputItem(bytes, mime);
      }
      static json(value, mime = "text/x-json") {
        const rawStr = JSON.stringify(value, void 0, "	");
        return _NotebookCellOutputItem.text(rawStr, mime);
      }
      constructor(data, mime) {
        this.data = data;
        this.mime = mime;
        const mimeNormalized = normalizeMimeType(mime, true);
        if (!mimeNormalized) {
          throw new Error(`INVALID mime type: ${mime}. Must be in the format "type/subtype[;optionalparameter]"`);
        }
        this.mime = mimeNormalized;
      }
    };
    _encoder = new WeakMap();
    __privateAdd(_NotebookCellOutputItem, _encoder, new TextEncoder());
    NotebookCellOutputItem = _NotebookCellOutputItem;
    NotebookCellOutput = class _NotebookCellOutput {
      static isNotebookCellOutput(candidate) {
        if (candidate instanceof _NotebookCellOutput) {
          return true;
        }
        if (!candidate || typeof candidate !== "object") {
          return false;
        }
        return typeof candidate.id === "string" && Array.isArray(candidate.items);
      }
      static ensureUniqueMimeTypes(items, warn = false) {
        const seen = /* @__PURE__ */ new Set();
        const removeIdx = /* @__PURE__ */ new Set();
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          const normalMime = normalizeMimeType(item.mime);
          if (!seen.has(normalMime) || isTextStreamMime(normalMime)) {
            seen.add(normalMime);
            continue;
          }
          removeIdx.add(i);
          if (warn) {
            console.warn(`DUPLICATED mime type '${item.mime}' will be dropped`);
          }
        }
        if (removeIdx.size === 0) {
          return items;
        }
        return items.filter((_item, index) => !removeIdx.has(index));
      }
      constructor(items, idOrMetadata, metadata) {
        this.items = _NotebookCellOutput.ensureUniqueMimeTypes(items, true);
        if (typeof idOrMetadata === "string") {
          this.id = idOrMetadata;
          this.metadata = metadata;
        } else {
          this.id = generateUuid();
          this.metadata = idOrMetadata ?? metadata;
        }
      }
    };
    (function(NotebookCellKind2) {
      NotebookCellKind2[NotebookCellKind2["Markup"] = 1] = "Markup";
      NotebookCellKind2[NotebookCellKind2["Code"] = 2] = "Code";
    })(NotebookCellKind || (NotebookCellKind = {}));
    (function(NotebookCellExecutionState2) {
      NotebookCellExecutionState2[NotebookCellExecutionState2["Idle"] = 1] = "Idle";
      NotebookCellExecutionState2[NotebookCellExecutionState2["Pending"] = 2] = "Pending";
      NotebookCellExecutionState2[NotebookCellExecutionState2["Executing"] = 3] = "Executing";
    })(NotebookCellExecutionState || (NotebookCellExecutionState = {}));
    (function(NotebookCellStatusBarAlignment2) {
      NotebookCellStatusBarAlignment2[NotebookCellStatusBarAlignment2["Left"] = 1] = "Left";
      NotebookCellStatusBarAlignment2[NotebookCellStatusBarAlignment2["Right"] = 2] = "Right";
    })(NotebookCellStatusBarAlignment || (NotebookCellStatusBarAlignment = {}));
    (function(NotebookEditorRevealType3) {
      NotebookEditorRevealType3[NotebookEditorRevealType3["Default"] = 0] = "Default";
      NotebookEditorRevealType3[NotebookEditorRevealType3["InCenter"] = 1] = "InCenter";
      NotebookEditorRevealType3[NotebookEditorRevealType3["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
      NotebookEditorRevealType3[NotebookEditorRevealType3["AtTop"] = 3] = "AtTop";
    })(NotebookEditorRevealType2 || (NotebookEditorRevealType2 = {}));
    NotebookCellStatusBarItem = class {
      constructor(text, alignment) {
        this.text = text;
        this.alignment = alignment;
      }
    };
    (function(NotebookControllerAffinity3) {
      NotebookControllerAffinity3[NotebookControllerAffinity3["Default"] = 1] = "Default";
      NotebookControllerAffinity3[NotebookControllerAffinity3["Preferred"] = 2] = "Preferred";
    })(NotebookControllerAffinity || (NotebookControllerAffinity = {}));
    (function(NotebookControllerAffinity22) {
      NotebookControllerAffinity22[NotebookControllerAffinity22["Default"] = 1] = "Default";
      NotebookControllerAffinity22[NotebookControllerAffinity22["Preferred"] = 2] = "Preferred";
      NotebookControllerAffinity22[NotebookControllerAffinity22["Hidden"] = -1] = "Hidden";
    })(NotebookControllerAffinity2 || (NotebookControllerAffinity2 = {}));
    NotebookRendererScript = class {
      constructor(uri, provides = []) {
        this.uri = uri;
        this.provides = asArray(provides);
      }
    };
    NotebookKernelSourceAction = class {
      constructor(label) {
        this.label = label;
      }
    };
    TimelineItem = class TimelineItem2 {
      constructor(label, timestamp) {
        this.label = label;
        this.timestamp = timestamp;
      }
    };
    TimelineItem = __decorate([
      es5ClassCompat
    ], TimelineItem);
    (function(ExtensionMode2) {
      ExtensionMode2[ExtensionMode2["Production"] = 1] = "Production";
      ExtensionMode2[ExtensionMode2["Development"] = 2] = "Development";
      ExtensionMode2[ExtensionMode2["Test"] = 3] = "Test";
    })(ExtensionMode || (ExtensionMode = {}));
    (function(ExtensionRuntime2) {
      ExtensionRuntime2[ExtensionRuntime2["Node"] = 1] = "Node";
      ExtensionRuntime2[ExtensionRuntime2["Webworker"] = 2] = "Webworker";
    })(ExtensionRuntime || (ExtensionRuntime = {}));
    (function(StandardTokenType2) {
      StandardTokenType2[StandardTokenType2["Other"] = 0] = "Other";
      StandardTokenType2[StandardTokenType2["Comment"] = 1] = "Comment";
      StandardTokenType2[StandardTokenType2["String"] = 2] = "String";
      StandardTokenType2[StandardTokenType2["RegEx"] = 3] = "RegEx";
    })(StandardTokenType || (StandardTokenType = {}));
    LinkedEditingRanges = class {
      constructor(ranges, wordPattern) {
        this.ranges = ranges;
        this.wordPattern = wordPattern;
      }
    };
    PortAttributes = class {
      constructor(autoForwardAction) {
        this._autoForwardAction = autoForwardAction;
      }
      get autoForwardAction() {
        return this._autoForwardAction;
      }
    };
    (function(TestResultState2) {
      TestResultState2[TestResultState2["Queued"] = 1] = "Queued";
      TestResultState2[TestResultState2["Running"] = 2] = "Running";
      TestResultState2[TestResultState2["Passed"] = 3] = "Passed";
      TestResultState2[TestResultState2["Failed"] = 4] = "Failed";
      TestResultState2[TestResultState2["Skipped"] = 5] = "Skipped";
      TestResultState2[TestResultState2["Errored"] = 6] = "Errored";
    })(TestResultState || (TestResultState = {}));
    (function(TestRunProfileKind2) {
      TestRunProfileKind2[TestRunProfileKind2["Run"] = 1] = "Run";
      TestRunProfileKind2[TestRunProfileKind2["Debug"] = 2] = "Debug";
      TestRunProfileKind2[TestRunProfileKind2["Coverage"] = 3] = "Coverage";
    })(TestRunProfileKind || (TestRunProfileKind = {}));
    TestRunRequest = class TestRunRequest2 {
      constructor(include = void 0, exclude = void 0, profile = void 0, continuous = false) {
        this.include = include;
        this.exclude = exclude;
        this.profile = profile;
        this.continuous = continuous;
      }
    };
    TestRunRequest = __decorate([
      es5ClassCompat
    ], TestRunRequest);
    TestMessage = TestMessage_1 = class TestMessage2 {
      static diff(message, expected, actual) {
        const msg = new TestMessage_1(message);
        msg.expectedOutput = expected;
        msg.actualOutput = actual;
        return msg;
      }
      constructor(message) {
        this.message = message;
      }
    };
    TestMessage = TestMessage_1 = __decorate([
      es5ClassCompat
    ], TestMessage);
    TestTag = class TestTag2 {
      constructor(id) {
        this.id = id;
      }
    };
    TestTag = __decorate([
      es5ClassCompat
    ], TestTag);
    CoveredCount = class CoveredCount2 {
      constructor(covered, total) {
        this.covered = covered;
        this.total = total;
      }
    };
    CoveredCount = __decorate([
      es5ClassCompat
    ], CoveredCount);
    FileCoverage = FileCoverage_1 = class FileCoverage2 {
      static fromDetails(uri, details) {
        const statements = new CoveredCount(0, 0);
        const branches = new CoveredCount(0, 0);
        const fn = new CoveredCount(0, 0);
        for (const detail of details) {
          if ("branches" in detail) {
            statements.total += 1;
            statements.covered += detail.executionCount > 0 ? 1 : 0;
            for (const branch of detail.branches) {
              branches.total += 1;
              branches.covered += branch.executionCount > 0 ? 1 : 0;
            }
          } else {
            fn.total += 1;
            fn.covered += detail.executionCount > 0 ? 1 : 0;
          }
        }
        const coverage = new FileCoverage_1(
          uri,
          statements,
          branches.total > 0 ? branches : void 0,
          fn.total > 0 ? fn : void 0
        );
        coverage.detailedCoverage = details;
        return coverage;
      }
      constructor(uri, statementCoverage, branchCoverage, functionCoverage) {
        this.uri = uri;
        this.statementCoverage = statementCoverage;
        this.branchCoverage = branchCoverage;
        this.functionCoverage = functionCoverage;
      }
    };
    FileCoverage = FileCoverage_1 = __decorate([
      es5ClassCompat
    ], FileCoverage);
    StatementCoverage = class StatementCoverage2 {
      constructor(executionCount, location, branches = []) {
        this.executionCount = executionCount;
        this.location = location;
        this.branches = branches;
      }
    };
    StatementCoverage = __decorate([
      es5ClassCompat
    ], StatementCoverage);
    BranchCoverage = class BranchCoverage2 {
      constructor(executionCount, location) {
        this.executionCount = executionCount;
        this.location = location;
      }
    };
    BranchCoverage = __decorate([
      es5ClassCompat
    ], BranchCoverage);
    FunctionCoverage = class FunctionCoverage2 {
      constructor(executionCount, location) {
        this.executionCount = executionCount;
        this.location = location;
      }
    };
    FunctionCoverage = __decorate([
      es5ClassCompat
    ], FunctionCoverage);
    (function(ExternalUriOpenerPriority2) {
      ExternalUriOpenerPriority2[ExternalUriOpenerPriority2["None"] = 0] = "None";
      ExternalUriOpenerPriority2[ExternalUriOpenerPriority2["Option"] = 1] = "Option";
      ExternalUriOpenerPriority2[ExternalUriOpenerPriority2["Default"] = 2] = "Default";
      ExternalUriOpenerPriority2[ExternalUriOpenerPriority2["Preferred"] = 3] = "Preferred";
    })(ExternalUriOpenerPriority || (ExternalUriOpenerPriority = {}));
    (function(WorkspaceTrustState2) {
      WorkspaceTrustState2[WorkspaceTrustState2["Untrusted"] = 0] = "Untrusted";
      WorkspaceTrustState2[WorkspaceTrustState2["Trusted"] = 1] = "Trusted";
      WorkspaceTrustState2[WorkspaceTrustState2["Unspecified"] = 2] = "Unspecified";
    })(WorkspaceTrustState || (WorkspaceTrustState = {}));
    (function(PortAutoForwardAction2) {
      PortAutoForwardAction2[PortAutoForwardAction2["Notify"] = 1] = "Notify";
      PortAutoForwardAction2[PortAutoForwardAction2["OpenBrowser"] = 2] = "OpenBrowser";
      PortAutoForwardAction2[PortAutoForwardAction2["OpenPreview"] = 3] = "OpenPreview";
      PortAutoForwardAction2[PortAutoForwardAction2["Silent"] = 4] = "Silent";
      PortAutoForwardAction2[PortAutoForwardAction2["Ignore"] = 5] = "Ignore";
      PortAutoForwardAction2[PortAutoForwardAction2["OpenBrowserOnce"] = 6] = "OpenBrowserOnce";
    })(PortAutoForwardAction || (PortAutoForwardAction = {}));
    TypeHierarchyItem = class {
      constructor(kind, name, detail, uri, range, selectionRange) {
        this.kind = kind;
        this.name = name;
        this.detail = detail;
        this.uri = uri;
        this.range = range;
        this.selectionRange = selectionRange;
      }
    };
    TextTabInput = class {
      constructor(uri) {
        this.uri = uri;
      }
    };
    TextDiffTabInput = class {
      constructor(original, modified) {
        this.original = original;
        this.modified = modified;
      }
    };
    TextMergeTabInput = class {
      constructor(base, input1, input2, result) {
        this.base = base;
        this.input1 = input1;
        this.input2 = input2;
        this.result = result;
      }
    };
    CustomEditorTabInput = class {
      constructor(uri, viewType) {
        this.uri = uri;
        this.viewType = viewType;
      }
    };
    WebviewEditorTabInput = class {
      constructor(viewType) {
        this.viewType = viewType;
      }
    };
    NotebookEditorTabInput = class {
      constructor(uri, notebookType) {
        this.uri = uri;
        this.notebookType = notebookType;
      }
    };
    NotebookDiffEditorTabInput = class {
      constructor(original, modified, notebookType) {
        this.original = original;
        this.modified = modified;
        this.notebookType = notebookType;
      }
    };
    TerminalEditorTabInput = class {
      constructor() {
      }
    };
    InteractiveWindowInput = class {
      constructor(uri, inputBoxUri) {
        this.uri = uri;
        this.inputBoxUri = inputBoxUri;
      }
    };
    (function(InteractiveSessionVoteDirection2) {
      InteractiveSessionVoteDirection2[InteractiveSessionVoteDirection2["Up"] = 1] = "Up";
      InteractiveSessionVoteDirection2[InteractiveSessionVoteDirection2["Down"] = 2] = "Down";
    })(InteractiveSessionVoteDirection || (InteractiveSessionVoteDirection = {}));
    (function(InteractiveSessionCopyKind2) {
      InteractiveSessionCopyKind2[InteractiveSessionCopyKind2["Action"] = 1] = "Action";
      InteractiveSessionCopyKind2[InteractiveSessionCopyKind2["Toolbar"] = 2] = "Toolbar";
    })(InteractiveSessionCopyKind || (InteractiveSessionCopyKind = {}));
    (function(InteractiveEditorResponseFeedbackKind2) {
      InteractiveEditorResponseFeedbackKind2[InteractiveEditorResponseFeedbackKind2["Unhelpful"] = 0] = "Unhelpful";
      InteractiveEditorResponseFeedbackKind2[InteractiveEditorResponseFeedbackKind2["Helpful"] = 1] = "Helpful";
      InteractiveEditorResponseFeedbackKind2[InteractiveEditorResponseFeedbackKind2["Undone"] = 2] = "Undone";
      InteractiveEditorResponseFeedbackKind2[InteractiveEditorResponseFeedbackKind2["Accepted"] = 3] = "Accepted";
    })(
      InteractiveEditorResponseFeedbackKind || (InteractiveEditorResponseFeedbackKind = {})
    );
    (function(ChatMessageRole2) {
      ChatMessageRole2[ChatMessageRole2["System"] = 0] = "System";
      ChatMessageRole2[ChatMessageRole2["User"] = 1] = "User";
      ChatMessageRole2[ChatMessageRole2["Assistant"] = 2] = "Assistant";
      ChatMessageRole2[ChatMessageRole2["Function"] = 3] = "Function";
    })(ChatMessageRole || (ChatMessageRole = {}));
    (function(ChatVariableLevel2) {
      ChatVariableLevel2[ChatVariableLevel2["Short"] = 1] = "Short";
      ChatVariableLevel2[ChatVariableLevel2["Medium"] = 2] = "Medium";
      ChatVariableLevel2[ChatVariableLevel2["Full"] = 3] = "Full";
    })(ChatVariableLevel || (ChatVariableLevel = {}));
    ChatMessage = class {
      constructor(role, content) {
        this.role = role;
        this.content = content;
      }
    };
    (function(RelatedInformationType2) {
      RelatedInformationType2[RelatedInformationType2["SymbolInformation"] = 1] = "SymbolInformation";
      RelatedInformationType2[RelatedInformationType2["CommandInformation"] = 2] = "CommandInformation";
      RelatedInformationType2[RelatedInformationType2["SearchInformation"] = 3] = "SearchInformation";
      RelatedInformationType2[RelatedInformationType2["SettingInformation"] = 4] = "SettingInformation";
    })(RelatedInformationType || (RelatedInformationType = {}));
  }
});

// node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js
var TextSearchCompleteMessageType;
var init_searchExtTypes = __esm({
  "node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js"() {
    (function(TextSearchCompleteMessageType2) {
      TextSearchCompleteMessageType2[TextSearchCompleteMessageType2["Information"] = 1] = "Information";
      TextSearchCompleteMessageType2[TextSearchCompleteMessageType2["Warning"] = 2] = "Warning";
    })(TextSearchCompleteMessageType || (TextSearchCompleteMessageType = {}));
  }
});

export {
  ProxyIdentifier,
  getStringIdentifierForProxy,
  SerializableObjectWithBuffers,
  init_proxyIdentifier,
  UIKind,
  createMessageOfType,
  isMessageOfType,
  init_extensionHostProtocol,
  TextEditorRevealType,
  NotebookEditorRevealType,
  CandidatePortSource,
  MainContext,
  ExtHostContext,
  init_extHost_protocol,
  TerminalOutputAnchor,
  Disposable,
  Position,
  Range,
  Selection,
  ResolvedAuthority,
  ManagedResolvedAuthority,
  RemoteAuthorityResolverError,
  EndOfLine,
  EnvironmentVariableMutatorType,
  TextEdit,
  NotebookEdit,
  SnippetTextEdit,
  WorkspaceEdit,
  SnippetString,
  DiagnosticTag,
  DiagnosticSeverity,
  Location,
  DiagnosticRelatedInformation,
  Diagnostic,
  Hover,
  DocumentHighlightKind,
  DocumentHighlight,
  SymbolKind,
  SymbolTag,
  SymbolInformation,
  DocumentSymbol,
  CodeActionTriggerKind,
  CodeAction,
  CodeActionKind,
  NotebookCodeActionKind,
  SelectionRange,
  CallHierarchyItem,
  CallHierarchyIncomingCall,
  CallHierarchyOutgoingCall,
  LanguageStatusSeverity,
  CodeLens,
  MarkdownString2 as MarkdownString,
  ParameterInformation,
  SignatureInformation,
  SignatureHelp,
  SignatureHelpTriggerKind,
  InlayHintKind,
  InlayHintLabelPart,
  InlayHint,
  CompletionTriggerKind,
  CompletionItemKind,
  CompletionItemTag,
  CompletionItem,
  CompletionList,
  InlineSuggestion,
  InlineSuggestionList,
  ViewColumn,
  StatusBarAlignment,
  asStatusBarItemIdentifier,
  TextEditorLineNumbersStyle,
  TextDocumentSaveReason,
  TextEditorRevealType2,
  TextEditorSelectionChangeKind,
  TextDocumentChangeReason,
  DecorationRangeBehavior,
  DocumentLink,
  Color,
  ColorInformation,
  ColorPresentation,
  SourceControlInputBoxValidationType,
  TerminalExitReason,
  TerminalLink,
  TerminalQuickFixOpener,
  TerminalQuickFixCommand,
  TerminalLocation,
  TerminalProfile,
  TaskRevealKind,
  TaskPanelKind,
  TaskGroup,
  ProcessExecution,
  ShellExecution,
  ShellQuoting,
  TaskScope,
  CustomExecution,
  Task,
  ProgressLocation,
  ViewBadge,
  TreeItem,
  TreeItemCollapsibleState,
  TreeItemCheckboxState,
  DataTransferItem,
  InternalDataTransferItem,
  InternalFileDataTransferItem,
  DataTransferFile,
  DataTransfer,
  DocumentDropEdit,
  DocumentPasteEdit,
  ThemeIcon,
  ThemeColor,
  ConfigurationTarget,
  RelativePattern,
  setBreakpointId,
  Breakpoint,
  SourceBreakpoint,
  FunctionBreakpoint,
  DataBreakpoint,
  DebugAdapterExecutable,
  DebugAdapterServer,
  DebugAdapterNamedPipeServer,
  DebugAdapterInlineImplementation,
  StackFrameFocus,
  ThreadFocus,
  EvaluatableExpression,
  InlineCompletionTriggerKind,
  InlineValueText,
  InlineValueVariableLookup,
  InlineValueEvaluatableExpression,
  InlineValueContext,
  FileChangeType,
  FileSystemError,
  FoldingRange,
  FoldingRangeKind,
  CommentThreadCollapsibleState,
  CommentMode,
  CommentState,
  CommentThreadState,
  SemanticTokensLegend,
  SemanticTokensBuilder,
  SemanticTokens,
  SemanticTokensEdit,
  SemanticTokensEdits,
  DebugConsoleMode,
  QuickInputButtons,
  QuickPickItemKind,
  InputBoxValidationSeverity,
  ExtensionKind,
  FileDecoration,
  ColorTheme,
  ColorThemeKind,
  NotebookRange,
  NotebookCellData,
  NotebookData,
  NotebookCellOutputItem,
  NotebookCellOutput,
  NotebookCellKind,
  NotebookCellExecutionState,
  NotebookCellStatusBarAlignment,
  NotebookEditorRevealType2,
  NotebookCellStatusBarItem,
  NotebookControllerAffinity,
  NotebookControllerAffinity2,
  NotebookRendererScript,
  NotebookKernelSourceAction,
  TimelineItem,
  ExtensionMode,
  ExtensionRuntime,
  StandardTokenType,
  LinkedEditingRanges,
  PortAttributes,
  TestResultState,
  TestRunProfileKind,
  TestRunRequest,
  TestMessage,
  TestTag,
  CoveredCount,
  FileCoverage,
  StatementCoverage,
  BranchCoverage,
  FunctionCoverage,
  ExternalUriOpenerPriority,
  WorkspaceTrustState,
  PortAutoForwardAction,
  TypeHierarchyItem,
  TextTabInput,
  TextDiffTabInput,
  TextMergeTabInput,
  CustomEditorTabInput,
  WebviewEditorTabInput,
  NotebookEditorTabInput,
  NotebookDiffEditorTabInput,
  TerminalEditorTabInput,
  InteractiveWindowInput,
  InteractiveSessionVoteDirection,
  InteractiveSessionCopyKind,
  InteractiveEditorResponseFeedbackKind,
  ChatMessageRole,
  ChatVariableLevel,
  ChatMessage,
  RelatedInformationType,
  init_extHostTypes,
  TextSearchCompleteMessageType,
  init_searchExtTypes
};
//# sourceMappingURL=chunk-YDWP2D7X.js.map
