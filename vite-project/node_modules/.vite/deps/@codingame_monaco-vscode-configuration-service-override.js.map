{
  "version": 3,
  "sources": ["../../vscode/service-override/configuration.js", "../../vscode/vscode/src/vs/workbench/services/configuration/browser/configurationService.js", "../../vscode/vscode/src/vs/workbench/services/configuration/common/configurationModels.js", "../../vscode/vscode/src/vs/workbench/services/configuration/common/configuration.js", "../../vscode/vscode/src/vs/workbench/services/configuration/common/configurationEditing.js", "../../vscode/vscode/src/vs/workbench/services/configuration/browser/configuration.js", "../../vscode/vscode/src/vs/editor/common/services/textResourceConfigurationService.js", "../../vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js", "../../vscode/vscode/src/vs/workbench/services/configuration/common/configurationCache.js", "../../vscode/vscode/src/vs/workbench/services/label/common/labelService.js", "../../vscode/vscode/src/vs/workbench/services/workspaces/browser/workspacesService.js", "../../vscode/vscode/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js", "../../vscode/vscode/src/vs/workbench/api/common/configurationExtensionPoint.js"],
  "sourcesContent": ["import { __decorate, __param } from '../external/tslib/tslib.es6.js';\nimport '../missing-services.js';\nimport { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';\nimport { WorkspaceService } from '../vscode/src/vs/workbench/services/configuration/browser/configurationService.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';\nimport { TextResourceConfigurationService } from '../vscode/src/vs/editor/common/services/textResourceConfigurationService.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nexport { ConfigurationScope } from '../vscode/src/vs/platform/configuration/common/configurationRegistry.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IPolicyService } from 'monaco-editor/esm/vs/platform/policy/common/policy.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IUserDataProfileService } from '../vscode/src/vs/workbench/services/userDataProfile/common/userDataProfile.js';\nimport { IRemoteAgentService } from '../vscode/src/vs/workbench/services/remote/common/remoteAgentService.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { ConfigurationCache } from '../vscode/src/vs/workbench/services/configuration/common/configurationCache.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IWorkbenchEnvironmentService } from '../vscode/src/vs/workbench/services/environment/common/environmentService.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { LabelService } from '../vscode/src/vs/workbench/services/label/common/labelService.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';\nimport { IWorkspacesService } from '../vscode/src/vs/platform/workspaces/common/workspaces.js';\nimport { BrowserWorkspacesService } from '../vscode/src/vs/workbench/services/workspaces/browser/workspacesService.js';\nimport { IWorkspaceEditingService } from '../vscode/src/vs/workbench/services/workspaces/common/workspaceEditing.js';\nimport { AbstractWorkspaceEditingService } from '../vscode/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport '../vscode/src/vs/workbench/api/common/configurationExtensionPoint.js';\nimport getServiceOverride$1 from './files.js';\nimport { memoizedConstructor, unsupported } from '../tools.js';\nimport { registerServiceInitializePreParticipant } from '../lifecycle.js';\nasync function updateUserConfiguration(configurationJson) {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    await StandaloneServices.get(IFileService).writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(configurationJson));\n}\nasync function getUserConfiguration() {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    return ( (await StandaloneServices.get(IFileService).readFile(userDataProfilesService.defaultProfile.settingsResource)).value.toString());\n}\nfunction onUserConfigurationChange(callback) {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    return StandaloneServices.get(IFileService).onDidFilesChange(e => {\n        if (e.affects(userDataProfilesService.defaultProfile.settingsResource)) {\n            callback();\n        }\n    });\n}\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nlet InjectedConfigurationService = class InjectedConfigurationService extends WorkspaceService {\n    constructor(workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {\n        const configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp], workbenchEnvironmentService, fileService);\n        super({ configurationCache }, workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService);\n    }\n};\nInjectedConfigurationService = __decorate([\n    ( __param(0, IWorkbenchEnvironmentService)),\n    ( __param(1, IUserDataProfileService)),\n    ( __param(2, IUserDataProfilesService)),\n    ( __param(3, IFileService)),\n    ( __param(4, IRemoteAgentService)),\n    ( __param(5, IUriIdentityService)),\n    ( __param(6, ILogService)),\n    ( __param(7, IPolicyService))\n], InjectedConfigurationService);\nclass MonacoWorkspaceEditingService extends AbstractWorkspaceEditingService {\n    constructor() {\n        super(...arguments);\n        this.enterWorkspace = unsupported;\n    }\n}\nlet _defaultWorkspace = URI.file('/workspace');\nregisterServiceInitializePreParticipant(async (accessor) => {\n    const workspaceService = accessor.get(IWorkspaceContextService);\n    workspaceService.acquireInstantiationService(accessor.get(IInstantiationService));\n    if (URI.isUri(_defaultWorkspace)) {\n        const configPath = _defaultWorkspace.with({ path: '/workspace.code-workspace' });\n        try {\n            const fileService = accessor.get(IFileService);\n            await fileService.createFolder(_defaultWorkspace);\n            await fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({\n                folders: [\n                    {\n                        path: _defaultWorkspace.path\n                    }\n                ]\n            })));\n        }\n        catch (err) {\n        }\n        await workspaceService.initialize({\n            id: generateUuid(),\n            configPath\n        });\n    }\n    else {\n        await workspaceService.initialize(_defaultWorkspace);\n    }\n});\nconst MemoizedInjectedConfigurationService = memoizedConstructor(InjectedConfigurationService);\nfunction getServiceOverride(defaultWorkspace) {\n    _defaultWorkspace = defaultWorkspace;\n    return {\n        ...getServiceOverride$1(),\n        [( ILabelService.toString())]: new SyncDescriptor(LabelService, undefined, true),\n        [( IConfigurationService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),\n        [( IWorkspaceContextService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),\n        [( ITextResourceConfigurationService.toString())]: new SyncDescriptor(TextResourceConfigurationService, [], true),\n        [( IWorkspaceEditingService.toString())]: new SyncDescriptor(MonacoWorkspaceEditingService, [], true),\n        [( IWorkspacesService.toString())]: new SyncDescriptor(BrowserWorkspacesService, undefined, true)\n    };\n}\nexport { configurationRegistry, getServiceOverride as default, getUserConfiguration, onUserConfigurationChange, updateUserConfiguration };\n", "import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { ResourceMap } from 'monaco-editor/esm/vs/base/common/map.js';\nimport { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Delayer, Barrier, Queue, Promises, runWhenIdle } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Extensions as Extensions$2 } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { IWorkspaceContextService, isWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceFolder, toWorkspaceFolder, Workspace as Workspace$1 } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ConfigurationModel, mergeChanges, ConfigurationChangeEvent } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { isConfigurationOverrides, isConfigurationUpdateOverrides, ConfigurationTargetToString } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { NullPolicyConfiguration, PolicyConfiguration } from 'monaco-editor/esm/vs/platform/configuration/common/configurations.js';\nimport { Configuration } from '../common/configurationModels.js';\nimport { APPLY_ALL_PROFILES_SETTING, defaultSettingsSchemaId, userSettingsSchemaId, profileSettingsSchemaId, machineSettingsSchemaId, workspaceSettingsSchemaId, folderSettingsSchemaId, FOLDER_CONFIG_FOLDER_NAME, LOCAL_MACHINE_SCOPES, LOCAL_MACHINE_PROFILE_SCOPES, PROFILE_SCOPES } from '../common/configuration.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { applicationSettings, windowSettings, resourceSettings, allSettings, machineSettings, machineOverridableSettings, OVERRIDE_PROPERTY_PATTERN, resourceLanguageSettingsSchemaId, configurationDefaultsSchemaId, Extensions, keyFromOverrideIdentifiers } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { isStoredWorkspaceFolder, toWorkspaceFolders, getStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { ConfigurationEditing } from '../common/configurationEditing.js';\nimport { DefaultConfiguration, UserConfiguration, RemoteUserConfiguration, WorkspaceConfiguration, ApplicationConfiguration, FolderConfiguration } from './configuration.js';\nimport { mark } from 'monaco-editor/esm/vs/base/common/performance.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { Extensions as Extensions$1 } from '../../../common/contributions.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { toErrorMessage } from 'monaco-editor/esm/vs/base/common/errorMessage.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { distinct, delta } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IWorkbenchAssignmentService } from '../../assignment/common/assignmentService.js';\nimport { isUndefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { NullPolicyService } from 'monaco-editor/esm/vs/platform/policy/common/policy.js';\nimport { IJSONEditingService } from '../common/jsonEditing.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nfunction getLocalUserConfigurationScopes(userDataProfile, hasRemote) {\n    return (userDataProfile.isDefault || userDataProfile.useDefaultFlags?.settings)\n        ? hasRemote ? LOCAL_MACHINE_SCOPES : undefined\n        : hasRemote ? LOCAL_MACHINE_PROFILE_SCOPES : PROFILE_SCOPES;\n}\nclass Workspace extends Workspace$1 {\n    constructor() {\n        super(...arguments);\n        this.initialized = false;\n    }\n}\nclass WorkspaceService extends Disposable {\n    get restrictedSettings() { return this._restrictedSettings; }\n    constructor({ remoteAuthority, configurationCache }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {\n        super();\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.fileService = fileService;\n        this.remoteAgentService = remoteAgentService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this.initialized = false;\n        this.applicationConfiguration = null;\n        this.remoteUserConfiguration = null;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._onWillChangeWorkspaceFolders = this._register(( (new Emitter())));\n        this.onWillChangeWorkspaceFolders = this._onWillChangeWorkspaceFolders.event;\n        this._onDidChangeWorkspaceFolders = this._register(( (new Emitter())));\n        this.onDidChangeWorkspaceFolders = this._onDidChangeWorkspaceFolders.event;\n        this._onDidChangeWorkspaceName = this._register(( (new Emitter())));\n        this.onDidChangeWorkspaceName = this._onDidChangeWorkspaceName.event;\n        this._onDidChangeWorkbenchState = this._register(( (new Emitter())));\n        this.onDidChangeWorkbenchState = this._onDidChangeWorkbenchState.event;\n        this.isWorkspaceTrusted = true;\n        this._restrictedSettings = { default: [] };\n        this._onDidChangeRestrictedSettings = this._register(( (new Emitter())));\n        this.onDidChangeRestrictedSettings = this._onDidChangeRestrictedSettings.event;\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.initRemoteUserConfigurationBarrier = ( (new Barrier()));\n        this.completeWorkspaceBarrier = ( (new Barrier()));\n        this.defaultConfiguration = this._register(( (new DefaultConfiguration(configurationCache, environmentService))));\n        this.policyConfiguration = policyService instanceof NullPolicyService ? ( (new NullPolicyConfiguration())) : this._register(( (new PolicyConfiguration(this.defaultConfiguration, policyService, logService))));\n        this.configurationCache = configurationCache;\n        this._configuration = ( (new Configuration(\n            this.defaultConfiguration.configurationModel,\n            this.policyConfiguration.configurationModel,\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n            this.workspace\n        )));\n        this.applicationConfigurationDisposables = this._register(( (new DisposableStore())));\n        this.createApplicationConfiguration();\n        this.localUserConfiguration = this._register(( (new UserConfiguration(\n            userDataProfileService.currentProfile.settingsResource,\n            userDataProfileService.currentProfile.tasksResource,\n            { scopes: getLocalUserConfigurationScopes(userDataProfileService.currentProfile, !!remoteAuthority) },\n            fileService,\n            uriIdentityService,\n            logService\n        ))));\n        this.cachedFolderConfigs = ( (new ResourceMap()));\n        this._register(this.localUserConfiguration.onDidChangeConfiguration(userConfiguration => this.onLocalUserConfigurationChanged(userConfiguration)));\n        if (remoteAuthority) {\n            const remoteUserConfiguration = this.remoteUserConfiguration = this._register(( (new RemoteUserConfiguration(\n                remoteAuthority,\n                configurationCache,\n                fileService,\n                uriIdentityService,\n                remoteAgentService\n            ))));\n            this._register(remoteUserConfiguration.onDidInitialize(remoteUserConfigurationModel => {\n                this._register(remoteUserConfiguration.onDidChangeConfiguration(remoteUserConfigurationModel => this.onRemoteUserConfigurationChanged(remoteUserConfigurationModel)));\n                this.onRemoteUserConfigurationChanged(remoteUserConfigurationModel);\n                this.initRemoteUserConfigurationBarrier.open();\n            }));\n        }\n        else {\n            this.initRemoteUserConfigurationBarrier.open();\n        }\n        this.workspaceConfiguration = this._register(( (new WorkspaceConfiguration(configurationCache, fileService, uriIdentityService, logService))));\n        this._register(this.workspaceConfiguration.onDidUpdateConfiguration(fromCache => {\n            this.onWorkspaceConfigurationChanged(fromCache).then(() => {\n                this.workspace.initialized = this.workspaceConfiguration.initialized;\n                this.checkAndMarkWorkspaceComplete(fromCache);\n            });\n        }));\n        this._register(this.defaultConfiguration.onDidChangeConfiguration(({ properties, defaults }) => this.onDefaultConfigurationChanged(defaults, properties)));\n        this._register(this.policyConfiguration.onDidChangeConfiguration(configurationModel => this.onPolicyConfigurationChanged(configurationModel)));\n        this._register(userDataProfileService.onDidChangeCurrentProfile(e => this.onUserDataProfileChanged(e)));\n        this.workspaceEditingQueue = ( (new Queue()));\n    }\n    createApplicationConfiguration() {\n        this.applicationConfigurationDisposables.clear();\n        if (this.userDataProfileService.currentProfile.isDefault || this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n            this.applicationConfiguration = null;\n        }\n        else {\n            this.applicationConfiguration = this.applicationConfigurationDisposables.add(this._register(( (new ApplicationConfiguration(this.userDataProfilesService, this.fileService, this.uriIdentityService)))));\n            this.applicationConfigurationDisposables.add(this.applicationConfiguration.onDidChangeConfiguration(configurationModel => this.onApplicationConfigurationChanged(configurationModel)));\n        }\n    }\n    async getCompleteWorkspace() {\n        await this.completeWorkspaceBarrier.wait();\n        return this.getWorkspace();\n    }\n    getWorkspace() {\n        return this.workspace;\n    }\n    getWorkbenchState() {\n        if (this.workspace.configuration) {\n            return 3 ;\n        }\n        if (this.workspace.folders.length === 1) {\n            return 2 ;\n        }\n        return 1 ;\n    }\n    getWorkspaceFolder(resource) {\n        return this.workspace.getFolder(resource);\n    }\n    addFolders(foldersToAdd, index) {\n        return this.updateFolders(foldersToAdd, [], index);\n    }\n    removeFolders(foldersToRemove) {\n        return this.updateFolders([], foldersToRemove);\n    }\n    async updateFolders(foldersToAdd, foldersToRemove, index) {\n        return this.workspaceEditingQueue.queue(() => this.doUpdateFolders(foldersToAdd, foldersToRemove, index));\n    }\n    isInsideWorkspace(resource) {\n        return !!this.getWorkspaceFolder(resource);\n    }\n    isCurrentWorkspace(workspaceIdOrFolder) {\n        switch (this.getWorkbenchState()) {\n            case 2 : {\n                let folderUri = undefined;\n                if (URI.isUri(workspaceIdOrFolder)) {\n                    folderUri = workspaceIdOrFolder;\n                }\n                else if (isSingleFolderWorkspaceIdentifier(workspaceIdOrFolder)) {\n                    folderUri = workspaceIdOrFolder.uri;\n                }\n                return URI.isUri(folderUri) && this.uriIdentityService.extUri.isEqual(folderUri, this.workspace.folders[0].uri);\n            }\n            case 3 :\n                return isWorkspaceIdentifier(workspaceIdOrFolder) && this.workspace.id === workspaceIdOrFolder.id;\n        }\n        return false;\n    }\n    async doUpdateFolders(foldersToAdd, foldersToRemove, index) {\n        if (this.getWorkbenchState() !== 3 ) {\n            return Promise.resolve(undefined);\n        }\n        if (foldersToAdd.length + foldersToRemove.length === 0) {\n            return Promise.resolve(undefined);\n        }\n        let foldersHaveChanged = false;\n        let currentWorkspaceFolders = this.getWorkspace().folders;\n        let newStoredFolders = ( (currentWorkspaceFolders.map(f => f.raw))).filter((folder, index) => {\n            if (!isStoredWorkspaceFolder(folder)) {\n                return true;\n            }\n            return !this.contains(foldersToRemove, currentWorkspaceFolders[index].uri);\n        });\n        foldersHaveChanged = currentWorkspaceFolders.length !== newStoredFolders.length;\n        if (foldersToAdd.length) {\n            const workspaceConfigPath = this.getWorkspace().configuration;\n            const workspaceConfigFolder = this.uriIdentityService.extUri.dirname(workspaceConfigPath);\n            currentWorkspaceFolders = toWorkspaceFolders(newStoredFolders, workspaceConfigPath, this.uriIdentityService.extUri);\n            const currentWorkspaceFolderUris = ( (currentWorkspaceFolders.map(folder => folder.uri)));\n            const storedFoldersToAdd = [];\n            for (const folderToAdd of foldersToAdd) {\n                const folderURI = folderToAdd.uri;\n                if (this.contains(currentWorkspaceFolderUris, folderURI)) {\n                    continue;\n                }\n                try {\n                    const result = await this.fileService.stat(folderURI);\n                    if (!result.isDirectory) {\n                        continue;\n                    }\n                }\n                catch (e) {  }\n                storedFoldersToAdd.push(getStoredWorkspaceFolder(folderURI, false, folderToAdd.name, workspaceConfigFolder, this.uriIdentityService.extUri));\n            }\n            if (storedFoldersToAdd.length > 0) {\n                foldersHaveChanged = true;\n                if (typeof index === 'number' && index >= 0 && index < newStoredFolders.length) {\n                    newStoredFolders = newStoredFolders.slice(0);\n                    newStoredFolders.splice(index, 0, ...storedFoldersToAdd);\n                }\n                else {\n                    newStoredFolders = [...newStoredFolders, ...storedFoldersToAdd];\n                }\n            }\n        }\n        if (foldersHaveChanged) {\n            return this.setFolders(newStoredFolders);\n        }\n        return Promise.resolve(undefined);\n    }\n    async setFolders(folders) {\n        if (!this.instantiationService) {\n            throw new Error('Cannot update workspace folders because workspace service is not yet ready to accept writes.');\n        }\n        await this.instantiationService.invokeFunction(accessor => this.workspaceConfiguration.setFolders(folders, accessor.get(IJSONEditingService)));\n        return this.onWorkspaceConfigurationChanged(false);\n    }\n    contains(resources, toCheck) {\n        return (\n             (resources.some(resource => this.uriIdentityService.extUri.isEqual(resource, toCheck)))\n        );\n    }\n    getConfigurationData() {\n        return this._configuration.toData();\n    }\n    getValue(arg1, arg2) {\n        const section = typeof arg1 === 'string' ? arg1 : undefined;\n        const overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n        return this._configuration.getValue(section, overrides);\n    }\n    async updateValue(key, value, arg3, arg4, options) {\n        const overrides = isConfigurationUpdateOverrides(arg3) ? arg3\n            : isConfigurationOverrides(arg3) ? { resource: arg3.resource, overrideIdentifiers: arg3.overrideIdentifier ? [arg3.overrideIdentifier] : undefined } : undefined;\n        const target = overrides ? arg4 : arg3;\n        const targets = target ? [target] : [];\n        if (overrides?.overrideIdentifiers) {\n            overrides.overrideIdentifiers = distinct(overrides.overrideIdentifiers);\n            overrides.overrideIdentifiers = overrides.overrideIdentifiers.length ? overrides.overrideIdentifiers : undefined;\n        }\n        if (!targets.length) {\n            if (overrides?.overrideIdentifiers && overrides.overrideIdentifiers.length > 1) {\n                throw new Error('Configuration Target is required while updating the value for multiple override identifiers');\n            }\n            const inspect = this.inspect(key, { resource: overrides?.resource, overrideIdentifier: overrides?.overrideIdentifiers ? overrides.overrideIdentifiers[0] : undefined });\n            targets.push(...this.deriveConfigurationTargets(key, value, inspect));\n            if (equals(value, inspect.defaultValue) && targets.length === 1 && ((targets[0] === 2  || targets[0] === 3) )) {\n                value = undefined;\n            }\n        }\n        await Promises.settled(( (targets.map(\n            target => this.writeConfigurationValue(key, value, target, overrides, options)\n        ))));\n    }\n    async reloadConfiguration(target) {\n        if (target === undefined) {\n            this.reloadDefaultConfiguration();\n            const application = await this.reloadApplicationConfiguration(true);\n            const { local, remote } = await this.reloadUserConfiguration();\n            await this.reloadWorkspaceConfiguration();\n            await this.loadConfiguration(application, local, remote, true);\n            return;\n        }\n        if (isWorkspaceFolder(target)) {\n            await this.reloadWorkspaceFolderConfiguration(target);\n            return;\n        }\n        switch (target) {\n            case 7 :\n                this.reloadDefaultConfiguration();\n                return;\n            case 2 : {\n                const { local, remote } = await this.reloadUserConfiguration();\n                await this.loadConfiguration(this._configuration.applicationConfiguration, local, remote, true);\n                return;\n            }\n            case 3 :\n                await this.reloadLocalUserConfiguration();\n                return;\n            case 4 :\n                await this.reloadRemoteUserConfiguration();\n                return;\n            case 5 :\n            case 6 :\n                await this.reloadWorkspaceConfiguration();\n                return;\n        }\n    }\n    hasCachedConfigurationDefaultsOverrides() {\n        return this.defaultConfiguration.hasCachedConfigurationDefaultsOverrides();\n    }\n    inspect(key, overrides) {\n        return this._configuration.inspect(key, overrides);\n    }\n    keys() {\n        return (\n             (this._configuration.keys())\n        );\n    }\n    async whenRemoteConfigurationLoaded() {\n        await this.initRemoteUserConfigurationBarrier.wait();\n    }\n    async initialize(arg) {\n        mark('code/willInitWorkspaceService');\n        const trigger = this.initialized;\n        this.initialized = false;\n        const workspace = await this.createWorkspace(arg);\n        await this.updateWorkspaceAndInitializeConfiguration(workspace, trigger);\n        this.checkAndMarkWorkspaceComplete(false);\n        mark('code/didInitWorkspaceService');\n    }\n    updateWorkspaceTrust(trusted) {\n        if (this.isWorkspaceTrusted !== trusted) {\n            this.isWorkspaceTrusted = trusted;\n            const data = this._configuration.toData();\n            const folderConfigurationModels = [];\n            for (const folder of this.workspace.folders) {\n                const folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                let configurationModel;\n                if (folderConfiguration) {\n                    configurationModel = folderConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted);\n                    this._configuration.updateFolderConfiguration(folder.uri, configurationModel);\n                }\n                folderConfigurationModels.push(configurationModel);\n            }\n            if (this.getWorkbenchState() === 2 ) {\n                if (folderConfigurationModels[0]) {\n                    this._configuration.updateWorkspaceConfiguration(folderConfigurationModels[0]);\n                }\n            }\n            else {\n                this._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted));\n            }\n            this.updateRestrictedSettings();\n            let keys = [];\n            if (this.restrictedSettings.userLocal) {\n                keys.push(...this.restrictedSettings.userLocal);\n            }\n            if (this.restrictedSettings.userRemote) {\n                keys.push(...this.restrictedSettings.userRemote);\n            }\n            if (this.restrictedSettings.workspace) {\n                keys.push(...this.restrictedSettings.workspace);\n            }\n            this.restrictedSettings.workspaceFolder?.forEach((value) => keys.push(...value));\n            keys = distinct(keys);\n            if (keys.length) {\n                this.triggerConfigurationChange({ keys, overrides: [] }, { data, workspace: this.workspace }, 5 );\n            }\n        }\n    }\n    acquireInstantiationService(instantiationService) {\n        this.instantiationService = instantiationService;\n    }\n    isSettingAppliedForAllProfiles(key) {\n        if (this.configurationRegistry.getConfigurationProperties()[key]?.scope === 1 ) {\n            return true;\n        }\n        const allProfilesSettings = this.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        return Array.isArray(allProfilesSettings) && allProfilesSettings.includes(key);\n    }\n    async createWorkspace(arg) {\n        if (isWorkspaceIdentifier(arg)) {\n            return this.createMultiFolderWorkspace(arg);\n        }\n        if (isSingleFolderWorkspaceIdentifier(arg)) {\n            return this.createSingleFolderWorkspace(arg);\n        }\n        return this.createEmptyWorkspace(arg);\n    }\n    async createMultiFolderWorkspace(workspaceIdentifier) {\n        await this.workspaceConfiguration.initialize({ id: workspaceIdentifier.id, configPath: workspaceIdentifier.configPath }, this.isWorkspaceTrusted);\n        const workspaceConfigPath = workspaceIdentifier.configPath;\n        const workspaceFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), workspaceConfigPath, this.uriIdentityService.extUri);\n        const workspaceId = workspaceIdentifier.id;\n        const workspace = ( (new Workspace(\n            workspaceId,\n            workspaceFolders,\n            this.workspaceConfiguration.isTransient(),\n            workspaceConfigPath,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = this.workspaceConfiguration.initialized;\n        return workspace;\n    }\n    createSingleFolderWorkspace(singleFolderWorkspaceIdentifier) {\n        const workspace = ( (new Workspace(\n            singleFolderWorkspaceIdentifier.id,\n            [toWorkspaceFolder(singleFolderWorkspaceIdentifier.uri)],\n            false,\n            null,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = true;\n        return workspace;\n    }\n    createEmptyWorkspace(emptyWorkspaceIdentifier) {\n        const workspace = ( (new Workspace(\n            emptyWorkspaceIdentifier.id,\n            [],\n            false,\n            null,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = true;\n        return Promise.resolve(workspace);\n    }\n    checkAndMarkWorkspaceComplete(fromCache) {\n        if (!this.completeWorkspaceBarrier.isOpen() && this.workspace.initialized) {\n            this.completeWorkspaceBarrier.open();\n            this.validateWorkspaceFoldersAndReload(fromCache);\n        }\n    }\n    async updateWorkspaceAndInitializeConfiguration(workspace, trigger) {\n        const hasWorkspaceBefore = !!this.workspace;\n        let previousState;\n        let previousWorkspacePath;\n        let previousFolders = [];\n        if (hasWorkspaceBefore) {\n            previousState = this.getWorkbenchState();\n            previousWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n            previousFolders = this.workspace.folders;\n            this.workspace.update(workspace);\n        }\n        else {\n            this.workspace = workspace;\n        }\n        await this.initializeConfiguration(trigger);\n        if (hasWorkspaceBefore) {\n            const newState = this.getWorkbenchState();\n            if (previousState && newState !== previousState) {\n                this._onDidChangeWorkbenchState.fire(newState);\n            }\n            const newWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n            if (previousWorkspacePath && newWorkspacePath !== previousWorkspacePath || newState !== previousState) {\n                this._onDidChangeWorkspaceName.fire();\n            }\n            const folderChanges = this.compareFolders(previousFolders, this.workspace.folders);\n            if (folderChanges && (folderChanges.added.length || folderChanges.removed.length || folderChanges.changed.length)) {\n                await this.handleWillChangeWorkspaceFolders(folderChanges, false);\n                this._onDidChangeWorkspaceFolders.fire(folderChanges);\n            }\n        }\n        if (!this.localUserConfiguration.hasTasksLoaded) {\n            this._register(runWhenIdle(() => this.reloadLocalUserConfiguration()));\n        }\n    }\n    compareFolders(currentFolders, newFolders) {\n        const result = { added: [], removed: [], changed: [] };\n        result.added = newFolders.filter(newFolder => !( (currentFolders.some(\n            currentFolder => ( (newFolder.uri.toString())) === ( (currentFolder.uri.toString()))\n        ))));\n        for (let currentIndex = 0; currentIndex < currentFolders.length; currentIndex++) {\n            const currentFolder = currentFolders[currentIndex];\n            let newIndex = 0;\n            for (newIndex = 0; newIndex < newFolders.length && ( (currentFolder.uri.toString())) !== ( (newFolders[newIndex].uri.toString())); newIndex++) { }\n            if (newIndex < newFolders.length) {\n                if (currentIndex !== newIndex || currentFolder.name !== newFolders[newIndex].name) {\n                    result.changed.push(currentFolder);\n                }\n            }\n            else {\n                result.removed.push(currentFolder);\n            }\n        }\n        return result;\n    }\n    async initializeConfiguration(trigger) {\n        await this.defaultConfiguration.initialize();\n        const initPolicyConfigurationPromise = this.policyConfiguration.initialize();\n        const initApplicationConfigurationPromise = this.applicationConfiguration ? this.applicationConfiguration.initialize() : Promise.resolve(( (new ConfigurationModel())));\n        const initUserConfiguration = async () => {\n            mark('code/willInitUserConfiguration');\n            const result = await Promise.all([this.localUserConfiguration.initialize(), this.remoteUserConfiguration ? this.remoteUserConfiguration.initialize() : Promise.resolve(( (new ConfigurationModel())))]);\n            if (this.applicationConfiguration) {\n                const applicationConfigurationModel = await initApplicationConfigurationPromise;\n                result[0] = this.localUserConfiguration.reparse({ exclude: applicationConfigurationModel.getValue(APPLY_ALL_PROFILES_SETTING) });\n            }\n            mark('code/didInitUserConfiguration');\n            return result;\n        };\n        const [, application, [local, remote]] = await Promise.all([\n            initPolicyConfigurationPromise,\n            initApplicationConfigurationPromise,\n            initUserConfiguration()\n        ]);\n        mark('code/willInitWorkspaceConfiguration');\n        await this.loadConfiguration(application, local, remote, trigger);\n        mark('code/didInitWorkspaceConfiguration');\n    }\n    reloadDefaultConfiguration() {\n        this.onDefaultConfigurationChanged(this.defaultConfiguration.reload());\n    }\n    async reloadApplicationConfiguration(donotTrigger) {\n        if (!this.applicationConfiguration) {\n            return (\n                 (new ConfigurationModel())\n            );\n        }\n        const model = await this.applicationConfiguration.loadConfiguration();\n        if (!donotTrigger) {\n            this.onApplicationConfigurationChanged(model);\n        }\n        return model;\n    }\n    async reloadUserConfiguration() {\n        const [local, remote] = await Promise.all([this.reloadLocalUserConfiguration(true), this.reloadRemoteUserConfiguration(true)]);\n        return { local, remote };\n    }\n    async reloadLocalUserConfiguration(donotTrigger) {\n        const model = await this.localUserConfiguration.reload();\n        if (!donotTrigger) {\n            this.onLocalUserConfigurationChanged(model);\n        }\n        return model;\n    }\n    async reloadRemoteUserConfiguration(donotTrigger) {\n        if (this.remoteUserConfiguration) {\n            const model = await this.remoteUserConfiguration.reload();\n            if (!donotTrigger) {\n                this.onRemoteUserConfigurationChanged(model);\n            }\n            return model;\n        }\n        return (\n             (new ConfigurationModel())\n        );\n    }\n    async reloadWorkspaceConfiguration() {\n        const workbenchState = this.getWorkbenchState();\n        if (workbenchState === 2 ) {\n            return this.onWorkspaceFolderConfigurationChanged(this.workspace.folders[0]);\n        }\n        if (workbenchState === 3 ) {\n            return this.workspaceConfiguration.reload().then(() => this.onWorkspaceConfigurationChanged(false));\n        }\n    }\n    reloadWorkspaceFolderConfiguration(folder) {\n        return this.onWorkspaceFolderConfigurationChanged(folder);\n    }\n    async loadConfiguration(applicationConfigurationModel, userConfigurationModel, remoteUserConfigurationModel, trigger) {\n        this.cachedFolderConfigs = ( (new ResourceMap()));\n        const folders = this.workspace.folders;\n        const folderConfigurations = await this.loadFolderConfigurations(folders);\n        const workspaceConfiguration = this.getWorkspaceConfigurationModel(folderConfigurations);\n        const folderConfigurationModels = ( (new ResourceMap()));\n        folderConfigurations.forEach((folderConfiguration, index) => folderConfigurationModels.set(folders[index].uri, folderConfiguration));\n        const currentConfiguration = this._configuration;\n        this._configuration = ( (new Configuration(\n            this.defaultConfiguration.configurationModel,\n            this.policyConfiguration.configurationModel,\n            applicationConfigurationModel,\n            userConfigurationModel,\n            remoteUserConfigurationModel,\n            workspaceConfiguration,\n            folderConfigurationModels,\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n            this.workspace\n        )));\n        this.initialized = true;\n        if (trigger) {\n            const change = this._configuration.compare(currentConfiguration);\n            this.triggerConfigurationChange(change, { data: currentConfiguration.toData(), workspace: this.workspace }, 5 );\n        }\n        this.updateRestrictedSettings();\n    }\n    getWorkspaceConfigurationModel(folderConfigurations) {\n        switch (this.getWorkbenchState()) {\n            case 2 :\n                return folderConfigurations[0];\n            case 3 :\n                return this.workspaceConfiguration.getConfiguration();\n            default:\n                return (\n                     (new ConfigurationModel())\n                );\n        }\n    }\n    onUserDataProfileChanged(e) {\n        e.join((async () => {\n            const promises = [];\n            promises.push(this.localUserConfiguration.reset(e.profile.settingsResource, e.profile.tasksResource, { scopes: getLocalUserConfigurationScopes(e.profile, !!this.remoteUserConfiguration) }));\n            if (e.previous.isDefault !== e.profile.isDefault\n                || !!e.previous.useDefaultFlags?.settings !== !!e.profile.useDefaultFlags?.settings) {\n                this.createApplicationConfiguration();\n                if (this.applicationConfiguration) {\n                    promises.push(this.reloadApplicationConfiguration(true));\n                }\n            }\n            let [localUser, application] = await Promise.all(promises);\n            application = application ?? this._configuration.applicationConfiguration;\n            if (this.applicationConfiguration) {\n                localUser = this.localUserConfiguration.reparse({ exclude: application.getValue(APPLY_ALL_PROFILES_SETTING) });\n            }\n            await this.loadConfiguration(application, localUser, this._configuration.remoteUserConfiguration, true);\n        })());\n    }\n    onDefaultConfigurationChanged(configurationModel, properties) {\n        if (this.workspace) {\n            const previousData = this._configuration.toData();\n            const change = this._configuration.compareAndUpdateDefaultConfiguration(configurationModel, properties);\n            if (this.applicationConfiguration) {\n                this._configuration.updateApplicationConfiguration(this.applicationConfiguration.reparse());\n            }\n            if (this.remoteUserConfiguration) {\n                this._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse());\n                this._configuration.updateRemoteUserConfiguration(this.remoteUserConfiguration.reparse());\n            }\n            if (this.getWorkbenchState() === 2 ) {\n                const folderConfiguration = this.cachedFolderConfigs.get(this.workspace.folders[0].uri);\n                if (folderConfiguration) {\n                    this._configuration.updateWorkspaceConfiguration(folderConfiguration.reparse());\n                    this._configuration.updateFolderConfiguration(this.workspace.folders[0].uri, folderConfiguration.reparse());\n                }\n            }\n            else {\n                this._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.reparseWorkspaceSettings());\n                for (const folder of this.workspace.folders) {\n                    const folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                    if (folderConfiguration) {\n                        this._configuration.updateFolderConfiguration(folder.uri, folderConfiguration.reparse());\n                    }\n                }\n            }\n            this.triggerConfigurationChange(change, { data: previousData, workspace: this.workspace }, 7 );\n            this.updateRestrictedSettings();\n        }\n    }\n    onPolicyConfigurationChanged(policyConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdatePolicyConfiguration(policyConfiguration);\n        this.triggerConfigurationChange(change, previous, 7 );\n    }\n    onApplicationConfigurationChanged(applicationConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const previousAllProfilesSettings = this._configuration.applicationConfiguration.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        const change = this._configuration.compareAndUpdateApplicationConfiguration(applicationConfiguration);\n        const currentAllProfilesSettings = this.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        const configurationProperties = this.configurationRegistry.getConfigurationProperties();\n        const changedKeys = [];\n        for (const changedKey of change.keys) {\n            if (configurationProperties[changedKey]?.scope === 1 ) {\n                changedKeys.push(changedKey);\n                if (changedKey === APPLY_ALL_PROFILES_SETTING) {\n                    for (const previousAllProfileSetting of previousAllProfilesSettings) {\n                        if (!currentAllProfilesSettings.includes(previousAllProfileSetting)) {\n                            changedKeys.push(previousAllProfileSetting);\n                        }\n                    }\n                    for (const currentAllProfileSetting of currentAllProfilesSettings) {\n                        if (!previousAllProfilesSettings.includes(currentAllProfileSetting)) {\n                            changedKeys.push(currentAllProfileSetting);\n                        }\n                    }\n                }\n            }\n            else if (currentAllProfilesSettings.includes(changedKey)) {\n                changedKeys.push(changedKey);\n            }\n        }\n        change.keys = changedKeys;\n        if (change.keys.includes(APPLY_ALL_PROFILES_SETTING)) {\n            this._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse({ exclude: currentAllProfilesSettings }));\n        }\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    onLocalUserConfigurationChanged(userConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateLocalUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    onRemoteUserConfigurationChanged(userConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateRemoteUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    async onWorkspaceConfigurationChanged(fromCache) {\n        if (this.workspace && this.workspace.configuration) {\n            let newFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), this.workspace.configuration, this.uriIdentityService.extUri);\n            if (this.workspace.initialized) {\n                const { added, removed, changed } = this.compareFolders(this.workspace.folders, newFolders);\n                if (added.length || removed.length || changed.length) {\n                    newFolders = await this.toValidWorkspaceFolders(newFolders);\n                }\n                else {\n                    newFolders = this.workspace.folders;\n                }\n            }\n            await this.updateWorkspaceConfiguration(newFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n        }\n    }\n    updateRestrictedSettings() {\n        const changed = [];\n        const allProperties = this.configurationRegistry.getConfigurationProperties();\n        const defaultRestrictedSettings = ( (Object.keys(allProperties))).filter(key => allProperties[key].restricted).sort((a, b) => a.localeCompare(b));\n        const defaultDelta = delta(defaultRestrictedSettings, this._restrictedSettings.default, (a, b) => a.localeCompare(b));\n        changed.push(...defaultDelta.added, ...defaultDelta.removed);\n        const application = (this.applicationConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n        const applicationDelta = delta(application, this._restrictedSettings.application || [], (a, b) => a.localeCompare(b));\n        changed.push(...applicationDelta.added, ...applicationDelta.removed);\n        const userLocal = this.localUserConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b));\n        const userLocalDelta = delta(userLocal, this._restrictedSettings.userLocal || [], (a, b) => a.localeCompare(b));\n        changed.push(...userLocalDelta.added, ...userLocalDelta.removed);\n        const userRemote = (this.remoteUserConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n        const userRemoteDelta = delta(userRemote, this._restrictedSettings.userRemote || [], (a, b) => a.localeCompare(b));\n        changed.push(...userRemoteDelta.added, ...userRemoteDelta.removed);\n        const workspaceFolderMap = ( (new ResourceMap()));\n        for (const workspaceFolder of this.workspace.folders) {\n            const cachedFolderConfig = this.cachedFolderConfigs.get(workspaceFolder.uri);\n            const folderRestrictedSettings = (cachedFolderConfig?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n            if (folderRestrictedSettings.length) {\n                workspaceFolderMap.set(workspaceFolder.uri, folderRestrictedSettings);\n            }\n            const previous = this._restrictedSettings.workspaceFolder?.get(workspaceFolder.uri) || [];\n            const workspaceFolderDelta = delta(folderRestrictedSettings, previous, (a, b) => a.localeCompare(b));\n            changed.push(...workspaceFolderDelta.added, ...workspaceFolderDelta.removed);\n        }\n        const workspace = this.getWorkbenchState() === 3  ? this.workspaceConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b))\n            : this.workspace.folders[0] ? (workspaceFolderMap.get(this.workspace.folders[0].uri) || []) : [];\n        const workspaceDelta = delta(workspace, this._restrictedSettings.workspace || [], (a, b) => a.localeCompare(b));\n        changed.push(...workspaceDelta.added, ...workspaceDelta.removed);\n        if (changed.length) {\n            this._restrictedSettings = {\n                default: defaultRestrictedSettings,\n                application: application.length ? application : undefined,\n                userLocal: userLocal.length ? userLocal : undefined,\n                userRemote: userRemote.length ? userRemote : undefined,\n                workspace: workspace.length ? workspace : undefined,\n                workspaceFolder: workspaceFolderMap.size ? workspaceFolderMap : undefined,\n            };\n            this._onDidChangeRestrictedSettings.fire(this.restrictedSettings);\n        }\n    }\n    async updateWorkspaceConfiguration(workspaceFolders, configuration, fromCache) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateWorkspaceConfiguration(configuration);\n        const changes = this.compareFolders(this.workspace.folders, workspaceFolders);\n        if (changes.added.length || changes.removed.length || changes.changed.length) {\n            this.workspace.folders = workspaceFolders;\n            const change = await this.onFoldersChanged();\n            await this.handleWillChangeWorkspaceFolders(changes, fromCache);\n            this.triggerConfigurationChange(change, previous, 6 );\n            this._onDidChangeWorkspaceFolders.fire(changes);\n        }\n        else {\n            this.triggerConfigurationChange(change, previous, 5 );\n        }\n        this.updateRestrictedSettings();\n    }\n    async handleWillChangeWorkspaceFolders(changes, fromCache) {\n        const joiners = [];\n        this._onWillChangeWorkspaceFolders.fire({\n            join(updateWorkspaceTrustStatePromise) {\n                joiners.push(updateWorkspaceTrustStatePromise);\n            },\n            changes,\n            fromCache\n        });\n        try {\n            await Promises.settled(joiners);\n        }\n        catch (error) {  }\n    }\n    async onWorkspaceFolderConfigurationChanged(folder) {\n        const [folderConfiguration] = await this.loadFolderConfigurations([folder]);\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const folderConfigurationChange = this._configuration.compareAndUpdateFolderConfiguration(folder.uri, folderConfiguration);\n        if (this.getWorkbenchState() === 2 ) {\n            const workspaceConfigurationChange = this._configuration.compareAndUpdateWorkspaceConfiguration(folderConfiguration);\n            this.triggerConfigurationChange(mergeChanges(folderConfigurationChange, workspaceConfigurationChange), previous, 5 );\n        }\n        else {\n            this.triggerConfigurationChange(folderConfigurationChange, previous, 6 );\n        }\n        this.updateRestrictedSettings();\n    }\n    async onFoldersChanged() {\n        const changes = [];\n        for (const key of ( (this.cachedFolderConfigs.keys()))) {\n            if (!this.workspace.folders.filter(folder => ( (folder.uri.toString())) === ( (key.toString())))[0]) {\n                const folderConfiguration = this.cachedFolderConfigs.get(key);\n                folderConfiguration.dispose();\n                this.cachedFolderConfigs.delete(key);\n                changes.push(this._configuration.compareAndDeleteFolderConfiguration(key));\n            }\n        }\n        const toInitialize = this.workspace.folders.filter(folder => !( (this.cachedFolderConfigs.has(folder.uri))));\n        if (toInitialize.length) {\n            const folderConfigurations = await this.loadFolderConfigurations(toInitialize);\n            folderConfigurations.forEach((folderConfiguration, index) => {\n                changes.push(this._configuration.compareAndUpdateFolderConfiguration(toInitialize[index].uri, folderConfiguration));\n            });\n        }\n        return mergeChanges(...changes);\n    }\n    loadFolderConfigurations(folders) {\n        return Promise.all([...( (folders.map(folder => {\n                let folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                if (!folderConfiguration) {\n                    folderConfiguration = ( (new FolderConfiguration(\n                        !this.initialized,\n                        folder,\n                        FOLDER_CONFIG_FOLDER_NAME,\n                        this.getWorkbenchState(),\n                        this.isWorkspaceTrusted,\n                        this.fileService,\n                        this.uriIdentityService,\n                        this.logService,\n                        this.configurationCache\n                    )));\n                    this._register(folderConfiguration.onDidChange(() => this.onWorkspaceFolderConfigurationChanged(folder)));\n                    this.cachedFolderConfigs.set(folder.uri, this._register(folderConfiguration));\n                }\n                return folderConfiguration.loadConfiguration();\n            })))]);\n    }\n    async validateWorkspaceFoldersAndReload(fromCache) {\n        const validWorkspaceFolders = await this.toValidWorkspaceFolders(this.workspace.folders);\n        const { removed } = this.compareFolders(this.workspace.folders, validWorkspaceFolders);\n        if (removed.length) {\n            await this.updateWorkspaceConfiguration(validWorkspaceFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n        }\n    }\n    async toValidWorkspaceFolders(workspaceFolders) {\n        const validWorkspaceFolders = [];\n        for (const workspaceFolder of workspaceFolders) {\n            try {\n                const result = await this.fileService.stat(workspaceFolder.uri);\n                if (!result.isDirectory) {\n                    continue;\n                }\n            }\n            catch (e) {\n                this.logService.warn(`Ignoring the error while validating workspace folder ${( ( workspaceFolder.uri.toString()))} - ${toErrorMessage(e)}`);\n            }\n            validWorkspaceFolders.push(workspaceFolder);\n        }\n        return validWorkspaceFolders;\n    }\n    async writeConfigurationValue(key, value, target, overrides, options) {\n        if (!this.instantiationService) {\n            throw new Error('Cannot write configuration because the configuration service is not yet ready to accept writes.');\n        }\n        if (target === 7 ) {\n            throw new Error('Invalid configuration target');\n        }\n        if (target === 8 ) {\n            const previous = { data: this._configuration.toData(), workspace: this.workspace };\n            this._configuration.updateValue(key, value, overrides);\n            this.triggerConfigurationChange({ keys: overrides?.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key], overrides: overrides?.overrideIdentifiers?.length ? ( (overrides.overrideIdentifiers.map(overrideIdentifier => ([overrideIdentifier, [key]])))) : [] }, previous, target);\n            return;\n        }\n        const editableConfigurationTarget = this.toEditableConfigurationTarget(target, key);\n        if (!editableConfigurationTarget) {\n            throw new Error('Invalid configuration target');\n        }\n        if (editableConfigurationTarget === 2  && !this.remoteUserConfiguration) {\n            throw new Error('Invalid configuration target');\n        }\n        this.configurationEditing = this.configurationEditing ?? this.instantiationService.createInstance(ConfigurationEditing, (await this.remoteAgentService.getEnvironment())?.settingsPath ?? null);\n        await this.configurationEditing.writeConfiguration(editableConfigurationTarget, { key, value }, { scopes: overrides, ...options });\n        switch (editableConfigurationTarget) {\n            case 1 :\n                if (this.applicationConfiguration && this.isSettingAppliedForAllProfiles(key)) {\n                    await this.reloadApplicationConfiguration();\n                }\n                else {\n                    await this.reloadLocalUserConfiguration();\n                }\n                return;\n            case 2 :\n                return this.reloadRemoteUserConfiguration().then(() => undefined);\n            case 3 :\n                return this.reloadWorkspaceConfiguration();\n            case 4 : {\n                const workspaceFolder = overrides && overrides.resource ? this.workspace.getFolder(overrides.resource) : null;\n                if (workspaceFolder) {\n                    return this.reloadWorkspaceFolderConfiguration(workspaceFolder);\n                }\n            }\n        }\n    }\n    deriveConfigurationTargets(key, value, inspect) {\n        if (equals(value, inspect.value)) {\n            return [];\n        }\n        const definedTargets = [];\n        if (inspect.workspaceFolderValue !== undefined) {\n            definedTargets.push(6 );\n        }\n        if (inspect.workspaceValue !== undefined) {\n            definedTargets.push(5 );\n        }\n        if (inspect.userRemoteValue !== undefined) {\n            definedTargets.push(4 );\n        }\n        if (inspect.userLocalValue !== undefined) {\n            definedTargets.push(3 );\n        }\n        if (value === undefined) {\n            return definedTargets;\n        }\n        return [definedTargets[0] || 2 ];\n    }\n    triggerConfigurationChange(change, previous, target) {\n        if (change.keys.length) {\n            if (target !== 7 ) {\n                this.logService.debug(`Configuration keys changed in ${ConfigurationTargetToString(target)} target`, ...change.keys);\n            }\n            const configurationChangeEvent = ( (new ConfigurationChangeEvent(change, previous, this._configuration, this.workspace)));\n            configurationChangeEvent.source = target;\n            configurationChangeEvent.sourceConfig = this.getTargetConfiguration(target);\n            this._onDidChangeConfiguration.fire(configurationChangeEvent);\n        }\n    }\n    getTargetConfiguration(target) {\n        switch (target) {\n            case 7 :\n                return this._configuration.defaults.contents;\n            case 2 :\n                return this._configuration.userConfiguration.contents;\n            case 5 :\n                return this._configuration.workspaceConfiguration.contents;\n        }\n        return {};\n    }\n    toEditableConfigurationTarget(target, key) {\n        if (target === 2 ) {\n            if (this.remoteUserConfiguration) {\n                const scope = this.configurationRegistry.getConfigurationProperties()[key]?.scope;\n                if (scope === 2  || scope === 6 ) {\n                    return 2 ;\n                }\n                if (this.inspect(key).userRemoteValue !== undefined) {\n                    return 2 ;\n                }\n            }\n            return 1 ;\n        }\n        if (target === 3 ) {\n            return 1 ;\n        }\n        if (target === 4 ) {\n            return 2 ;\n        }\n        if (target === 5 ) {\n            return 3 ;\n        }\n        if (target === 6 ) {\n            return 4 ;\n        }\n        return null;\n    }\n}\nlet RegisterConfigurationSchemasContribution = class RegisterConfigurationSchemasContribution extends Disposable {\n    constructor(workspaceContextService, environmentService, workspaceTrustManagementService, extensionService, lifecycleService) {\n        super();\n        this.workspaceContextService = workspaceContextService;\n        this.environmentService = environmentService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        extensionService.whenInstalledExtensionsRegistered().then(() => {\n            this.registerConfigurationSchemas();\n            const configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n            const delayer = this._register(( (new Delayer(50))));\n            this._register(Event.any(configurationRegistry.onDidUpdateConfiguration, configurationRegistry.onDidSchemaChange, workspaceTrustManagementService.onDidChangeTrust)(() => delayer.trigger(() => this.registerConfigurationSchemas(), lifecycleService.phase === 4  ? undefined : 2500 )));\n        });\n    }\n    registerConfigurationSchemas() {\n        const allSettingsSchema = {\n            properties: allSettings.properties,\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const userSettingsSchema = this.environmentService.remoteAuthority ?\n            {\n                properties: Object.assign({}, applicationSettings.properties, windowSettings.properties, resourceSettings.properties),\n                patternProperties: allSettings.patternProperties,\n                additionalProperties: true,\n                allowTrailingCommas: true,\n                allowComments: true\n            }\n            : allSettingsSchema;\n        const profileSettingsSchema = {\n            properties: Object.assign({}, machineSettings.properties, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const machineSettingsSchema = {\n            properties: Object.assign({}, machineSettings.properties, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const workspaceSettingsSchema = {\n            properties: Object.assign({}, this.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties), this.checkAndFilterPropertiesRequiringTrust(windowSettings.properties), this.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const defaultSettingsSchema = {\n            properties: ( (Object.keys(allSettings.properties))).reduce((result, key) => {\n                result[key] = Object.assign({ deprecationMessage: undefined }, allSettings.properties[key]);\n                return result;\n            }, {}),\n            patternProperties: ( (Object.keys(allSettings.patternProperties))).reduce((result, key) => {\n                result[key] = Object.assign({ deprecationMessage: undefined }, allSettings.patternProperties[key]);\n                return result;\n            }, {}),\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const folderSettingsSchema = 3  === this.workspaceContextService.getWorkbenchState() ?\n            {\n                properties: Object.assign({}, this.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties), this.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)),\n                patternProperties: allSettings.patternProperties,\n                additionalProperties: true,\n                allowTrailingCommas: true,\n                allowComments: true\n            } : workspaceSettingsSchema;\n        const configDefaultsSchema = {\n            type: 'object',\n            description: ( (localize(\n                'configurationDefaults.description',\n                'Contribute defaults for configurations'\n            ))),\n            properties: Object.assign({}, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: {\n                [OVERRIDE_PROPERTY_PATTERN]: {\n                    type: 'object',\n                    default: {},\n                    $ref: resourceLanguageSettingsSchemaId,\n                }\n            },\n            additionalProperties: false\n        };\n        this.registerSchemas({\n            defaultSettingsSchema,\n            userSettingsSchema,\n            profileSettingsSchema,\n            machineSettingsSchema,\n            workspaceSettingsSchema,\n            folderSettingsSchema,\n            configDefaultsSchema,\n        });\n    }\n    registerSchemas(schemas) {\n        const jsonRegistry = ( (Registry.as(Extensions$2.JSONContribution)));\n        jsonRegistry.registerSchema(defaultSettingsSchemaId, schemas.defaultSettingsSchema);\n        jsonRegistry.registerSchema(userSettingsSchemaId, schemas.userSettingsSchema);\n        jsonRegistry.registerSchema(profileSettingsSchemaId, schemas.profileSettingsSchema);\n        jsonRegistry.registerSchema(machineSettingsSchemaId, schemas.machineSettingsSchema);\n        jsonRegistry.registerSchema(workspaceSettingsSchemaId, schemas.workspaceSettingsSchema);\n        jsonRegistry.registerSchema(folderSettingsSchemaId, schemas.folderSettingsSchema);\n        jsonRegistry.registerSchema(configurationDefaultsSchemaId, schemas.configDefaultsSchema);\n    }\n    checkAndFilterPropertiesRequiringTrust(properties) {\n        if (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n            return properties;\n        }\n        const result = {};\n        Object.entries(properties).forEach(([key, value]) => {\n            if (!value.restricted) {\n                result[key] = value;\n            }\n        });\n        return result;\n    }\n};\nRegisterConfigurationSchemasContribution = ( (__decorate([\n    ( (__param(0, IWorkspaceContextService))),\n    ( (__param(1, IWorkbenchEnvironmentService))),\n    ( (__param(2, IWorkspaceTrustManagementService))),\n    ( (__param(3, IExtensionService))),\n    ( (__param(4, ILifecycleService)))\n], RegisterConfigurationSchemasContribution)));\nlet UpdateExperimentalSettingsDefaults = class UpdateExperimentalSettingsDefaults extends Disposable {\n    constructor(workbenchAssignmentService) {\n        super();\n        this.workbenchAssignmentService = workbenchAssignmentService;\n        this.processedExperimentalSettings = ( (new Set()));\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.processExperimentalSettings(( (Object.keys(this.configurationRegistry.getConfigurationProperties()))));\n        this._register(this.configurationRegistry.onDidUpdateConfiguration(({ properties }) => this.processExperimentalSettings(properties)));\n    }\n    async processExperimentalSettings(properties) {\n        const overrides = {};\n        const allProperties = this.configurationRegistry.getConfigurationProperties();\n        for (const property of properties) {\n            const schema = allProperties[property];\n            if (!schema?.tags?.includes('experimental')) {\n                continue;\n            }\n            if (( (this.processedExperimentalSettings.has(property)))) {\n                continue;\n            }\n            this.processedExperimentalSettings.add(property);\n            try {\n                const value = await this.workbenchAssignmentService.getTreatment(`config.${property}`);\n                if (!isUndefined(value) && !equals(value, schema.default)) {\n                    overrides[property] = value;\n                }\n            }\n            catch (error) {  }\n        }\n        if (( (Object.keys(overrides))).length) {\n            this.configurationRegistry.registerDefaultConfigurations([{ overrides, source: ( (localize('experimental', \"Experiments\"))) }]);\n        }\n    }\n};\nUpdateExperimentalSettingsDefaults = ( (__decorate([\n    ( (__param(0, IWorkbenchAssignmentService)))\n], UpdateExperimentalSettingsDefaults)));\nconst workbenchContributionsRegistry = ( (Registry.as(Extensions$1.Workbench)));\nworkbenchContributionsRegistry.registerWorkbenchContribution(RegisterConfigurationSchemasContribution, 3 );\nworkbenchContributionsRegistry.registerWorkbenchContribution(UpdateExperimentalSettingsDefaults, 3 );\nconst configurationRegistry = ( (Registry.as(Extensions.Configuration)));\nconfigurationRegistry.registerConfiguration({\n    ...workbenchConfigurationNodeBase,\n    properties: {\n        [APPLY_ALL_PROFILES_SETTING]: {\n            'type': 'array',\n            description: ( (localize(\n                'setting description',\n                \"Configure settings to be applied for all profiles.\"\n            ))),\n            'default': [],\n            'scope': 1 ,\n            additionalProperties: true,\n            uniqueItems: true,\n        }\n    }\n});\nexport { WorkspaceService };\n", "import { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { toValuesTree } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { Configuration as Configuration$1, ConfigurationModelParser, ConfigurationModel } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { isBoolean } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nclass WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n    constructor(name) {\n        super(name);\n        this._folders = [];\n        this._transient = false;\n        this._settingsModelParser = ( new ConfigurationModelParser(name));\n        this._launchModel = ( new ConfigurationModel());\n        this._tasksModel = ( new ConfigurationModel());\n    }\n    get folders() {\n        return this._folders;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get settingsModel() {\n        return this._settingsModelParser.configurationModel;\n    }\n    get launchModel() {\n        return this._launchModel;\n    }\n    get tasksModel() {\n        return this._tasksModel;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this._settingsModelParser.reparse(configurationParseOptions);\n    }\n    getRestrictedWorkspaceSettings() {\n        return this._settingsModelParser.restrictedConfigurations;\n    }\n    doParseRaw(raw, configurationParseOptions) {\n        this._folders = (raw['folders'] || []);\n        this._transient = isBoolean(raw['transient']) && raw['transient'];\n        this._settingsModelParser.parseRaw(raw['settings'], configurationParseOptions);\n        this._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n        this._tasksModel = this.createConfigurationModelFrom(raw, 'tasks');\n        return super.doParseRaw(raw, configurationParseOptions);\n    }\n    createConfigurationModelFrom(raw, key) {\n        const data = raw[key];\n        if (data) {\n            const contents = toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n            const scopedContents = Object.create(null);\n            scopedContents[key] = contents;\n            const keys = ( ( Object.keys(data)).map(k => `${key}.${k}`));\n            return ( new ConfigurationModel(scopedContents, keys, []));\n        }\n        return ( new ConfigurationModel());\n    }\n}\nclass StandaloneConfigurationModelParser extends ConfigurationModelParser {\n    constructor(name, scope) {\n        super(name);\n        this.scope = scope;\n    }\n    doParseRaw(raw, configurationParseOptions) {\n        const contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n        const scopedContents = Object.create(null);\n        scopedContents[this.scope] = contents;\n        const keys = ( ( Object.keys(raw)).map(key => `${this.scope}.${key}`));\n        return { contents: scopedContents, keys, overrides: [] };\n    }\n}\nclass Configuration extends Configuration$1 {\n    constructor(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, _workspace) {\n        super(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);\n        this._workspace = _workspace;\n    }\n    getValue(key, overrides = {}) {\n        return super.getValue(key, overrides, this._workspace);\n    }\n    inspect(key, overrides = {}) {\n        return super.inspect(key, overrides, this._workspace);\n    }\n    keys() {\n        return ( super.keys(this._workspace));\n    }\n    compareAndDeleteFolderConfiguration(folder) {\n        if (this._workspace && this._workspace.folders.length > 0 && ( this._workspace.folders[0].uri.toString()) === ( folder.toString())) {\n            return { keys: [], overrides: [] };\n        }\n        return super.compareAndDeleteFolderConfiguration(folder);\n    }\n    compare(other) {\n        const compare = (fromKeys, toKeys, overrideIdentifier) => {\n            const keys = [];\n            keys.push(...toKeys.filter(key => fromKeys.indexOf(key) === -1));\n            keys.push(...fromKeys.filter(key => toKeys.indexOf(key) === -1));\n            keys.push(...fromKeys.filter(key => {\n                if (toKeys.indexOf(key) === -1) {\n                    return false;\n                }\n                if (!equals(this.getValue(key, { overrideIdentifier }), other.getValue(key, { overrideIdentifier }))) {\n                    return true;\n                }\n                return this._workspace && ( this._workspace.folders.some(\n                    folder => !equals(this.getValue(key, { resource: folder.uri, overrideIdentifier }), other.getValue(key, { resource: folder.uri, overrideIdentifier }))\n                ));\n            }));\n            return keys;\n        };\n        const keys = compare(this.allKeys(), other.allKeys());\n        const overrides = [];\n        const allOverrideIdentifiers = distinct([...this.allOverrideIdentifiers(), ...other.allOverrideIdentifiers()]);\n        for (const overrideIdentifier of allOverrideIdentifiers) {\n            const keys = compare(this.getAllKeysForOverrideIdentifier(overrideIdentifier), other.getAllKeysForOverrideIdentifier(overrideIdentifier), overrideIdentifier);\n            if (keys.length) {\n                overrides.push([overrideIdentifier, keys]);\n            }\n        }\n        return { keys, overrides };\n    }\n}\nexport { Configuration, StandaloneConfigurationModelParser, WorkspaceConfigurationModelParser };\n", "import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { refineServiceDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nconst FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nconst FOLDER_SETTINGS_NAME = 'settings';\nconst FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\nconst defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nconst userSettingsSchemaId = 'vscode://schemas/settings/user';\nconst profileSettingsSchemaId = 'vscode://schemas/settings/profile';\nconst machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nconst workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nconst folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nconst launchSchemaId = 'vscode://schemas/launch';\nconst tasksSchemaId = 'vscode://schemas/tasks';\nconst APPLICATION_SCOPES = [1 ];\nconst PROFILE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst LOCAL_MACHINE_PROFILE_SCOPES = [3 , 4 , 5 ];\nconst LOCAL_MACHINE_SCOPES = [1 , ...LOCAL_MACHINE_PROFILE_SCOPES];\nconst REMOTE_MACHINE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst WORKSPACE_SCOPES = [3 , 4 , 5 , 6 ];\nconst FOLDER_SCOPES = [4 , 5 , 6 ];\nconst TASKS_CONFIGURATION_KEY = 'tasks';\nconst LAUNCH_CONFIGURATION_KEY = 'launch';\nconst WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nconst USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\nconst IWorkbenchConfigurationService = refineServiceDecorator(IConfigurationService);\nconst TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\nconst APPLY_ALL_PROFILES_SETTING = 'workbench.settings.applyToAllProfiles';\nexport { APPLICATION_SCOPES, APPLY_ALL_PROFILES_SETTING, FOLDER_CONFIG_FOLDER_NAME, FOLDER_SCOPES, FOLDER_SETTINGS_NAME, FOLDER_SETTINGS_PATH, IWorkbenchConfigurationService, LAUNCH_CONFIGURATION_KEY, LOCAL_MACHINE_PROFILE_SCOPES, LOCAL_MACHINE_SCOPES, PROFILE_SCOPES, REMOTE_MACHINE_SCOPES, TASKS_CONFIGURATION_KEY, TASKS_DEFAULT, USER_STANDALONE_CONFIGURATIONS, WORKSPACE_SCOPES, WORKSPACE_STANDALONE_CONFIGURATIONS, defaultSettingsSchemaId, folderSettingsSchemaId, launchSchemaId, machineSettingsSchemaId, profileSettingsSchemaId, tasksSchemaId, userSettingsSchemaId, workspaceSettingsSchemaId };\n", "import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { setProperty } from '../../../../base/common/jsonEdit.js';\nimport { Queue } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY, TASKS_DEFAULT, FOLDER_SCOPES, FOLDER_SETTINGS_PATH, IWorkbenchConfigurationService, USER_STANDALONE_CONFIGURATIONS, WORKSPACE_STANDALONE_CONFIGURATIONS } from './configuration.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX, keyFromOverrideIdentifiers } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { IPreferencesService } from '../../preferences/common/preferences.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';\nimport { EditOperation } from 'monaco-editor/esm/vs/editor/common/core/editOperation.js';\nimport { Selection } from 'monaco-editor/esm/vs/editor/common/core/selection.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { ErrorNoTelemetry } from 'monaco-editor/esm/vs/base/common/errors.js';\nclass ConfigurationEditingError extends ErrorNoTelemetry {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet ConfigurationEditing = class ConfigurationEditing {\n    constructor(remoteSettingsResource, configurationService, contextService, userDataProfileService, userDataProfilesService, fileService, textModelResolverService, textFileService, notificationService, preferencesService, editorService, uriIdentityService) {\n        this.remoteSettingsResource = remoteSettingsResource;\n        this.configurationService = configurationService;\n        this.contextService = contextService;\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.fileService = fileService;\n        this.textModelResolverService = textModelResolverService;\n        this.textFileService = textFileService;\n        this.notificationService = notificationService;\n        this.preferencesService = preferencesService;\n        this.editorService = editorService;\n        this.uriIdentityService = uriIdentityService;\n        this.queue = ( new Queue());\n    }\n    async writeConfiguration(target, value, options = {}) {\n        const operation = this.getConfigurationEditOperation(target, value, options.scopes || {});\n        return this.queue.queue(async () => {\n            try {\n                await this.doWriteConfiguration(operation, options);\n            }\n            catch (error) {\n                if (options.donotNotifyError) {\n                    throw error;\n                }\n                await this.onError(error, operation, options.scopes);\n            }\n        });\n    }\n    async doWriteConfiguration(operation, options) {\n        await this.validate(operation.target, operation, !options.handleDirtyFile, options.scopes || {});\n        const resource = operation.resource;\n        const reference = await this.resolveModelReference(resource);\n        try {\n            const formattingOptions = this.getFormattingOptions(reference.object.textEditorModel);\n            await this.updateConfiguration(operation, reference.object.textEditorModel, formattingOptions, options);\n        }\n        finally {\n            reference.dispose();\n        }\n    }\n    async updateConfiguration(operation, model, formattingOptions, options) {\n        if (this.hasParseErrors(model.getValue(), operation)) {\n            throw this.toConfigurationEditingError(11 , operation.target, operation);\n        }\n        if (this.textFileService.isDirty(model.uri) && options.handleDirtyFile) {\n            switch (options.handleDirtyFile) {\n                case 'save':\n                    await this.save(model, operation);\n                    break;\n                case 'revert':\n                    await this.textFileService.revert(model.uri);\n                    break;\n            }\n        }\n        const edit = this.getEdits(operation, model.getValue(), formattingOptions)[0];\n        if (edit && this.applyEditsToBuffer(edit, model)) {\n            await this.save(model, operation);\n        }\n    }\n    async save(model, operation) {\n        try {\n            await this.textFileService.save(model.uri, { ignoreErrorHandler: true });\n        }\n        catch (error) {\n            if (error.fileOperationResult === 3 ) {\n                throw this.toConfigurationEditingError(10 , operation.target, operation);\n            }\n            throw new ConfigurationEditingError(nls.localize('fsError', \"Error while writing to {0}. {1}\", this.stringifyTarget(operation.target), error.message), 13 );\n        }\n    }\n    applyEditsToBuffer(edit, model) {\n        const startPosition = model.getPositionAt(edit.offset);\n        const endPosition = model.getPositionAt(edit.offset + edit.length);\n        const range = ( new Range(\n            startPosition.lineNumber,\n            startPosition.column,\n            endPosition.lineNumber,\n            endPosition.column\n        ));\n        const currentText = model.getValueInRange(range);\n        if (edit.content !== currentText) {\n            const editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n            model.pushEditOperations([( new Selection(\n                startPosition.lineNumber,\n                startPosition.column,\n                startPosition.lineNumber,\n                startPosition.column\n            ))], [editOperation], () => []);\n            return true;\n        }\n        return false;\n    }\n    getEdits({ value, jsonPath }, modelContent, formattingOptions) {\n        if (jsonPath.length) {\n            return setProperty(modelContent, jsonPath, value, formattingOptions);\n        }\n        const content = JSON.stringify(value, null, formattingOptions.insertSpaces && formattingOptions.tabSize ? ' '.repeat(formattingOptions.tabSize) : '\\t');\n        return [{\n                content,\n                length: modelContent.length,\n                offset: 0\n            }];\n    }\n    getFormattingOptions(model) {\n        const { insertSpaces, tabSize } = model.getOptions();\n        const eol = model.getEOL();\n        return { insertSpaces, tabSize, eol };\n    }\n    async onError(error, operation, scopes) {\n        switch (error.code) {\n            case 11 :\n                this.onInvalidConfigurationError(error, operation);\n                break;\n            case 9 :\n                this.onConfigurationFileDirtyError(error, operation, scopes);\n                break;\n            case 10 :\n                return this.doWriteConfiguration(operation, { scopes, handleDirtyFile: 'revert' });\n            default:\n                this.notificationService.error(error.message);\n        }\n    }\n    onInvalidConfigurationError(error, operation) {\n        const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? ( nls.localize('openTasksConfiguration', \"Open Tasks Configuration\"))\n            : operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? ( nls.localize('openLaunchConfiguration', \"Open Launch Configuration\"))\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: openStandAloneConfigurationActionLabel,\n                    run: () => this.openFile(operation.resource)\n                }]);\n        }\n        else {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('open', \"Open Settings\")),\n                    run: () => this.openSettings(operation)\n                }]);\n        }\n    }\n    onConfigurationFileDirtyError(error, operation, scopes) {\n        const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? ( nls.localize('openTasksConfiguration', \"Open Tasks Configuration\"))\n            : operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? ( nls.localize('openLaunchConfiguration', \"Open Launch Configuration\"))\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('saveAndRetry', \"Save and Retry\")),\n                    run: () => {\n                        const key = operation.key ? `${operation.workspaceStandAloneConfigurationKey}.${operation.key}` : operation.workspaceStandAloneConfigurationKey;\n                        this.writeConfiguration(operation.target, { key, value: operation.value }, { handleDirtyFile: 'save', scopes });\n                    }\n                },\n                {\n                    label: openStandAloneConfigurationActionLabel,\n                    run: () => this.openFile(operation.resource)\n                }]);\n        }\n        else {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('saveAndRetry', \"Save and Retry\")),\n                    run: () => this.writeConfiguration(operation.target, { key: operation.key, value: operation.value }, { handleDirtyFile: 'save', scopes })\n                },\n                {\n                    label: ( nls.localize('open', \"Open Settings\")),\n                    run: () => this.openSettings(operation)\n                }]);\n        }\n    }\n    openSettings(operation) {\n        const options = { jsonEditor: true };\n        switch (operation.target) {\n            case 1 :\n                this.preferencesService.openUserSettings(options);\n                break;\n            case 2 :\n                this.preferencesService.openRemoteSettings(options);\n                break;\n            case 3 :\n                this.preferencesService.openWorkspaceSettings(options);\n                break;\n            case 4 :\n                if (operation.resource) {\n                    const workspaceFolder = this.contextService.getWorkspaceFolder(operation.resource);\n                    if (workspaceFolder) {\n                        this.preferencesService.openFolderSettings({ folderUri: workspaceFolder.uri, jsonEditor: true });\n                    }\n                }\n                break;\n        }\n    }\n    openFile(resource) {\n        this.editorService.openEditor({ resource, options: { pinned: true } });\n    }\n    toConfigurationEditingError(code, target, operation) {\n        const message = this.toErrorMessage(code, target, operation);\n        return ( new ConfigurationEditingError(message, code));\n    }\n    toErrorMessage(error, target, operation) {\n        switch (error) {\n            case 12 : return ( nls.localize(\n                'errorPolicyConfiguration',\n                \"Unable to write {0} because it is configured in system policy.\",\n                operation.key\n            ));\n            case 0 : return ( nls.localize(\n                'errorUnknownKey',\n                \"Unable to write to {0} because {1} is not a registered configuration.\",\n                this.stringifyTarget(target),\n                operation.key\n            ));\n            case 1 : return ( nls.localize(\n                'errorInvalidWorkspaceConfigurationApplication',\n                \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\",\n                operation.key\n            ));\n            case 2 : return ( nls.localize(\n                'errorInvalidWorkspaceConfigurationMachine',\n                \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\",\n                operation.key\n            ));\n            case 3 : return ( nls.localize(\n                'errorInvalidFolderConfiguration',\n                \"Unable to write to Folder Settings because {0} does not support the folder resource scope.\",\n                operation.key\n            ));\n            case 4 : return ( nls.localize(\n                'errorInvalidUserTarget',\n                \"Unable to write to User Settings because {0} does not support for global scope.\",\n                operation.key\n            ));\n            case 5 : return ( nls.localize(\n                'errorInvalidWorkspaceTarget',\n                \"Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.\",\n                operation.key\n            ));\n            case 6 : return ( nls.localize(\n                'errorInvalidFolderTarget',\n                \"Unable to write to Folder Settings because no resource is provided.\"\n            ));\n            case 7 : return ( nls.localize(\n                'errorInvalidResourceLanguageConfiguration',\n                \"Unable to write to Language Settings because {0} is not a resource language setting.\",\n                operation.key\n            ));\n            case 8 : return ( nls.localize(\n                'errorNoWorkspaceOpened',\n                \"Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.\",\n                this.stringifyTarget(target)\n            ));\n            case 11 : {\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorInvalidTaskConfiguration',\n                        \"Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorInvalidLaunchConfiguration',\n                        \"Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorInvalidConfiguration',\n                            \"Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorInvalidRemoteConfiguration',\n                            \"Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorInvalidConfigurationWorkspace',\n                            \"Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.\"\n                        ));\n                    case 4 : {\n                        let workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            const folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return ( nls.localize(\n                            'errorInvalidConfigurationFolder',\n                            \"Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.\",\n                            workspaceFolderName\n                        ));\n                    }\n                    default:\n                        return '';\n                }\n            }\n            case 9 : {\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorTasksConfigurationFileDirty',\n                        \"Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorLaunchConfigurationFileDirty',\n                        \"Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorConfigurationFileDirty',\n                            \"Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorRemoteConfigurationFileDirty',\n                            \"Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorConfigurationFileDirtyWorkspace',\n                            \"Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again.\"\n                        ));\n                    case 4 : {\n                        let workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            const folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return ( nls.localize(\n                            'errorConfigurationFileDirtyFolder',\n                            \"Unable to write into folder settings because the file has unsaved changes. Please save the '{0}' folder settings file first and then try again.\",\n                            workspaceFolderName\n                        ));\n                    }\n                    default:\n                        return '';\n                }\n            }\n            case 10 :\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorTasksConfigurationFileModifiedSince',\n                        \"Unable to write into tasks configuration file because the content of the file is newer.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorLaunchConfigurationFileModifiedSince',\n                        \"Unable to write into launch configuration file because the content of the file is newer.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSince',\n                            \"Unable to write into user settings because the content of the file is newer.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorRemoteConfigurationFileModifiedSince',\n                            \"Unable to write into remote user settings because the content of the file is newer.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSinceWorkspace',\n                            \"Unable to write into workspace settings because the content of the file is newer.\"\n                        ));\n                    case 4 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSinceFolder',\n                            \"Unable to write into folder settings because the content of the file is newer.\"\n                        ));\n                }\n            case 13 : return ( nls.localize(\n                'errorUnknown',\n                \"Unable to write to {0} because of an internal error.\",\n                this.stringifyTarget(target)\n            ));\n        }\n    }\n    stringifyTarget(target) {\n        switch (target) {\n            case 1 :\n                return ( nls.localize('userTarget', \"User Settings\"));\n            case 2 :\n                return ( nls.localize('remoteUserTarget', \"Remote User Settings\"));\n            case 3 :\n                return ( nls.localize('workspaceTarget', \"Workspace Settings\"));\n            case 4 :\n                return ( nls.localize('folderTarget', \"Folder Settings\"));\n            default:\n                return '';\n        }\n    }\n    defaultResourceValue(resource) {\n        const basename = this.uriIdentityService.extUri.basename(resource);\n        const configurationValue = basename.substr(0, basename.length - this.uriIdentityService.extUri.extname(resource).length);\n        switch (configurationValue) {\n            case TASKS_CONFIGURATION_KEY: return TASKS_DEFAULT;\n            default: return '{}';\n        }\n    }\n    async resolveModelReference(resource) {\n        const exists = await this.fileService.exists(resource);\n        if (!exists) {\n            await this.textFileService.write(resource, this.defaultResourceValue(resource), { encoding: 'utf8' });\n        }\n        return this.textModelResolverService.createModelReference(resource);\n    }\n    hasParseErrors(content, operation) {\n        if (operation.workspaceStandAloneConfigurationKey && !operation.key) {\n            return false;\n        }\n        const parseErrors = [];\n        json.parse(content, parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n        return parseErrors.length > 0;\n    }\n    async validate(target, operation, checkDirty, overrides) {\n        if (this.configurationService.inspect(operation.key).policyValue !== undefined) {\n            throw this.toConfigurationEditingError(12 , target, operation);\n        }\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const configurationScope = configurationProperties[operation.key]?.scope;\n        if (!operation.workspaceStandAloneConfigurationKey) {\n            const validKeys = ( this.configurationService.keys()).default;\n            if (validKeys.indexOf(operation.key) < 0 && !OVERRIDE_PROPERTY_REGEX.test(operation.key) && operation.value !== undefined) {\n                throw this.toConfigurationEditingError(0 , target, operation);\n            }\n        }\n        if (operation.workspaceStandAloneConfigurationKey) {\n            if ((operation.workspaceStandAloneConfigurationKey !== TASKS_CONFIGURATION_KEY) && ((target === 1  || target === 2) )) {\n                throw this.toConfigurationEditingError(4 , target, operation);\n            }\n        }\n        if (((target === 3  || target === 4) ) && this.contextService.getWorkbenchState() === 1 ) {\n            throw this.toConfigurationEditingError(8 , target, operation);\n        }\n        if (target === 3 ) {\n            if (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n                if (configurationScope === 1 ) {\n                    throw this.toConfigurationEditingError(1 , target, operation);\n                }\n                if (configurationScope === 2 ) {\n                    throw this.toConfigurationEditingError(2 , target, operation);\n                }\n            }\n        }\n        if (target === 4 ) {\n            if (!operation.resource) {\n                throw this.toConfigurationEditingError(6 , target, operation);\n            }\n            if (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n                if (configurationScope !== undefined && !FOLDER_SCOPES.includes(configurationScope)) {\n                    throw this.toConfigurationEditingError(3 , target, operation);\n                }\n            }\n        }\n        if (overrides.overrideIdentifiers?.length) {\n            if (configurationScope !== 5 ) {\n                throw this.toConfigurationEditingError(7 , target, operation);\n            }\n        }\n        if (!operation.resource) {\n            throw this.toConfigurationEditingError(6 , target, operation);\n        }\n        if (checkDirty && this.textFileService.isDirty(operation.resource)) {\n            throw this.toConfigurationEditingError(9 , target, operation);\n        }\n    }\n    getConfigurationEditOperation(target, config, overrides) {\n        if (config.key) {\n            const standaloneConfigurationMap = target === 1  ? USER_STANDALONE_CONFIGURATIONS : WORKSPACE_STANDALONE_CONFIGURATIONS;\n            const standaloneConfigurationKeys = ( Object.keys(standaloneConfigurationMap));\n            for (const key of standaloneConfigurationKeys) {\n                const resource = this.getConfigurationFileResource(target, key, standaloneConfigurationMap[key], overrides.resource, undefined);\n                if (config.key === key) {\n                    const jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key] : [];\n                    return { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: resource ?? undefined, workspaceStandAloneConfigurationKey: key, target };\n                }\n                const keyPrefix = `${key}.`;\n                if (config.key.indexOf(keyPrefix) === 0) {\n                    const jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key, config.key.substr(keyPrefix.length)] : [config.key.substr(keyPrefix.length)];\n                    return { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: resource ?? undefined, workspaceStandAloneConfigurationKey: key, target };\n                }\n            }\n        }\n        const key = config.key;\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const configurationScope = configurationProperties[key]?.scope;\n        let jsonPath = overrides.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key];\n        if (target === 1  || target === 2 ) {\n            return { key, jsonPath, value: config.value, resource: this.getConfigurationFileResource(target, key, '', null, configurationScope) ?? undefined, target };\n        }\n        const resource = this.getConfigurationFileResource(target, key, FOLDER_SETTINGS_PATH, overrides.resource, configurationScope);\n        if (this.isWorkspaceConfigurationResource(resource)) {\n            jsonPath = ['settings', ...jsonPath];\n        }\n        return { key, jsonPath, value: config.value, resource: resource ?? undefined, target };\n    }\n    isWorkspaceConfigurationResource(resource) {\n        const workspace = this.contextService.getWorkspace();\n        return !!(workspace.configuration && resource && workspace.configuration.fsPath === resource.fsPath);\n    }\n    getConfigurationFileResource(target, key, relativePath, resource, scope) {\n        if (target === 1 ) {\n            if (key === TASKS_CONFIGURATION_KEY) {\n                return this.userDataProfileService.currentProfile.tasksResource;\n            }\n            else {\n                if (!this.userDataProfileService.currentProfile.isDefault && this.configurationService.isSettingAppliedForAllProfiles(key)) {\n                    return this.userDataProfilesService.defaultProfile.settingsResource;\n                }\n                return this.userDataProfileService.currentProfile.settingsResource;\n            }\n        }\n        if (target === 2 ) {\n            return this.remoteSettingsResource;\n        }\n        const workbenchState = this.contextService.getWorkbenchState();\n        if (workbenchState !== 1 ) {\n            const workspace = this.contextService.getWorkspace();\n            if (target === 3 ) {\n                if (workbenchState === 3 ) {\n                    return workspace.configuration ?? null;\n                }\n                if (workbenchState === 2 ) {\n                    return workspace.folders[0].toResource(relativePath);\n                }\n            }\n            if (target === 4 ) {\n                if (resource) {\n                    const folder = this.contextService.getWorkspaceFolder(resource);\n                    if (folder) {\n                        return folder.toResource(relativePath);\n                    }\n                }\n            }\n        }\n        return null;\n    }\n};\nConfigurationEditing = ( __decorate([\n    ( __param(1, IWorkbenchConfigurationService)),\n    ( __param(2, IWorkspaceContextService)),\n    ( __param(3, IUserDataProfileService)),\n    ( __param(4, IUserDataProfilesService)),\n    ( __param(5, IFileService)),\n    ( __param(6, ITextModelService)),\n    ( __param(7, ITextFileService)),\n    ( __param(8, INotificationService)),\n    ( __param(9, IPreferencesService)),\n    ( __param(10, IEditorService)),\n    ( __param(11, IUriIdentityService))\n], ConfigurationEditing));\nexport { ConfigurationEditing, ConfigurationEditingError };\n", "import { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport * as errors from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { Disposable, MutableDisposable, combinedDisposable, toDisposable, DisposableStore, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { whenProviderRegistered } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { UserSettings, ConfigurationModelParser, ConfigurationModel } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { WorkspaceConfigurationModelParser, StandaloneConfigurationModelParser } from '../common/configurationModels.js';\nimport { APPLY_ALL_PROFILES_SETTING, REMOTE_MACHINE_SCOPES, WORKSPACE_SCOPES, FOLDER_SCOPES, FOLDER_SETTINGS_NAME, TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY } from '../common/configuration.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { hash } from 'monaco-editor/esm/vs/base/common/hash.js';\nimport { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { isEmptyObject, isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { DefaultConfiguration as DefaultConfiguration$1 } from 'monaco-editor/esm/vs/platform/configuration/common/configurations.js';\nclass DefaultConfiguration extends DefaultConfiguration$1 {\n    static { this.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY = 'DefaultOverridesCacheExists'; }\n    constructor(configurationCache, environmentService) {\n        super();\n        this.configurationCache = configurationCache;\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.cachedConfigurationDefaultsOverrides = {};\n        this.cacheKey = { type: 'defaults', key: 'configurationDefaultsOverrides' };\n        this.updateCache = false;\n        if (environmentService.options?.configurationDefaults) {\n            this.configurationRegistry.registerDefaultConfigurations([{ overrides: environmentService.options.configurationDefaults }]);\n        }\n    }\n    getConfigurationDefaultOverrides() {\n        return this.cachedConfigurationDefaultsOverrides;\n    }\n    async initialize() {\n        await this.initializeCachedConfigurationDefaultsOverrides();\n        return super.initialize();\n    }\n    reload() {\n        this.updateCache = true;\n        this.cachedConfigurationDefaultsOverrides = {};\n        this.updateCachedConfigurationDefaultsOverrides();\n        return super.reload();\n    }\n    hasCachedConfigurationDefaultsOverrides() {\n        return !isEmptyObject(this.cachedConfigurationDefaultsOverrides);\n    }\n    initializeCachedConfigurationDefaultsOverrides() {\n        if (!this.initiaizeCachedConfigurationDefaultsOverridesPromise) {\n            this.initiaizeCachedConfigurationDefaultsOverridesPromise = (async () => {\n                try {\n                    if (window.localStorage.getItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY)) {\n                        const content = await this.configurationCache.read(this.cacheKey);\n                        if (content) {\n                            this.cachedConfigurationDefaultsOverrides = JSON.parse(content);\n                        }\n                    }\n                }\n                catch (error) {  }\n                this.cachedConfigurationDefaultsOverrides = isObject(this.cachedConfigurationDefaultsOverrides) ? this.cachedConfigurationDefaultsOverrides : {};\n            })();\n        }\n        return this.initiaizeCachedConfigurationDefaultsOverridesPromise;\n    }\n    onDidUpdateConfiguration(properties, defaultsOverrides) {\n        super.onDidUpdateConfiguration(properties, defaultsOverrides);\n        if (defaultsOverrides) {\n            this.updateCachedConfigurationDefaultsOverrides();\n        }\n    }\n    async updateCachedConfigurationDefaultsOverrides() {\n        if (!this.updateCache) {\n            return;\n        }\n        const cachedConfigurationDefaultsOverrides = {};\n        const configurationDefaultsOverrides = this.configurationRegistry.getConfigurationDefaultsOverrides();\n        for (const [key, value] of configurationDefaultsOverrides) {\n            if (!OVERRIDE_PROPERTY_REGEX.test(key) && value.value !== undefined) {\n                cachedConfigurationDefaultsOverrides[key] = value.value;\n            }\n        }\n        try {\n            if (( (Object.keys(cachedConfigurationDefaultsOverrides))).length) {\n                window.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n                await this.configurationCache.write(this.cacheKey, JSON.stringify(cachedConfigurationDefaultsOverrides));\n            }\n            else {\n                window.localStorage.removeItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY);\n                await this.configurationCache.remove(this.cacheKey);\n            }\n        }\n        catch (error) {  }\n    }\n}\nclass ApplicationConfiguration extends UserSettings {\n    constructor(userDataProfilesService, fileService, uriIdentityService) {\n        super(userDataProfilesService.defaultProfile.settingsResource, { scopes: [1 ] }, uriIdentityService.extUri, fileService);\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._register(this.onDidChange(() => this.reloadConfigurationScheduler.schedule()));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n    }\n    async initialize() {\n        return this.loadConfiguration();\n    }\n    async loadConfiguration() {\n        const model = await super.loadConfiguration();\n        const value = model.getValue(APPLY_ALL_PROFILES_SETTING);\n        const allProfilesSettings = Array.isArray(value) ? value : [];\n        return this.parseOptions.include || allProfilesSettings.length\n            ? this.reparse({ ...this.parseOptions, include: allProfilesSettings })\n            : model;\n    }\n}\nclass UserConfiguration extends Disposable {\n    get hasTasksLoaded() { return this.userConfiguration.value instanceof FileServiceBasedConfiguration; }\n    constructor(settingsResource, tasksResource, configurationParseOptions, fileService, uriIdentityService, logService) {\n        super();\n        this.settingsResource = settingsResource;\n        this.tasksResource = tasksResource;\n        this.configurationParseOptions = configurationParseOptions;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this.userConfiguration = this._register(( (new MutableDisposable())));\n        this.userConfigurationChangeDisposable = this._register(( (new MutableDisposable())));\n        this.userConfiguration.value = ( (new UserSettings(\n            settingsResource,\n            this.configurationParseOptions,\n            uriIdentityService.extUri,\n            this.fileService\n        )));\n        this.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.userConfiguration.value.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n    }\n    async reset(settingsResource, tasksResource, configurationParseOptions) {\n        this.settingsResource = settingsResource;\n        this.tasksResource = tasksResource;\n        this.configurationParseOptions = configurationParseOptions;\n        const folder = this.uriIdentityService.extUri.dirname(this.settingsResource);\n        const standAloneConfigurationResources = this.tasksResource ? [[TASKS_CONFIGURATION_KEY, this.tasksResource]] : [];\n        const fileServiceBasedConfiguration = ( (new FileServiceBasedConfiguration(\n             (folder.toString()),\n            this.settingsResource,\n            standAloneConfigurationResources,\n            this.configurationParseOptions,\n            this.fileService,\n            this.uriIdentityService,\n            this.logService\n        )));\n        const configurationModel = await fileServiceBasedConfiguration.loadConfiguration();\n        this.userConfiguration.value = fileServiceBasedConfiguration;\n        if (this.userConfigurationChangeDisposable.value) {\n            this.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n        }\n        return configurationModel;\n    }\n    async initialize() {\n        return this.userConfiguration.value.loadConfiguration();\n    }\n    async reload() {\n        if (this.hasTasksLoaded) {\n            return this.userConfiguration.value.loadConfiguration();\n        }\n        return this.reset(this.settingsResource, this.tasksResource, this.configurationParseOptions);\n    }\n    reparse(parseOptions) {\n        this.configurationParseOptions = { ...this.configurationParseOptions, ...parseOptions };\n        return this.userConfiguration.value.reparse(this.configurationParseOptions);\n    }\n    getRestrictedSettings() {\n        return this.userConfiguration.value.getRestrictedSettings();\n    }\n}\nclass FileServiceBasedConfiguration extends Disposable {\n    constructor(name, settingsResource, standAloneConfigurationResources, configurationParseOptions, fileService, uriIdentityService, logService) {\n        super();\n        this.settingsResource = settingsResource;\n        this.standAloneConfigurationResources = standAloneConfigurationResources;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.allResources = [this.settingsResource, ...( (this.standAloneConfigurationResources.map(([, resource]) => resource)))];\n        this._register(combinedDisposable(...( (this.allResources.map(\n            resource => combinedDisposable(this.fileService.watch(uriIdentityService.extUri.dirname(resource)),\n            this.fileService.watch(resource))\n        )))));\n        this._folderSettingsModelParser = ( (new ConfigurationModelParser(name)));\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._standAloneConfigurations = [];\n        this._cache = ( (new ConfigurationModel()));\n        this._register(Event.debounce(Event.any(Event.filter(this.fileService.onDidFilesChange, e => this.handleFileChangesEvent(e)), Event.filter(this.fileService.onDidRunOperation, e => this.handleFileOperationEvent(e))), () => undefined, 100)(() => this._onDidChange.fire()));\n    }\n    async resolveContents() {\n        const resolveContents = async (resources) => {\n            return Promise.all(( (resources.map(async (resource) => {\n                try {\n                    const content = await this.fileService.readFile(resource, { atomic: true });\n                    return (\n                         (content.value.toString())\n                    );\n                }\n                catch (error) {\n                    this.logService.trace(`Error while resolving configuration file '${( ( resource.toString()))}': ${errors.getErrorMessage(error)}`);\n                    if (error.fileOperationResult !== 1\n                        && error.fileOperationResult !== 9 ) {\n                        this.logService.error(error);\n                    }\n                }\n                return '{}';\n            }))));\n        };\n        const [[settingsContent], standAloneConfigurationContents] = await Promise.all([\n            resolveContents([this.settingsResource]),\n            resolveContents(( (this.standAloneConfigurationResources.map(([, resource]) => resource)))),\n        ]);\n        return [settingsContent, ( (standAloneConfigurationContents.map(\n            (content, index) => ([this.standAloneConfigurationResources[index][0], content])\n        )))];\n    }\n    async loadConfiguration() {\n        const [settingsContent, standAloneConfigurationContents] = await this.resolveContents();\n        this._standAloneConfigurations = [];\n        this._folderSettingsModelParser.parse('', this._folderSettingsParseOptions);\n        if (settingsContent !== undefined) {\n            this._folderSettingsModelParser.parse(settingsContent, this._folderSettingsParseOptions);\n        }\n        for (let index = 0; index < standAloneConfigurationContents.length; index++) {\n            const contents = standAloneConfigurationContents[index][1];\n            if (contents !== undefined) {\n                const standAloneConfigurationModelParser = ( (new StandaloneConfigurationModelParser(\n                     (this.standAloneConfigurationResources[index][1].toString()),\n                    this.standAloneConfigurationResources[index][0]\n                )));\n                standAloneConfigurationModelParser.parse(contents);\n                this._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n            }\n        }\n        this.consolidate();\n        return this._cache;\n    }\n    getRestrictedSettings() {\n        return this._folderSettingsModelParser.restrictedConfigurations;\n    }\n    reparse(configurationParseOptions) {\n        const oldContents = this._folderSettingsModelParser.configurationModel.contents;\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n        if (!equals(oldContents, this._folderSettingsModelParser.configurationModel.contents)) {\n            this.consolidate();\n        }\n        return this._cache;\n    }\n    consolidate() {\n        this._cache = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n    }\n    handleFileChangesEvent(event) {\n        if (( (this.allResources.some(resource => event.contains(resource))))) {\n            return true;\n        }\n        if (( (this.allResources.some(\n            resource => event.contains(this.uriIdentityService.extUri.dirname(resource), 2 )\n        )))) {\n            return true;\n        }\n        return false;\n    }\n    handleFileOperationEvent(event) {\n        if ((event.isOperation(0 ) || event.isOperation(3 ) || event.isOperation(1 ) || event.isOperation(4 ))\n            && ( (this.allResources.some(\n            resource => this.uriIdentityService.extUri.isEqual(event.resource, resource)\n        )))) {\n            return true;\n        }\n        if (event.isOperation(1 ) && ( (this.allResources.some(\n            resource => this.uriIdentityService.extUri.isEqual(event.resource, this.uriIdentityService.extUri.dirname(resource))\n        )))) {\n            return true;\n        }\n        return false;\n    }\n}\nclass RemoteUserConfiguration extends Disposable {\n    constructor(remoteAuthority, configurationCache, fileService, uriIdentityService, remoteAgentService) {\n        super();\n        this._userConfigurationInitializationPromise = null;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._onDidInitialize = this._register(( (new Emitter())));\n        this.onDidInitialize = this._onDidInitialize.event;\n        this._fileService = fileService;\n        this._userConfiguration = this._cachedConfiguration = ( (new CachedRemoteUserConfiguration(remoteAuthority, configurationCache, { scopes: REMOTE_MACHINE_SCOPES })));\n        remoteAgentService.getEnvironment().then(async (environment) => {\n            if (environment) {\n                const userConfiguration = this._register(( (new FileServiceBasedRemoteUserConfiguration(\n                    environment.settingsPath,\n                    { scopes: REMOTE_MACHINE_SCOPES },\n                    this._fileService,\n                    uriIdentityService\n                ))));\n                this._register(userConfiguration.onDidChangeConfiguration(configurationModel => this.onDidUserConfigurationChange(configurationModel)));\n                this._userConfigurationInitializationPromise = userConfiguration.initialize();\n                const configurationModel = await this._userConfigurationInitializationPromise;\n                this._userConfiguration.dispose();\n                this._userConfiguration = userConfiguration;\n                this.onDidUserConfigurationChange(configurationModel);\n                this._onDidInitialize.fire(configurationModel);\n            }\n        });\n    }\n    async initialize() {\n        if (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n            return this._userConfiguration.initialize();\n        }\n        let configurationModel = await this._userConfiguration.initialize();\n        if (this._userConfigurationInitializationPromise) {\n            configurationModel = await this._userConfigurationInitializationPromise;\n            this._userConfigurationInitializationPromise = null;\n        }\n        return configurationModel;\n    }\n    reload() {\n        return this._userConfiguration.reload();\n    }\n    reparse() {\n        return this._userConfiguration.reparse({ scopes: REMOTE_MACHINE_SCOPES });\n    }\n    getRestrictedSettings() {\n        return this._userConfiguration.getRestrictedSettings();\n    }\n    onDidUserConfigurationChange(configurationModel) {\n        this.updateCache();\n        this._onDidChangeConfiguration.fire(configurationModel);\n    }\n    async updateCache() {\n        if (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n            let content;\n            try {\n                content = await this._userConfiguration.resolveContent();\n            }\n            catch (error) {\n                if (error.fileOperationResult !== 1 ) {\n                    return;\n                }\n            }\n            await this._cachedConfiguration.updateConfiguration(content);\n        }\n    }\n}\nclass FileServiceBasedRemoteUserConfiguration extends Disposable {\n    constructor(configurationResource, configurationParseOptions, fileService, uriIdentityService) {\n        super();\n        this.configurationResource = configurationResource;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this.fileWatcherDisposable = Disposable.None;\n        this.directoryWatcherDisposable = Disposable.None;\n        this.parser = ( (new ConfigurationModelParser( (this.configurationResource.toString()))));\n        this.parseOptions = configurationParseOptions;\n        this._register(fileService.onDidFilesChange(e => this.handleFileChangesEvent(e)));\n        this._register(fileService.onDidRunOperation(e => this.handleFileOperationEvent(e)));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.reload().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n        this._register(toDisposable(() => {\n            this.stopWatchingResource();\n            this.stopWatchingDirectory();\n        }));\n    }\n    watchResource() {\n        this.fileWatcherDisposable = this.fileService.watch(this.configurationResource);\n    }\n    stopWatchingResource() {\n        this.fileWatcherDisposable.dispose();\n        this.fileWatcherDisposable = Disposable.None;\n    }\n    watchDirectory() {\n        const directory = this.uriIdentityService.extUri.dirname(this.configurationResource);\n        this.directoryWatcherDisposable = this.fileService.watch(directory);\n    }\n    stopWatchingDirectory() {\n        this.directoryWatcherDisposable.dispose();\n        this.directoryWatcherDisposable = Disposable.None;\n    }\n    async initialize() {\n        const exists = await this.fileService.exists(this.configurationResource);\n        this.onResourceExists(exists);\n        return this.reload();\n    }\n    async resolveContent() {\n        const content = await this.fileService.readFile(this.configurationResource, { atomic: true });\n        return (\n             (content.value.toString())\n        );\n    }\n    async reload() {\n        try {\n            const content = await this.resolveContent();\n            this.parser.parse(content, this.parseOptions);\n            return this.parser.configurationModel;\n        }\n        catch (e) {\n            return (\n                 (new ConfigurationModel())\n            );\n        }\n    }\n    reparse(configurationParseOptions) {\n        this.parseOptions = configurationParseOptions;\n        this.parser.reparse(this.parseOptions);\n        return this.parser.configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.parser.restrictedConfigurations;\n    }\n    handleFileChangesEvent(event) {\n        let affectedByChanges = event.contains(this.configurationResource, 0 );\n        if (event.contains(this.configurationResource, 1 )) {\n            affectedByChanges = true;\n            this.onResourceExists(true);\n        }\n        else if (event.contains(this.configurationResource, 2 )) {\n            affectedByChanges = true;\n            this.onResourceExists(false);\n        }\n        if (affectedByChanges) {\n            this.reloadConfigurationScheduler.schedule();\n        }\n    }\n    handleFileOperationEvent(event) {\n        if ((event.isOperation(0 ) || event.isOperation(3 ) || event.isOperation(1 ) || event.isOperation(4 ))\n            && this.uriIdentityService.extUri.isEqual(event.resource, this.configurationResource)) {\n            this.reloadConfigurationScheduler.schedule();\n        }\n    }\n    onResourceExists(exists) {\n        if (exists) {\n            this.stopWatchingDirectory();\n            this.watchResource();\n        }\n        else {\n            this.stopWatchingResource();\n            this.watchDirectory();\n        }\n    }\n}\nclass CachedRemoteUserConfiguration extends Disposable {\n    constructor(remoteAuthority, configurationCache, configurationParseOptions) {\n        super();\n        this.configurationCache = configurationCache;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.key = { type: 'user', key: remoteAuthority };\n        this.parser = ( (new ConfigurationModelParser('CachedRemoteUserConfiguration')));\n        this.parseOptions = configurationParseOptions;\n        this.configurationModel = ( (new ConfigurationModel()));\n    }\n    getConfigurationModel() {\n        return this.configurationModel;\n    }\n    initialize() {\n        return this.reload();\n    }\n    reparse(configurationParseOptions) {\n        this.parseOptions = configurationParseOptions;\n        this.parser.reparse(this.parseOptions);\n        this.configurationModel = this.parser.configurationModel;\n        return this.configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.parser.restrictedConfigurations;\n    }\n    async reload() {\n        try {\n            const content = await this.configurationCache.read(this.key);\n            const parsed = JSON.parse(content);\n            if (parsed.content) {\n                this.parser.parse(parsed.content, this.parseOptions);\n                this.configurationModel = this.parser.configurationModel;\n            }\n        }\n        catch (e) {  }\n        return this.configurationModel;\n    }\n    async updateConfiguration(content) {\n        if (content) {\n            return this.configurationCache.write(this.key, JSON.stringify({ content }));\n        }\n        else {\n            return this.configurationCache.remove(this.key);\n        }\n    }\n}\nclass WorkspaceConfiguration extends Disposable {\n    get initialized() { return this._initialized; }\n    constructor(configurationCache, fileService, uriIdentityService, logService) {\n        super();\n        this.configurationCache = configurationCache;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._workspaceConfigurationDisposables = this._register(( (new DisposableStore())));\n        this._workspaceIdentifier = null;\n        this._isWorkspaceTrusted = false;\n        this._onDidUpdateConfiguration = this._register(( (new Emitter())));\n        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n        this._initialized = false;\n        this.fileService = fileService;\n        this._workspaceConfiguration = this._cachedConfiguration = ( (new CachedWorkspaceConfiguration(configurationCache)));\n    }\n    async initialize(workspaceIdentifier, workspaceTrusted) {\n        this._workspaceIdentifier = workspaceIdentifier;\n        this._isWorkspaceTrusted = workspaceTrusted;\n        if (!this._initialized) {\n            if (this.configurationCache.needsCaching(this._workspaceIdentifier.configPath)) {\n                this._workspaceConfiguration = this._cachedConfiguration;\n                this.waitAndInitialize(this._workspaceIdentifier);\n            }\n            else {\n                this.doInitialize(( (new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService))));\n            }\n        }\n        await this.reload();\n    }\n    async reload() {\n        if (this._workspaceIdentifier) {\n            await this._workspaceConfiguration.load(this._workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n        }\n    }\n    getFolders() {\n        return this._workspaceConfiguration.getFolders();\n    }\n    setFolders(folders, jsonEditingService) {\n        if (this._workspaceIdentifier) {\n            return jsonEditingService.write(this._workspaceIdentifier.configPath, [{ path: ['folders'], value: folders }], true)\n                .then(() => this.reload());\n        }\n        return Promise.resolve();\n    }\n    isTransient() {\n        return this._workspaceConfiguration.isTransient();\n    }\n    getConfiguration() {\n        return this._workspaceConfiguration.getWorkspaceSettings();\n    }\n    updateWorkspaceTrust(trusted) {\n        this._isWorkspaceTrusted = trusted;\n        return this.reparseWorkspaceSettings();\n    }\n    reparseWorkspaceSettings() {\n        this._workspaceConfiguration.reparseWorkspaceSettings({ scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n        return this.getConfiguration();\n    }\n    getRestrictedSettings() {\n        return this._workspaceConfiguration.getRestrictedSettings();\n    }\n    async waitAndInitialize(workspaceIdentifier) {\n        await whenProviderRegistered(workspaceIdentifier.configPath, this.fileService);\n        if (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {\n            const fileServiceBasedWorkspaceConfiguration = this._register(( (new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService))));\n            await fileServiceBasedWorkspaceConfiguration.load(workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n            this.doInitialize(fileServiceBasedWorkspaceConfiguration);\n            this.onDidWorkspaceConfigurationChange(false, true);\n        }\n    }\n    doInitialize(fileServiceBasedWorkspaceConfiguration) {\n        this._workspaceConfigurationDisposables.clear();\n        this._workspaceConfiguration = this._workspaceConfigurationDisposables.add(fileServiceBasedWorkspaceConfiguration);\n        this._workspaceConfigurationDisposables.add(this._workspaceConfiguration.onDidChange(e => this.onDidWorkspaceConfigurationChange(true, false)));\n        this._initialized = true;\n    }\n    isUntrusted() {\n        return !this._isWorkspaceTrusted;\n    }\n    async onDidWorkspaceConfigurationChange(reload, fromCache) {\n        if (reload) {\n            await this.reload();\n        }\n        this.updateCache();\n        this._onDidUpdateConfiguration.fire(fromCache);\n    }\n    async updateCache() {\n        if (this._workspaceIdentifier && this.configurationCache.needsCaching(this._workspaceIdentifier.configPath) && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {\n            const content = await this._workspaceConfiguration.resolveContent(this._workspaceIdentifier);\n            await this._cachedConfiguration.updateWorkspace(this._workspaceIdentifier, content);\n        }\n    }\n}\nclass FileServiceBasedWorkspaceConfiguration extends Disposable {\n    constructor(fileService, uriIdentityService, logService) {\n        super();\n        this.fileService = fileService;\n        this.logService = logService;\n        this._workspaceIdentifier = null;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser('')));\n        this.workspaceSettings = ( (new ConfigurationModel()));\n        this._register(Event.any(Event.filter(this.fileService.onDidFilesChange, e => !!this._workspaceIdentifier && e.contains(this._workspaceIdentifier.configPath)), Event.filter(this.fileService.onDidRunOperation, e => !!this._workspaceIdentifier && (e.isOperation(0 ) || e.isOperation(3 ) || e.isOperation(1 ) || e.isOperation(4 )) && uriIdentityService.extUri.isEqual(e.resource, this._workspaceIdentifier.configPath)))(() => this.reloadConfigurationScheduler.schedule()));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(() => this._onDidChange.fire(), 50))));\n        this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n    }\n    get workspaceIdentifier() {\n        return this._workspaceIdentifier;\n    }\n    async resolveContent(workspaceIdentifier) {\n        const content = await this.fileService.readFile(workspaceIdentifier.configPath, { atomic: true });\n        return (\n             (content.value.toString())\n        );\n    }\n    async load(workspaceIdentifier, configurationParseOptions) {\n        if (!this._workspaceIdentifier || this._workspaceIdentifier.id !== workspaceIdentifier.id) {\n            this._workspaceIdentifier = workspaceIdentifier;\n            this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser(this._workspaceIdentifier.id)));\n            dispose(this.workspaceConfigWatcher);\n            this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n        }\n        let contents = '';\n        try {\n            contents = await this.resolveContent(this._workspaceIdentifier);\n        }\n        catch (error) {\n            const exists = await this.fileService.exists(this._workspaceIdentifier.configPath);\n            if (exists) {\n                this.logService.error(error);\n            }\n        }\n        this.workspaceConfigurationModelParser.parse(contents, configurationParseOptions);\n        this.consolidate();\n    }\n    getConfigurationModel() {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    }\n    getFolders() {\n        return this.workspaceConfigurationModelParser.folders;\n    }\n    isTransient() {\n        return this.workspaceConfigurationModelParser.transient;\n    }\n    getWorkspaceSettings() {\n        return this.workspaceSettings;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n        this.consolidate();\n        return this.getWorkspaceSettings();\n    }\n    getRestrictedSettings() {\n        return this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n    }\n    consolidate() {\n        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n    }\n    watchWorkspaceConfigurationFile() {\n        return this._workspaceIdentifier ? this.fileService.watch(this._workspaceIdentifier.configPath) : Disposable.None;\n    }\n}\nclass CachedWorkspaceConfiguration {\n    constructor(configurationCache) {\n        this.configurationCache = configurationCache;\n        this.onDidChange = Event.None;\n        this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser('')));\n        this.workspaceSettings = ( (new ConfigurationModel()));\n    }\n    async load(workspaceIdentifier, configurationParseOptions) {\n        try {\n            const key = this.getKey(workspaceIdentifier);\n            const contents = await this.configurationCache.read(key);\n            const parsed = JSON.parse(contents);\n            if (parsed.content) {\n                this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser(key.key)));\n                this.workspaceConfigurationModelParser.parse(parsed.content, configurationParseOptions);\n                this.consolidate();\n            }\n        }\n        catch (e) {\n        }\n    }\n    get workspaceIdentifier() {\n        return null;\n    }\n    getConfigurationModel() {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    }\n    getFolders() {\n        return this.workspaceConfigurationModelParser.folders;\n    }\n    isTransient() {\n        return this.workspaceConfigurationModelParser.transient;\n    }\n    getWorkspaceSettings() {\n        return this.workspaceSettings;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n        this.consolidate();\n        return this.getWorkspaceSettings();\n    }\n    getRestrictedSettings() {\n        return this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n    }\n    consolidate() {\n        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n    }\n    async updateWorkspace(workspaceIdentifier, content) {\n        try {\n            const key = this.getKey(workspaceIdentifier);\n            if (content) {\n                await this.configurationCache.write(key, JSON.stringify({ content }));\n            }\n            else {\n                await this.configurationCache.remove(key);\n            }\n        }\n        catch (error) {\n        }\n    }\n    getKey(workspaceIdentifier) {\n        return {\n            type: 'workspaces',\n            key: workspaceIdentifier.id\n        };\n    }\n}\nclass CachedFolderConfiguration {\n    constructor(folder, configFolderRelativePath, configurationParseOptions, configurationCache) {\n        this.configurationCache = configurationCache;\n        this.onDidChange = Event.None;\n        this.key = { type: 'folder', key: ( (hash(( (joinPath(folder, configFolderRelativePath).toString()))).toString(16))) };\n        this._folderSettingsModelParser = ( (new ConfigurationModelParser('CachedFolderConfiguration')));\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._standAloneConfigurations = [];\n        this.configurationModel = ( (new ConfigurationModel()));\n    }\n    async loadConfiguration() {\n        try {\n            const contents = await this.configurationCache.read(this.key);\n            const { content: configurationContents } = JSON.parse(( (contents.toString())));\n            if (configurationContents) {\n                for (const key of ( (Object.keys(configurationContents)))) {\n                    if (key === FOLDER_SETTINGS_NAME) {\n                        this._folderSettingsModelParser.parse(configurationContents[key], this._folderSettingsParseOptions);\n                    }\n                    else {\n                        const standAloneConfigurationModelParser = ( (new StandaloneConfigurationModelParser(key, key)));\n                        standAloneConfigurationModelParser.parse(configurationContents[key]);\n                        this._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n                    }\n                }\n            }\n            this.consolidate();\n        }\n        catch (e) {\n        }\n        return this.configurationModel;\n    }\n    async updateConfiguration(settingsContent, standAloneConfigurationContents) {\n        const content = {};\n        if (settingsContent) {\n            content[FOLDER_SETTINGS_NAME] = settingsContent;\n        }\n        standAloneConfigurationContents.forEach(([key, contents]) => {\n            if (contents) {\n                content[key] = contents;\n            }\n        });\n        if (( (Object.keys(content))).length) {\n            await this.configurationCache.write(this.key, JSON.stringify({ content }));\n        }\n        else {\n            await this.configurationCache.remove(this.key);\n        }\n    }\n    getRestrictedSettings() {\n        return this._folderSettingsModelParser.restrictedConfigurations;\n    }\n    reparse(configurationParseOptions) {\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n        this.consolidate();\n        return this.configurationModel;\n    }\n    consolidate() {\n        this.configurationModel = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n    }\n    getUnsupportedKeys() {\n        return [];\n    }\n}\nclass FolderConfiguration extends Disposable {\n    constructor(useCache, workspaceFolder, configFolderRelativePath, workbenchState, workspaceTrusted, fileService, uriIdentityService, logService, configurationCache) {\n        super();\n        this.workspaceFolder = workspaceFolder;\n        this.workbenchState = workbenchState;\n        this.workspaceTrusted = workspaceTrusted;\n        this.configurationCache = configurationCache;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.scopes = 3  === this.workbenchState ? FOLDER_SCOPES : WORKSPACE_SCOPES;\n        this.configurationFolder = uriIdentityService.extUri.joinPath(workspaceFolder.uri, configFolderRelativePath);\n        this.cachedFolderConfiguration = ( (new CachedFolderConfiguration(\n            workspaceFolder.uri,\n            configFolderRelativePath,\n            { scopes: this.scopes, skipRestricted: this.isUntrusted() },\n            configurationCache\n        )));\n        if (useCache && this.configurationCache.needsCaching(workspaceFolder.uri)) {\n            this.folderConfiguration = this.cachedFolderConfiguration;\n            whenProviderRegistered(workspaceFolder.uri, fileService)\n                .then(() => {\n                this.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n                this._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n                this.onDidFolderConfigurationChange();\n            });\n        }\n        else {\n            this.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n            this._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n        }\n    }\n    loadConfiguration() {\n        return this.folderConfiguration.loadConfiguration();\n    }\n    updateWorkspaceTrust(trusted) {\n        this.workspaceTrusted = trusted;\n        return this.reparse();\n    }\n    reparse() {\n        const configurationModel = this.folderConfiguration.reparse({ scopes: this.scopes, skipRestricted: this.isUntrusted() });\n        this.updateCache();\n        return configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.folderConfiguration.getRestrictedSettings();\n    }\n    isUntrusted() {\n        return !this.workspaceTrusted;\n    }\n    onDidFolderConfigurationChange() {\n        this.updateCache();\n        this._onDidChange.fire();\n    }\n    createFileServiceBasedConfiguration(fileService, uriIdentityService, logService) {\n        const settingsResource = uriIdentityService.extUri.joinPath(this.configurationFolder, `${FOLDER_SETTINGS_NAME}.json`);\n        const standAloneConfigurationResources = ( ([TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY].map(\n            name => ([name, uriIdentityService.extUri.joinPath(this.configurationFolder, `${name}.json`)])\n        )));\n        return (\n             (new FileServiceBasedConfiguration(\n                 (this.configurationFolder.toString()),\n                settingsResource,\n                standAloneConfigurationResources,\n                { scopes: this.scopes, skipRestricted: this.isUntrusted() },\n                fileService,\n                uriIdentityService,\n                logService\n            ))\n        );\n    }\n    async updateCache() {\n        if (this.configurationCache.needsCaching(this.configurationFolder) && this.folderConfiguration instanceof FileServiceBasedConfiguration) {\n            const [settingsContent, standAloneConfigurationContents] = await this.folderConfiguration.resolveContents();\n            this.cachedFolderConfiguration.updateConfiguration(settingsContent, standAloneConfigurationContents);\n        }\n    }\n}\nexport { ApplicationConfiguration, DefaultConfiguration, FolderConfiguration, RemoteUserConfiguration, UserConfiguration, WorkspaceConfiguration };\n", "import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nlet TextResourceConfigurationService = class TextResourceConfigurationService extends Disposable {\n    constructor(configurationService, modelService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.modelService = modelService;\n        this.languageService = languageService;\n        this._onDidChangeConfiguration = this._register(( new Emitter()));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._register(this.configurationService.onDidChangeConfiguration(e => this._onDidChangeConfiguration.fire(this.toResourceConfigurationChangeEvent(e))));\n    }\n    getValue(resource, arg2, arg3) {\n        if (typeof arg3 === 'string') {\n            return this._getValue(resource, Position.isIPosition(arg2) ? arg2 : null, arg3);\n        }\n        return this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);\n    }\n    updateValue(resource, key, value, configurationTarget) {\n        const language = this.getLanguage(resource, null);\n        const configurationValue = this.configurationService.inspect(key, { resource, overrideIdentifier: language });\n        if (configurationTarget === undefined) {\n            configurationTarget = this.deriveConfigurationTarget(configurationValue, language);\n        }\n        switch (configurationTarget) {\n            case 8 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.memory?.override, resource, language);\n            case 6 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.workspaceFolder?.override, resource, language);\n            case 5 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.workspace?.override, resource, language);\n            case 4 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.userRemote?.override, resource, language);\n            default:\n                return this._updateValue(key, value, configurationTarget, configurationValue.userLocal?.override, resource, language);\n        }\n    }\n    _updateValue(key, value, configurationTarget, overriddenValue, resource, language) {\n        if (language && overriddenValue !== undefined) {\n            return this.configurationService.updateValue(key, value, { resource, overrideIdentifier: language }, configurationTarget);\n        }\n        else {\n            return this.configurationService.updateValue(key, value, { resource }, configurationTarget);\n        }\n    }\n    deriveConfigurationTarget(configurationValue, language) {\n        if (language) {\n            if (configurationValue.memory?.override !== undefined) {\n                return 8 ;\n            }\n            if (configurationValue.workspaceFolder?.override !== undefined) {\n                return 6 ;\n            }\n            if (configurationValue.workspace?.override !== undefined) {\n                return 5 ;\n            }\n            if (configurationValue.userRemote?.override !== undefined) {\n                return 4 ;\n            }\n            if (configurationValue.userLocal?.override !== undefined) {\n                return 3 ;\n            }\n        }\n        if (configurationValue.memory?.value !== undefined) {\n            return 8 ;\n        }\n        if (configurationValue.workspaceFolder?.value !== undefined) {\n            return 6 ;\n        }\n        if (configurationValue.workspace?.value !== undefined) {\n            return 5 ;\n        }\n        if (configurationValue.userRemote?.value !== undefined) {\n            return 4 ;\n        }\n        return 3 ;\n    }\n    _getValue(resource, position, section) {\n        const language = resource ? this.getLanguage(resource, position) : undefined;\n        if (typeof section === 'undefined') {\n            return this.configurationService.getValue({ resource, overrideIdentifier: language });\n        }\n        return this.configurationService.getValue(section, { resource, overrideIdentifier: language });\n    }\n    inspect(resource, position, section) {\n        const language = resource ? this.getLanguage(resource, position) : undefined;\n        return this.configurationService.inspect(section, { resource, overrideIdentifier: language });\n    }\n    getLanguage(resource, position) {\n        const model = this.modelService.getModel(resource);\n        if (model) {\n            return position ? model.getLanguageIdAtPosition(position.lineNumber, position.column) : model.getLanguageId();\n        }\n        return this.languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n    }\n    toResourceConfigurationChangeEvent(configurationChangeEvent) {\n        return {\n            affectedKeys: configurationChangeEvent.affectedKeys,\n            affectsConfiguration: (resource, configuration) => {\n                const overrideIdentifier = resource ? this.getLanguage(resource, null) : undefined;\n                return configurationChangeEvent.affectsConfiguration(configuration, { resource, overrideIdentifier });\n            }\n        };\n    }\n};\nTextResourceConfigurationService = ( __decorate([\n    ( __param(0, IConfigurationService)),\n    ( __param(1, IModelService)),\n    ( __param(2, ILanguageService))\n], TextResourceConfigurationService));\nexport { TextResourceConfigurationService };\n", "var ConfigurationScope;\n( (function(ConfigurationScope) {\n    ConfigurationScope[ConfigurationScope[\"APPLICATION\"] = 1] = \"APPLICATION\";\n    ConfigurationScope[ConfigurationScope[\"MACHINE\"] = 2] = \"MACHINE\";\n    ConfigurationScope[ConfigurationScope[\"WINDOW\"] = 3] = \"WINDOW\";\n    ConfigurationScope[ConfigurationScope[\"RESOURCE\"] = 4] = \"RESOURCE\";\n    ConfigurationScope[ConfigurationScope[\"LANGUAGE_OVERRIDABLE\"] = 5] = \"LANGUAGE_OVERRIDABLE\";\n    ConfigurationScope[ConfigurationScope[\"MACHINE_OVERRIDABLE\"] = 6] = \"MACHINE_OVERRIDABLE\";\n})(ConfigurationScope || (ConfigurationScope = {})));\nexport { ConfigurationScope };\n", "import { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { Queue } from 'monaco-editor/esm/vs/base/common/async.js';\nclass ConfigurationCache {\n    constructor(donotCacheResourcesWithSchemes, environmentService, fileService) {\n        this.donotCacheResourcesWithSchemes = donotCacheResourcesWithSchemes;\n        this.fileService = fileService;\n        this.cachedConfigurations = ( new Map());\n        this.cacheHome = environmentService.cacheHome;\n    }\n    needsCaching(resource) {\n        return !this.donotCacheResourcesWithSchemes.includes(resource.scheme);\n    }\n    read(key) {\n        return this.getCachedConfiguration(key).read();\n    }\n    write(key, content) {\n        return this.getCachedConfiguration(key).save(content);\n    }\n    remove(key) {\n        return this.getCachedConfiguration(key).remove();\n    }\n    getCachedConfiguration({ type, key }) {\n        const k = `${type}:${key}`;\n        let cachedConfiguration = this.cachedConfigurations.get(k);\n        if (!cachedConfiguration) {\n            cachedConfiguration = ( new CachedConfiguration({ type, key }, this.cacheHome, this.fileService));\n            this.cachedConfigurations.set(k, cachedConfiguration);\n        }\n        return cachedConfiguration;\n    }\n}\nclass CachedConfiguration {\n    constructor({ type, key }, cacheHome, fileService) {\n        this.fileService = fileService;\n        this.cachedConfigurationFolderResource = joinPath(cacheHome, 'CachedConfigurations', type, key);\n        this.cachedConfigurationFileResource = joinPath(this.cachedConfigurationFolderResource, type === 'workspaces' ? 'workspace.json' : 'configuration.json');\n        this.queue = ( new Queue());\n    }\n    async read() {\n        try {\n            const content = await this.fileService.readFile(this.cachedConfigurationFileResource);\n            return ( content.value.toString());\n        }\n        catch (e) {\n            return '';\n        }\n    }\n    async save(content) {\n        const created = await this.createCachedFolder();\n        if (created) {\n            await this.queue.queue(async () => {\n                await this.fileService.writeFile(this.cachedConfigurationFileResource, VSBuffer.fromString(content));\n            });\n        }\n    }\n    async remove() {\n        try {\n            await this.queue.queue(() => this.fileService.del(this.cachedConfigurationFolderResource, { recursive: true, useTrash: false }));\n        }\n        catch (error) {\n            if (error.fileOperationResult !== 1 ) {\n                throw error;\n            }\n        }\n    }\n    async createCachedFolder() {\n        if (await this.fileService.exists(this.cachedConfigurationFolderResource)) {\n            return true;\n        }\n        try {\n            await this.fileService.createFolder(this.cachedConfigurationFolderResource);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n}\nexport { ConfigurationCache };\n", "import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { dispose, Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { sep, posix, win32 } from 'monaco-editor/esm/vs/base/common/path.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Extensions } from '../../../common/contributions.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { isWorkspace, toWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, isUntitledWorkspace, isTemporaryWorkspace, WORKSPACE_EXTENSION, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { basenameOrAuthority, basename, joinPath, dirname } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { getPathLabel, tildify } from 'monaco-editor/esm/vs/base/common/labels.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { match } from 'monaco-editor/esm/vs/base/common/glob.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { isProposedApiEnabled } from '../../extensions/common/extensions.js';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { Memento } from '../../../common/memento.js';\nimport { firstOrDefault } from 'monaco-editor/esm/vs/base/common/arrays.js';\nconst resourceLabelFormattersExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'resourceLabelFormatters',\n    jsonSchema: {\n        description: ( localize(\n            'vscode.extension.contributes.resourceLabelFormatters',\n            'Contributes resource label formatting rules.'\n        )),\n        type: 'array',\n        items: {\n            type: 'object',\n            required: ['scheme', 'formatting'],\n            properties: {\n                scheme: {\n                    type: 'string',\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.scheme',\n                        'URI scheme on which to match the formatter on. For example \"file\". Simple glob patterns are supported.'\n                    )),\n                },\n                authority: {\n                    type: 'string',\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.authority',\n                        'URI authority on which to match the formatter on. Simple glob patterns are supported.'\n                    )),\n                },\n                formatting: {\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.formatting',\n                        \"Rules for formatting uri resource labels.\"\n                    )),\n                    type: 'object',\n                    properties: {\n                        label: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.label',\n                                \"Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables.\"\n                            ))\n                        },\n                        separator: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.separator',\n                                \"Separator to be used in the uri label display. '/' or '\\' as an example.\"\n                            ))\n                        },\n                        stripPathStartingSeparator: {\n                            type: 'boolean',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator',\n                                \"Controls whether `${path}` substitutions should have starting separator characters stripped.\"\n                            ))\n                        },\n                        tildify: {\n                            type: 'boolean',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.tildify',\n                                \"Controls if the start of the uri label should be tildified when possible.\"\n                            ))\n                        },\n                        workspaceSuffix: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix',\n                                \"Suffix appended to the workspace label.\"\n                            ))\n                        }\n                    }\n                }\n            }\n        }\n    }\n}));\nconst sepRegexp = /\\//g;\nconst labelMatchingRegexp = /\\$\\{(scheme|authoritySuffix|authority|path|(query)\\.(.+?))\\}/g;\nfunction hasDriveLetterIgnorePlatform(path) {\n    return !!(path && path[2] === ':');\n}\nlet ResourceLabelFormattersHandler = class ResourceLabelFormattersHandler {\n    constructor(labelService) {\n        this.formattersDisposables = ( new Map());\n        resourceLabelFormattersExtPoint.setHandler((extensions, delta) => {\n            for (const added of delta.added) {\n                for (const untrustedFormatter of added.value) {\n                    const formatter = { ...untrustedFormatter };\n                    if (typeof formatter.formatting.label !== 'string') {\n                        formatter.formatting.label = '${authority}${path}';\n                    }\n                    if (typeof formatter.formatting.separator !== `string`) {\n                        formatter.formatting.separator = sep;\n                    }\n                    if (!isProposedApiEnabled(added.description, 'contribLabelFormatterWorkspaceTooltip') && formatter.formatting.workspaceTooltip) {\n                        formatter.formatting.workspaceTooltip = undefined;\n                    }\n                    this.formattersDisposables.set(formatter, labelService.registerFormatter(formatter));\n                }\n            }\n            for (const removed of delta.removed) {\n                for (const formatter of removed.value) {\n                    dispose(this.formattersDisposables.get(formatter));\n                }\n            }\n        });\n    }\n};\nResourceLabelFormattersHandler = ( __decorate([\n    ( __param(0, ILabelService))\n], ResourceLabelFormattersHandler));\n( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(ResourceLabelFormattersHandler, 3 );\nconst FORMATTER_CACHE_SIZE = 50;\nlet LabelService = class LabelService extends Disposable {\n    constructor(environmentService, contextService, pathService, remoteAgentService, storageService, lifecycleService) {\n        super();\n        this.environmentService = environmentService;\n        this.contextService = contextService;\n        this.pathService = pathService;\n        this.remoteAgentService = remoteAgentService;\n        this._onDidChangeFormatters = this._register(( new Emitter({ leakWarningThreshold: 400 })));\n        this.onDidChangeFormatters = this._onDidChangeFormatters.event;\n        this.os = OS;\n        this.userHome = pathService.defaultUriScheme === Schemas.file ? this.pathService.userHome({ preferLocal: true }) : undefined;\n        const memento = this.storedFormattersMemento = ( new Memento('cachedResourceLabelFormatters2', storageService));\n        this.storedFormatters = memento.getMemento(0 , 1 );\n        this.formatters = this.storedFormatters?.formatters?.slice() || [];\n        this.resolveRemoteEnvironment();\n    }\n    async resolveRemoteEnvironment() {\n        const env = await this.remoteAgentService.getEnvironment();\n        this.os = env?.os ?? OS;\n        this.userHome = await this.pathService.userHome();\n    }\n    findFormatting(resource) {\n        let bestResult;\n        for (const formatter of this.formatters) {\n            if (formatter.scheme === resource.scheme) {\n                if (!formatter.authority && (!bestResult || formatter.priority)) {\n                    bestResult = formatter;\n                    continue;\n                }\n                if (!formatter.authority) {\n                    continue;\n                }\n                if (match(formatter.authority.toLowerCase(), resource.authority.toLowerCase()) &&\n                    (!bestResult ||\n                        !bestResult.authority ||\n                        formatter.authority.length > bestResult.authority.length ||\n                        ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n                    bestResult = formatter;\n                }\n            }\n        }\n        return bestResult ? bestResult.formatting : undefined;\n    }\n    getUriLabel(resource, options = {}) {\n        let formatting = this.findFormatting(resource);\n        if (formatting && options.separator) {\n            formatting = { ...formatting, separator: options.separator };\n        }\n        const label = this.doGetUriLabel(resource, formatting, options);\n        if (!formatting && options.separator) {\n            return label.replace(sepRegexp, options.separator);\n        }\n        return label;\n    }\n    doGetUriLabel(resource, formatting, options = {}) {\n        if (!formatting) {\n            return getPathLabel(resource, {\n                os: this.os,\n                tildify: this.userHome ? { userHome: this.userHome } : undefined,\n                relative: options.relative ? {\n                    noPrefix: options.noPrefix,\n                    getWorkspace: () => this.contextService.getWorkspace(),\n                    getWorkspaceFolder: resource => this.contextService.getWorkspaceFolder(resource)\n                } : undefined\n            });\n        }\n        if (options.relative && this.contextService) {\n            let folder = this.contextService.getWorkspaceFolder(resource);\n            if (!folder) {\n                const workspace = this.contextService.getWorkspace();\n                const firstFolder = firstOrDefault(workspace.folders);\n                if (firstFolder && resource.scheme !== firstFolder.uri.scheme && resource.path.startsWith(posix.sep)) {\n                    folder = this.contextService.getWorkspaceFolder(firstFolder.uri.with({ path: resource.path }));\n                }\n            }\n            if (folder) {\n                const folderLabel = this.formatUri(folder.uri, formatting, options.noPrefix);\n                let relativeLabel = this.formatUri(resource, formatting, options.noPrefix);\n                let overlap = 0;\n                while (relativeLabel[overlap] && relativeLabel[overlap] === folderLabel[overlap]) {\n                    overlap++;\n                }\n                if (!relativeLabel[overlap] || relativeLabel[overlap] === formatting.separator) {\n                    relativeLabel = relativeLabel.substring(1 + overlap);\n                }\n                else if (overlap === folderLabel.length && folder.uri.path === posix.sep) {\n                    relativeLabel = relativeLabel.substring(overlap);\n                }\n                const hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;\n                if (hasMultipleRoots && !options.noPrefix) {\n                    const rootName = folder?.name ?? basenameOrAuthority(folder.uri);\n                    relativeLabel = relativeLabel ? `${rootName} • ${relativeLabel}` : rootName;\n                }\n                return relativeLabel;\n            }\n        }\n        return this.formatUri(resource, formatting, options.noPrefix);\n    }\n    getUriBasenameLabel(resource) {\n        const formatting = this.findFormatting(resource);\n        const label = this.doGetUriLabel(resource, formatting);\n        let pathLib;\n        if (formatting?.separator === win32.sep) {\n            pathLib = win32;\n        }\n        else if (formatting?.separator === posix.sep) {\n            pathLib = posix;\n        }\n        else {\n            pathLib = ((this.os === 1) ) ? win32 : posix;\n        }\n        return pathLib.basename(label);\n    }\n    getWorkspaceLabel(workspace, options) {\n        if (isWorkspace(workspace)) {\n            const identifier = toWorkspaceIdentifier(workspace);\n            if (isSingleFolderWorkspaceIdentifier(identifier) || isWorkspaceIdentifier(identifier)) {\n                return this.getWorkspaceLabel(identifier, options);\n            }\n            return '';\n        }\n        if (URI.isUri(workspace)) {\n            return this.doGetSingleFolderWorkspaceLabel(workspace, options);\n        }\n        if (isSingleFolderWorkspaceIdentifier(workspace)) {\n            return this.doGetSingleFolderWorkspaceLabel(workspace.uri, options);\n        }\n        if (isWorkspaceIdentifier(workspace)) {\n            return this.doGetWorkspaceLabel(workspace.configPath, options);\n        }\n        return '';\n    }\n    doGetWorkspaceLabel(workspaceUri, options) {\n        if (isUntitledWorkspace(workspaceUri, this.environmentService)) {\n            return ( localize('untitledWorkspace', \"Untitled (Workspace)\"));\n        }\n        if (isTemporaryWorkspace(workspaceUri)) {\n            return ( localize('temporaryWorkspace', \"Workspace\"));\n        }\n        let filename = basename(workspaceUri);\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n        }\n        let label;\n        switch (options?.verbose) {\n            case 0 :\n                label = filename;\n                break;\n            case 2 :\n                label = ( localize(\n                    'workspaceNameVerbose',\n                    \"{0} (Workspace)\",\n                    this.getUriLabel(joinPath(dirname(workspaceUri), filename))\n                ));\n                break;\n            case 1 :\n            default:\n                label = ( localize('workspaceName', \"{0} (Workspace)\", filename));\n                break;\n        }\n        if (options?.verbose === 0 ) {\n            return label;\n        }\n        return this.appendWorkspaceSuffix(label, workspaceUri);\n    }\n    doGetSingleFolderWorkspaceLabel(folderUri, options) {\n        let label;\n        switch (options?.verbose) {\n            case 2 :\n                label = this.getUriLabel(folderUri);\n                break;\n            case 0 :\n            case 1 :\n            default:\n                label = basename(folderUri) || posix.sep;\n                break;\n        }\n        if (options?.verbose === 0 ) {\n            return label;\n        }\n        return this.appendWorkspaceSuffix(label, folderUri);\n    }\n    getSeparator(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.separator || posix.sep;\n    }\n    getHostLabel(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.workspaceSuffix || authority || '';\n    }\n    getHostTooltip(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.workspaceTooltip;\n    }\n    registerCachedFormatter(formatter) {\n        const list = this.storedFormatters.formatters ??= [];\n        let replace = list.findIndex(f => f.scheme === formatter.scheme && f.authority === formatter.authority);\n        if (replace === -1 && list.length >= FORMATTER_CACHE_SIZE) {\n            replace = FORMATTER_CACHE_SIZE - 1;\n        }\n        if (replace === -1) {\n            list.unshift(formatter);\n        }\n        else {\n            for (let i = replace; i > 0; i--) {\n                list[i] = list[i - 1];\n            }\n            list[0] = formatter;\n        }\n        this.storedFormattersMemento.saveMemento();\n        return this.registerFormatter(formatter);\n    }\n    registerFormatter(formatter) {\n        this.formatters.push(formatter);\n        this._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n        return {\n            dispose: () => {\n                this.formatters = this.formatters.filter(f => f !== formatter);\n                this._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n            }\n        };\n    }\n    formatUri(resource, formatting, forceNoTildify) {\n        let label = formatting.label.replace(labelMatchingRegexp, (match, token, qsToken, qsValue) => {\n            switch (token) {\n                case 'scheme': return resource.scheme;\n                case 'authority': return resource.authority;\n                case 'authoritySuffix': {\n                    const i = resource.authority.indexOf('+');\n                    return i === -1 ? resource.authority : resource.authority.slice(i + 1);\n                }\n                case 'path':\n                    return formatting.stripPathStartingSeparator\n                        ? resource.path.slice(resource.path[0] === formatting.separator ? 1 : 0)\n                        : resource.path;\n                default: {\n                    if (qsToken === 'query') {\n                        const { query } = resource;\n                        if (query && query[0] === '{' && query[query.length - 1] === '}') {\n                            try {\n                                return JSON.parse(query)[qsValue] || '';\n                            }\n                            catch { }\n                        }\n                    }\n                    return '';\n                }\n            }\n        });\n        if (formatting.normalizeDriveLetter && hasDriveLetterIgnorePlatform(label)) {\n            label = label.charAt(1).toUpperCase() + label.substr(2);\n        }\n        if (formatting.tildify && !forceNoTildify) {\n            if (this.userHome) {\n                label = tildify(label, this.userHome.fsPath, this.os);\n            }\n        }\n        if (formatting.authorityPrefix && resource.authority) {\n            label = formatting.authorityPrefix + label;\n        }\n        return label.replace(sepRegexp, formatting.separator);\n    }\n    appendWorkspaceSuffix(label, uri) {\n        const formatting = this.findFormatting(uri);\n        const suffix = formatting && (typeof formatting.workspaceSuffix === 'string') ? formatting.workspaceSuffix : undefined;\n        return suffix ? `${label} [${suffix}]` : label;\n    }\n};\nLabelService = ( __decorate([\n    ( __param(0, IWorkbenchEnvironmentService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, IPathService)),\n    ( __param(3, IRemoteAgentService)),\n    ( __param(4, IStorageService)),\n    ( __param(5, ILifecycleService))\n], LabelService));\nexport { LabelService };\n", "import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { restoreRecentlyOpened, isRecentFolder, isRecentWorkspace, isRecentFile, toStoreData, getStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { isTemporaryWorkspace, WORKSPACE_EXTENSION, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { getWorkspaceIdentifier } from './workspaces.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nvar BrowserWorkspacesService_1;\nlet BrowserWorkspacesService = class BrowserWorkspacesService extends Disposable {\n    static { BrowserWorkspacesService_1 = this; }\n    static { this.RECENTLY_OPENED_KEY = 'recently.opened'; }\n    constructor(storageService, contextService, logService, fileService, environmentService, uriIdentityService) {\n        super();\n        this.storageService = storageService;\n        this.contextService = contextService;\n        this.logService = logService;\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.uriIdentityService = uriIdentityService;\n        this._onRecentlyOpenedChange = this._register(( new Emitter()));\n        this.onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n        this.addWorkspaceToRecentlyOpened();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.storageService.onDidChangeValue(-1 , BrowserWorkspacesService_1.RECENTLY_OPENED_KEY, this._register(( new DisposableStore())))(() => this._onRecentlyOpenedChange.fire()));\n        this._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\n    }\n    onDidChangeWorkspaceFolders(e) {\n        if (!isTemporaryWorkspace(this.contextService.getWorkspace())) {\n            return;\n        }\n        for (const folder of e.added) {\n            this.addRecentlyOpened([{ folderUri: folder.uri }]);\n        }\n    }\n    addWorkspaceToRecentlyOpened() {\n        const workspace = this.contextService.getWorkspace();\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        switch (this.contextService.getWorkbenchState()) {\n            case 2 :\n                this.addRecentlyOpened([{ folderUri: workspace.folders[0].uri, remoteAuthority }]);\n                break;\n            case 3 :\n                this.addRecentlyOpened([{ workspace: { id: workspace.id, configPath: workspace.configuration }, remoteAuthority }]);\n                break;\n        }\n    }\n    async getRecentlyOpened() {\n        const recentlyOpenedRaw = this.storageService.get(BrowserWorkspacesService_1.RECENTLY_OPENED_KEY, -1 );\n        if (recentlyOpenedRaw) {\n            const recentlyOpened = restoreRecentlyOpened(JSON.parse(recentlyOpenedRaw), this.logService);\n            recentlyOpened.workspaces = recentlyOpened.workspaces.filter(recent => {\n                if (isRecentFolder(recent) && recent.folderUri.scheme === Schemas.file && !isTemporaryWorkspace(this.contextService.getWorkspace())) {\n                    return false;\n                }\n                if (isRecentWorkspace(recent) && isTemporaryWorkspace(recent.workspace.configPath)) {\n                    return false;\n                }\n                return true;\n            });\n            return recentlyOpened;\n        }\n        return { workspaces: [], files: [] };\n    }\n    async addRecentlyOpened(recents) {\n        const recentlyOpened = await this.getRecentlyOpened();\n        for (const recent of recents) {\n            if (isRecentFile(recent)) {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n                recentlyOpened.files.unshift(recent);\n            }\n            else if (isRecentFolder(recent)) {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n                recentlyOpened.workspaces.unshift(recent);\n            }\n            else {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.workspace.configPath]);\n                recentlyOpened.workspaces.unshift(recent);\n            }\n        }\n        return this.saveRecentlyOpened(recentlyOpened);\n    }\n    async removeRecentlyOpened(paths) {\n        const recentlyOpened = await this.getRecentlyOpened();\n        this.doRemoveRecentlyOpened(recentlyOpened, paths);\n        return this.saveRecentlyOpened(recentlyOpened);\n    }\n    doRemoveRecentlyOpened(recentlyOpened, paths) {\n        recentlyOpened.files = recentlyOpened.files.filter(file => {\n            return !( paths.some(path => ( path.toString()) === ( file.fileUri.toString())));\n        });\n        recentlyOpened.workspaces = recentlyOpened.workspaces.filter(workspace => {\n            return !( paths.some(path => ( path.toString()) === (isRecentFolder(workspace) ? ( workspace.folderUri.toString()) : ( workspace.workspace.configPath.toString()))));\n        });\n    }\n    async saveRecentlyOpened(data) {\n        return this.storageService.store(BrowserWorkspacesService_1.RECENTLY_OPENED_KEY, JSON.stringify(toStoreData(data)), -1 , 0 );\n    }\n    async clearRecentlyOpened() {\n        this.storageService.remove(BrowserWorkspacesService_1.RECENTLY_OPENED_KEY, -1 );\n    }\n    async enterWorkspace(workspaceUri) {\n        return { workspace: await this.getWorkspaceIdentifier(workspaceUri) };\n    }\n    async createUntitledWorkspace(folders, remoteAuthority) {\n        const randomId = ( (Date.now() + Math.round(Math.random() * 1000)).toString());\n        const newUntitledWorkspacePath = joinPath(this.environmentService.untitledWorkspacesHome, `Untitled-${randomId}.${WORKSPACE_EXTENSION}`);\n        const storedWorkspaceFolder = [];\n        if (folders) {\n            for (const folder of folders) {\n                storedWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, this.environmentService.untitledWorkspacesHome, this.uriIdentityService.extUri));\n            }\n        }\n        const storedWorkspace = { folders: storedWorkspaceFolder, remoteAuthority };\n        await this.fileService.writeFile(newUntitledWorkspacePath, VSBuffer.fromString(JSON.stringify(storedWorkspace, null, '\\t')));\n        return this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n    }\n    async deleteUntitledWorkspace(workspace) {\n        try {\n            await this.fileService.del(workspace.configPath);\n        }\n        catch (error) {\n            if (error.fileOperationResult !== 1 ) {\n                throw error;\n            }\n        }\n    }\n    async getWorkspaceIdentifier(workspaceUri) {\n        return getWorkspaceIdentifier(workspaceUri);\n    }\n    async getDirtyWorkspaces() {\n        return [];\n    }\n};\nBrowserWorkspacesService = BrowserWorkspacesService_1 = ( __decorate([\n    ( __param(0, IStorageService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, ILogService)),\n    ( __param(3, IFileService)),\n    ( __param(4, IWorkbenchEnvironmentService)),\n    ( __param(5, IUriIdentityService))\n], BrowserWorkspacesService));\nexport { BrowserWorkspacesService };\n", "import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { WORKSPACE_FILTER, hasWorkspaceFileExtension, WORKSPACE_EXTENSION, isSavedWorkspace, isUntitledWorkspace, toWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { rewriteWorkspaceFileForNewLocation, IWorkspacesService } from '../../../../platform/workspaces/common/workspaces.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { firstOrDefault, distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { joinPath, basename, isEqual, removeTrailingPathSeparator } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport '../../../../../../../override/vs/platform/dialogs/common/dialogs.js';\nimport { mnemonicButtonLabel } from 'monaco-editor/esm/vs/base/common/labels.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchConfigurationService } from '../../configuration/common/configuration.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IFileDialogService, IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nlet AbstractWorkspaceEditingService = class AbstractWorkspaceEditingService {\n    constructor(jsonEditingService, contextService, configurationService, notificationService, commandService, fileService, textFileService, workspacesService, environmentService, fileDialogService, dialogService, hostService, uriIdentityService, workspaceTrustManagementService, userDataProfilesService, userDataProfileService) {\n        this.jsonEditingService = jsonEditingService;\n        this.contextService = contextService;\n        this.configurationService = configurationService;\n        this.notificationService = notificationService;\n        this.commandService = commandService;\n        this.fileService = fileService;\n        this.textFileService = textFileService;\n        this.workspacesService = workspacesService;\n        this.environmentService = environmentService;\n        this.fileDialogService = fileDialogService;\n        this.dialogService = dialogService;\n        this.hostService = hostService;\n        this.uriIdentityService = uriIdentityService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.userDataProfileService = userDataProfileService;\n    }\n    async pickNewWorkspacePath() {\n        const availableFileSystems = [Schemas.file];\n        if (this.environmentService.remoteAuthority) {\n            availableFileSystems.unshift(Schemas.vscodeRemote);\n        }\n        let workspacePath = await this.fileDialogService.showSaveDialog({\n            saveLabel: mnemonicButtonLabel(( localize('save', \"Save\"))),\n            title: ( localize('saveWorkspace', \"Save Workspace\")),\n            filters: WORKSPACE_FILTER,\n            defaultUri: joinPath(await this.fileDialogService.defaultWorkspacePath(), this.getNewWorkspaceName()),\n            availableFileSystems\n        });\n        if (!workspacePath) {\n            return;\n        }\n        if (!hasWorkspaceFileExtension(workspacePath)) {\n            workspacePath = workspacePath.with({ path: `${workspacePath.path}.${WORKSPACE_EXTENSION}` });\n        }\n        return workspacePath;\n    }\n    getNewWorkspaceName() {\n        const configPathURI = this.getCurrentWorkspaceIdentifier()?.configPath;\n        if (configPathURI && isSavedWorkspace(configPathURI, this.environmentService)) {\n            return basename(configPathURI);\n        }\n        const folder = firstOrDefault(this.contextService.getWorkspace().folders);\n        if (folder) {\n            return `${basename(folder.uri)}.${WORKSPACE_EXTENSION}`;\n        }\n        return `workspace.${WORKSPACE_EXTENSION}`;\n    }\n    async updateFolders(index, deleteCount, foldersToAddCandidates, donotNotifyError) {\n        const folders = this.contextService.getWorkspace().folders;\n        let foldersToDelete = [];\n        if (typeof deleteCount === 'number') {\n            foldersToDelete = ( folders.slice(index, index + deleteCount).map(folder => folder.uri));\n        }\n        let foldersToAdd = [];\n        if (Array.isArray(foldersToAddCandidates)) {\n            foldersToAdd = ( foldersToAddCandidates.map(\n                folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name })\n            ));\n        }\n        const wantsToDelete = foldersToDelete.length > 0;\n        const wantsToAdd = foldersToAdd.length > 0;\n        if (!wantsToAdd && !wantsToDelete) {\n            return;\n        }\n        if (wantsToAdd && !wantsToDelete) {\n            return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n        }\n        if (wantsToDelete && !wantsToAdd) {\n            return this.removeFolders(foldersToDelete);\n        }\n        else {\n            if (this.includesSingleFolderWorkspace(foldersToDelete)) {\n                return this.createAndEnterWorkspace(foldersToAdd);\n            }\n            if (this.contextService.getWorkbenchState() !== 3 ) {\n                return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n            }\n            return this.doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError);\n        }\n    }\n    async doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError = false) {\n        try {\n            await this.contextService.updateFolders(foldersToAdd, foldersToDelete, index);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    addFolders(foldersToAddCandidates, donotNotifyError = false) {\n        const foldersToAdd = ( foldersToAddCandidates.map(\n            folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name })\n        ));\n        return this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n    }\n    async doAddFolders(foldersToAdd, index, donotNotifyError = false) {\n        const state = this.contextService.getWorkbenchState();\n        if (state !== 3 ) {\n            let newWorkspaceFolders = ( this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri })));\n            newWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n            newWorkspaceFolders = distinct(newWorkspaceFolders, folder => this.uriIdentityService.extUri.getComparisonKey(folder.uri));\n            if (state === 1  && newWorkspaceFolders.length === 0 || state === 2  && newWorkspaceFolders.length === 1) {\n                return;\n            }\n            return this.createAndEnterWorkspace(newWorkspaceFolders);\n        }\n        try {\n            await this.contextService.addFolders(foldersToAdd, index);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    async removeFolders(foldersToRemove, donotNotifyError = false) {\n        if (this.includesSingleFolderWorkspace(foldersToRemove)) {\n            return this.createAndEnterWorkspace([]);\n        }\n        try {\n            await this.contextService.removeFolders(foldersToRemove);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    includesSingleFolderWorkspace(folders) {\n        if (this.contextService.getWorkbenchState() === 2 ) {\n            const workspaceFolder = this.contextService.getWorkspace().folders[0];\n            return ( folders.some(\n                folder => this.uriIdentityService.extUri.isEqual(folder, workspaceFolder.uri)\n            ));\n        }\n        return false;\n    }\n    async createAndEnterWorkspace(folders, path) {\n        if (path && !(await this.isValidTargetWorkspacePath(path))) {\n            return;\n        }\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        const untitledWorkspace = await this.workspacesService.createUntitledWorkspace(folders, remoteAuthority);\n        if (path) {\n            try {\n                await this.saveWorkspaceAs(untitledWorkspace, path);\n            }\n            finally {\n                await this.workspacesService.deleteUntitledWorkspace(untitledWorkspace);\n            }\n        }\n        else {\n            path = untitledWorkspace.configPath;\n            if (!this.userDataProfileService.currentProfile.isDefault) {\n                await this.userDataProfilesService.setProfileForWorkspace(untitledWorkspace, this.userDataProfileService.currentProfile);\n            }\n        }\n        return this.enterWorkspace(path);\n    }\n    async saveAndEnterWorkspace(workspaceUri) {\n        const workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n        if (!workspaceIdentifier) {\n            return;\n        }\n        if (isEqual(workspaceIdentifier.configPath, workspaceUri)) {\n            return this.saveWorkspace(workspaceIdentifier);\n        }\n        if (!(await this.isValidTargetWorkspacePath(workspaceUri))) {\n            return;\n        }\n        await this.saveWorkspaceAs(workspaceIdentifier, workspaceUri);\n        return this.enterWorkspace(workspaceUri);\n    }\n    async isValidTargetWorkspacePath(workspaceUri) {\n        return true;\n    }\n    async saveWorkspaceAs(workspace, targetConfigPathURI) {\n        const configPathURI = workspace.configPath;\n        const isNotUntitledWorkspace = !isUntitledWorkspace(targetConfigPathURI, this.environmentService);\n        if (isNotUntitledWorkspace && !this.userDataProfileService.currentProfile.isDefault) {\n            const newWorkspace = await this.workspacesService.getWorkspaceIdentifier(targetConfigPathURI);\n            await this.userDataProfilesService.setProfileForWorkspace(newWorkspace, this.userDataProfileService.currentProfile);\n        }\n        if (this.uriIdentityService.extUri.isEqual(configPathURI, targetConfigPathURI)) {\n            return;\n        }\n        const isFromUntitledWorkspace = isUntitledWorkspace(configPathURI, this.environmentService);\n        const raw = await this.fileService.readFile(configPathURI);\n        const newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(( raw.value.toString()), configPathURI, isFromUntitledWorkspace, targetConfigPathURI, this.uriIdentityService.extUri);\n        await this.textFileService.create([{ resource: targetConfigPathURI, value: newRawWorkspaceContents, options: { overwrite: true } }]);\n        await this.trustWorkspaceConfiguration(targetConfigPathURI);\n    }\n    async saveWorkspace(workspace) {\n        const configPathURI = workspace.configPath;\n        const existingModel = this.textFileService.files.get(configPathURI);\n        if (existingModel) {\n            await existingModel.save({ force: true, reason: 1  });\n            return;\n        }\n        const workspaceFileExists = await this.fileService.exists(configPathURI);\n        if (workspaceFileExists) {\n            return;\n        }\n        const newWorkspace = { folders: [] };\n        const newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(JSON.stringify(newWorkspace, null, '\\t'), configPathURI, false, configPathURI, this.uriIdentityService.extUri);\n        await this.textFileService.create([{ resource: configPathURI, value: newRawWorkspaceContents }]);\n    }\n    handleWorkspaceConfigurationEditingError(error) {\n        switch (error.code) {\n            case 0 :\n                this.onInvalidWorkspaceConfigurationFileError();\n                break;\n            default:\n                this.notificationService.error(error.message);\n        }\n    }\n    onInvalidWorkspaceConfigurationFileError() {\n        const message = ( localize(\n            'errorInvalidTaskConfiguration',\n            \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\"\n        ));\n        this.askToOpenWorkspaceConfigurationFile(message);\n    }\n    askToOpenWorkspaceConfigurationFile(message) {\n        this.notificationService.prompt(Severity.Error, message, [{\n                label: ( localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\")),\n                run: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n            }]);\n    }\n    async doEnterWorkspace(workspaceUri) {\n        if (!!this.environmentService.extensionTestsLocationURI) {\n            throw new Error('Entering a new workspace is not possible in tests.');\n        }\n        const workspace = await this.workspacesService.getWorkspaceIdentifier(workspaceUri);\n        if (this.contextService.getWorkbenchState() === 2 ) {\n            await this.migrateWorkspaceSettings(workspace);\n        }\n        await this.configurationService.initialize(workspace);\n        return this.workspacesService.enterWorkspace(workspaceUri);\n    }\n    migrateWorkspaceSettings(toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === 3 );\n    }\n    copyWorkspaceSettings(toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace);\n    }\n    doCopyWorkspaceSettings(toWorkspace, filter) {\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const targetWorkspaceConfiguration = {};\n        for (const key of ( this.configurationService.keys()).workspace) {\n            if (configurationProperties[key]) {\n                if (filter && !filter(configurationProperties[key])) {\n                    continue;\n                }\n                targetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspaceValue;\n            }\n        }\n        return this.jsonEditingService.write(toWorkspace.configPath, [{ path: ['settings'], value: targetWorkspaceConfiguration }], true);\n    }\n    async trustWorkspaceConfiguration(configPathURI) {\n        if (this.contextService.getWorkbenchState() !== 1  && this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n            await this.workspaceTrustManagementService.setUrisTrust([configPathURI], true);\n        }\n    }\n    getCurrentWorkspaceIdentifier() {\n        const identifier = toWorkspaceIdentifier(this.contextService.getWorkspace());\n        if (isWorkspaceIdentifier(identifier)) {\n            return identifier;\n        }\n        return undefined;\n    }\n};\nAbstractWorkspaceEditingService = ( __decorate([\n    ( __param(0, IJSONEditingService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, IWorkbenchConfigurationService)),\n    ( __param(3, INotificationService)),\n    ( __param(4, ICommandService)),\n    ( __param(5, IFileService)),\n    ( __param(6, ITextFileService)),\n    ( __param(7, IWorkspacesService)),\n    ( __param(8, IWorkbenchEnvironmentService)),\n    ( __param(9, IFileDialogService)),\n    ( __param(10, IDialogService)),\n    ( __param(11, IHostService)),\n    ( __param(12, IUriIdentityService)),\n    ( __param(13, IWorkspaceTrustManagementService)),\n    ( __param(14, IUserDataProfilesService)),\n    ( __param(15, IUserDataProfileService))\n], AbstractWorkspaceEditingService));\nexport { AbstractWorkspaceEditingService };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as objects from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ExtensionsRegistry } from '../../services/extensions/common/extensionsRegistry.js';\nimport { Extensions as Extensions$1, configurationDefaultsSchemaId, OVERRIDE_PROPERTY_REGEX, validateProperty } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { workspaceSettingsSchemaId, launchSchemaId, tasksSchemaId } from '../../services/configuration/common/configuration.js';\nimport { isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { ExtensionIdentifierMap } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';\nconst jsonRegistry = ( Registry.as(Extensions.JSONContribution));\nconst configurationRegistry = ( Registry.as(Extensions$1.Configuration));\nconst configurationEntrySchema = {\n    type: 'object',\n    defaultSnippets: [{ body: { title: '', properties: {} } }],\n    properties: {\n        title: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.title',\n                'A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.'\n            )),\n            type: 'string'\n        },\n        order: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.order',\n                'When specified, gives the order of this category of settings relative to other categories.'\n            )),\n            type: 'integer'\n        },\n        properties: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.properties',\n                'Description of the configuration properties.'\n            )),\n            type: 'object',\n            propertyNames: {\n                pattern: '\\\\S+',\n                patternErrorMessage: ( nls.localize(\n                    'vscode.extension.contributes.configuration.property.empty',\n                    'Property should not be empty.'\n                )),\n            },\n            additionalProperties: {\n                anyOf: [\n                    {\n                        title: ( nls.localize(\n                            'vscode.extension.contributes.configuration.properties.schema',\n                            'Schema of the configuration property.'\n                        )),\n                        $ref: 'http://json-schema.org/draft-07/schema#'\n                    },\n                    {\n                        type: 'object',\n                        properties: {\n                            scope: {\n                                type: 'string',\n                                enum: ['application', 'machine', 'window', 'resource', 'language-overridable', 'machine-overridable'],\n                                default: 'window',\n                                enumDescriptions: [\n                                    ( nls.localize(\n                                        'scope.application.description',\n                                        \"Configuration that can be configured only in the user settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.machine.description',\n                                        \"Configuration that can be configured only in the user settings or only in the remote settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.window.description',\n                                        \"Configuration that can be configured in the user, remote or workspace settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.resource.description',\n                                        \"Configuration that can be configured in the user, remote, workspace or folder settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.language-overridable.description',\n                                        \"Resource configuration that can be configured in language specific settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.machine-overridable.description',\n                                        \"Machine configuration that can be configured also in workspace or folder settings.\"\n                                    ))\n                                ],\n                                markdownDescription: ( nls.localize(\n                                    'scope.description',\n                                    \"Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.\"\n                                ))\n                            },\n                            enumDescriptions: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: ( nls.localize('scope.enumDescriptions', 'Descriptions for enum values'))\n                            },\n                            markdownEnumDescriptions: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: ( nls.localize(\n                                    'scope.markdownEnumDescriptions',\n                                    'Descriptions for enum values in the markdown format.'\n                                ))\n                            },\n                            enumItemLabels: {\n                                type: 'array',\n                                items: {\n                                    type: 'string'\n                                },\n                                markdownDescription: ( nls.localize(\n                                    'scope.enumItemLabels',\n                                    'Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.',\n                                    '`enum`'\n                                ))\n                            },\n                            markdownDescription: {\n                                type: 'string',\n                                description: ( nls.localize('scope.markdownDescription', 'The description in the markdown format.'))\n                            },\n                            deprecationMessage: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'scope.deprecationMessage',\n                                    'If set, the property is marked as deprecated and the given message is shown as an explanation.'\n                                ))\n                            },\n                            markdownDeprecationMessage: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'scope.markdownDeprecationMessage',\n                                    'If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.'\n                                ))\n                            },\n                            editPresentation: {\n                                type: 'string',\n                                enum: ['singlelineText', 'multilineText'],\n                                enumDescriptions: [\n                                    ( nls.localize(\n                                        'scope.singlelineText.description',\n                                        'The value will be shown in an inputbox.'\n                                    )),\n                                    ( nls.localize(\n                                        'scope.multilineText.description',\n                                        'The value will be shown in a textarea.'\n                                    ))\n                                ],\n                                default: 'singlelineText',\n                                description: ( nls.localize(\n                                    'scope.editPresentation',\n                                    'When specified, controls the presentation format of the string setting.'\n                                ))\n                            },\n                            order: {\n                                type: 'integer',\n                                description: ( nls.localize(\n                                    'scope.order',\n                                    'When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.'\n                                ))\n                            },\n                            ignoreSync: {\n                                type: 'boolean',\n                                description: ( nls.localize(\n                                    'scope.ignoreSync',\n                                    'When enabled, Settings Sync will not sync the user value of this configuration by default.'\n                                ))\n                            },\n                        }\n                    }\n                ]\n            }\n        }\n    }\n};\nlet _configDelta;\nconst defaultConfigurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configurationDefaults',\n    jsonSchema: {\n        $ref: configurationDefaultsSchemaId,\n    }\n}));\ndefaultConfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n    if (_configDelta) {\n        configurationRegistry.deltaConfiguration(_configDelta);\n    }\n    const configNow = _configDelta = {};\n    queueMicrotask(() => {\n        if (_configDelta === configNow) {\n            configurationRegistry.deltaConfiguration(_configDelta);\n            _configDelta = undefined;\n        }\n    });\n    if (removed.length) {\n        const removedDefaultConfigurations = ( removed.map(\n            extension => ({ overrides: objects.deepClone(extension.value), source: { id: extension.description.identifier.value, displayName: extension.description.displayName } })\n        ));\n        _configDelta.removedDefaults = removedDefaultConfigurations;\n    }\n    if (added.length) {\n        const registeredProperties = configurationRegistry.getConfigurationProperties();\n        const allowedScopes = [6 , 3 , 4 , 5 ];\n        const addedDefaultConfigurations = ( added.map(extension => {\n            const overrides = objects.deepClone(extension.value);\n            for (const key of ( Object.keys(overrides))) {\n                if (!OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const registeredPropertyScheme = registeredProperties[key];\n                    if (registeredPropertyScheme?.scope && !allowedScopes.includes(registeredPropertyScheme.scope)) {\n                        extension.collector.warn(( nls.localize(\n                            'config.property.defaultConfiguration.warning',\n                            \"Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.\",\n                            key\n                        )));\n                        delete overrides[key];\n                    }\n                }\n            }\n            return { overrides, source: { id: extension.description.identifier.value, displayName: extension.description.displayName } };\n        }));\n        _configDelta.addedDefaults = addedDefaultConfigurations;\n    }\n});\nconst configurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configuration',\n    deps: [defaultConfigurationExtPoint],\n    jsonSchema: {\n        description: ( nls.localize(\n            'vscode.extension.contributes.configuration',\n            'Contributes configuration settings.'\n        )),\n        oneOf: [\n            configurationEntrySchema,\n            {\n                type: 'array',\n                items: configurationEntrySchema\n            }\n        ]\n    }\n}));\nconst extensionConfigurations = ( new ExtensionIdentifierMap());\nconfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n    _configDelta ??= {};\n    if (removed.length) {\n        const removedConfigurations = [];\n        for (const extension of removed) {\n            removedConfigurations.push(...(extensionConfigurations.get(extension.description.identifier) || []));\n            extensionConfigurations.delete(extension.description.identifier);\n        }\n        _configDelta.removedConfigurations = removedConfigurations;\n    }\n    const seenProperties = ( new Set());\n    function handleConfiguration(node, extension) {\n        const configurations = [];\n        const configuration = objects.deepClone(node);\n        if (configuration.title && (typeof configuration.title !== 'string')) {\n            extension.collector.error(( nls.localize('invalid.title', \"'configuration.title' must be a string\")));\n        }\n        validateProperties(configuration, extension);\n        configuration.id = node.id || extension.description.identifier.value;\n        configuration.extensionInfo = { id: extension.description.identifier.value, displayName: extension.description.displayName };\n        configuration.restrictedProperties = extension.description.capabilities?.untrustedWorkspaces?.supported === 'limited' ? extension.description.capabilities?.untrustedWorkspaces.restrictedConfigurations : undefined;\n        configuration.title = configuration.title || extension.description.displayName || extension.description.identifier.value;\n        configurations.push(configuration);\n        return configurations;\n    }\n    function validateProperties(configuration, extension) {\n        const properties = configuration.properties;\n        if (properties) {\n            if (typeof properties !== 'object') {\n                extension.collector.error(( nls.localize('invalid.properties', \"'configuration.properties' must be an object\")));\n                configuration.properties = {};\n            }\n            for (const key in properties) {\n                const propertyConfiguration = properties[key];\n                const message = validateProperty(key, propertyConfiguration);\n                if (message) {\n                    delete properties[key];\n                    extension.collector.warn(message);\n                    continue;\n                }\n                if (( seenProperties.has(key))) {\n                    delete properties[key];\n                    extension.collector.warn(( nls.localize(\n                        'config.property.duplicate',\n                        \"Cannot register '{0}'. This property is already registered.\",\n                        key\n                    )));\n                    continue;\n                }\n                if (!isObject(propertyConfiguration)) {\n                    delete properties[key];\n                    extension.collector.error(( nls.localize(\n                        'invalid.property',\n                        \"configuration.properties property '{0}' must be an object\",\n                        key\n                    )));\n                    continue;\n                }\n                seenProperties.add(key);\n                if (propertyConfiguration.scope) {\n                    if (( propertyConfiguration.scope.toString()) === 'application') {\n                        propertyConfiguration.scope = 1 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'machine') {\n                        propertyConfiguration.scope = 2 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'resource') {\n                        propertyConfiguration.scope = 4 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'machine-overridable') {\n                        propertyConfiguration.scope = 6 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'language-overridable') {\n                        propertyConfiguration.scope = 5 ;\n                    }\n                    else {\n                        propertyConfiguration.scope = 3 ;\n                    }\n                }\n                else {\n                    propertyConfiguration.scope = 3 ;\n                }\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            extension.collector.error(( nls.localize(\n                'invalid.allOf',\n                \"'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.\"\n            )));\n            for (const node of subNodes) {\n                validateProperties(node, extension);\n            }\n        }\n    }\n    if (added.length) {\n        const addedConfigurations = [];\n        for (const extension of added) {\n            const configurations = [];\n            const value = extension.value;\n            if (Array.isArray(value)) {\n                value.forEach(v => configurations.push(...handleConfiguration(v, extension)));\n            }\n            else {\n                configurations.push(...handleConfiguration(value, extension));\n            }\n            extensionConfigurations.set(extension.description.identifier, configurations);\n            addedConfigurations.push(...configurations);\n        }\n        _configDelta.addedConfigurations = addedConfigurations;\n    }\n    configurationRegistry.deltaConfiguration(_configDelta);\n    _configDelta = undefined;\n});\njsonRegistry.registerSchema('vscode://schemas/workspaceConfig', {\n    allowComments: true,\n    allowTrailingCommas: true,\n    default: {\n        folders: [\n            {\n                path: ''\n            }\n        ],\n        settings: {}\n    },\n    required: ['folders'],\n    properties: {\n        'folders': {\n            minItems: 0,\n            uniqueItems: true,\n            description: ( nls.localize(\n                'workspaceConfig.folders.description',\n                \"List of folders to be loaded in the workspace.\"\n            )),\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { path: '$1' } }],\n                oneOf: [{\n                        properties: {\n                            path: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'workspaceConfig.path.description',\n                                    \"A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.\"\n                                ))\n                            },\n                            name: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \"))\n                            }\n                        },\n                        required: ['path']\n                    }, {\n                        properties: {\n                            uri: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.uri.description', \"URI of the folder\"))\n                            },\n                            name: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \"))\n                            }\n                        },\n                        required: ['uri']\n                    }]\n            }\n        },\n        'settings': {\n            type: 'object',\n            default: {},\n            description: ( nls.localize('workspaceConfig.settings.description', \"Workspace settings\")),\n            $ref: workspaceSettingsSchemaId\n        },\n        'launch': {\n            type: 'object',\n            default: { configurations: [], compounds: [] },\n            description: ( nls.localize('workspaceConfig.launch.description', \"Workspace launch configurations\")),\n            $ref: launchSchemaId\n        },\n        'tasks': {\n            type: 'object',\n            default: { version: '2.0.0', tasks: [] },\n            description: ( nls.localize('workspaceConfig.tasks.description', \"Workspace task configurations\")),\n            $ref: tasksSchemaId\n        },\n        'extensions': {\n            type: 'object',\n            default: {},\n            description: ( nls.localize('workspaceConfig.extensions.description', \"Workspace extensions\")),\n            $ref: 'vscode://schemas/extensions'\n        },\n        'remoteAuthority': {\n            type: 'string',\n            doNotSuggest: true,\n            description: ( nls.localize(\n                'workspaceConfig.remoteAuthority',\n                \"The remote server where the workspace is located.\"\n            )),\n        },\n        'transient': {\n            type: 'boolean',\n            doNotSuggest: true,\n            description: ( nls.localize(\n                'workspaceConfig.transient',\n                \"A transient workspace will disappear when restarting or reloading.\"\n            )),\n        }\n    },\n    errorMessage: ( nls.localize('unknownWorkspaceProperty', \"Unknown workspace configuration property\"))\n});\n"],
  "mappings": "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",
  "names": ["Configuration", "keys", "init_platform", "init_platform", "ConfigurationEditing", "basename", "_a", "Extensions", "key", "resource", "jsonPath", "init_platform", "_a", "Extensions", "DefaultConfiguration", "configurationModel", "_a", "Workspace", "Extensions", "DefaultConfiguration", "Configuration", "remoteUserConfigurationModel", "index", "target", "change", "RegisterConfigurationSchemasContribution", "configurationRegistry", "jsonRegistry", "UpdateExperimentalSettingsDefaults", "TextResourceConfigurationService", "_a", "ConfigurationScope", "init_platform", "init_platform", "ResourceLabelFormattersHandler", "delta", "Extensions", "LabelService", "_a", "resource", "match", "init_platform", "AbstractWorkspaceEditingService", "_a", "Extensions", "init_platform", "configurationRegistry", "Extensions", "_a", "configurationRegistry", "Extensions", "InjectedConfigurationService", "getServiceOverride"]
}
