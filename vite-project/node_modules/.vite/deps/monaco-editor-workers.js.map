{
  "version": 3,
  "sources": ["../../monaco-editor-workers/src/index.ts"],
  "sourcesContent": ["import { Environment } from 'monaco-editor/esm/vs/editor/editor.api.js';\n\ninterface MonacoEnvironmentEnhanced extends Environment {\n    workerOverrideGlobals: WorkerOverrideGlobals;\n}\n\ntype WorkerOverrideGlobals = {\n    basePath: string;\n    workerPath: string;\n    workerOptions: WorkerOptions;\n}\n\nexport function buildWorkerDefinition(workerPath: string, basePath: string, useModuleWorker: boolean) {\n\n    const monWin = (self as Window);\n    const workerOverrideGlobals: WorkerOverrideGlobals = {\n        basePath: basePath,\n        workerPath: workerPath,\n        workerOptions: {\n            type: useModuleWorker ? 'module' : 'classic'\n        }\n    };\n\n    if (!monWin.MonacoEnvironment) {\n        monWin.MonacoEnvironment = {\n            workerOverrideGlobals: workerOverrideGlobals,\n            createTrustedTypesPolicy: (_policyName: string) => {\n                return undefined;\n            }\n        } as MonacoEnvironmentEnhanced;\n    }\n    const monEnv = monWin.MonacoEnvironment as MonacoEnvironmentEnhanced;\n    monEnv.workerOverrideGlobals = workerOverrideGlobals;\n\n    const getWorker = (_: string, label: string) => {\n        console.log('getWorker: workerId: ' + _ + ' label: ' + label);\n\n        const buildWorker = (globals: WorkerOverrideGlobals, label: string, workerName: string, editorType: string) => {\n            globals.workerOptions.name = label;\n\n            const workerFilename = globals.workerOptions.type === 'module' ? `${workerName}-es.js` : `${workerName}-iife.js`;\n            const workerPathLocal = `${globals.workerPath}/${workerFilename}`;\n            const workerUrl = new URL(workerPathLocal, globals.basePath);\n            console.log(`${editorType}: url: ${workerUrl.href} created from basePath: ${globals.basePath} and file: ${workerPathLocal}`);\n\n            return new Worker(workerUrl.href, globals.workerOptions);\n        };\n\n        switch (label) {\n            case 'typescript':\n            case 'javascript':\n                return buildWorker(workerOverrideGlobals, label, 'tsWorker', 'TS Worker');\n            case 'html':\n            case 'handlebars':\n            case 'razor':\n                return buildWorker(workerOverrideGlobals, label, 'htmlWorker', 'HTML Worker');\n            case 'css':\n            case 'scss':\n            case 'less':\n                return buildWorker(workerOverrideGlobals, label, 'cssWorker', 'CSS Worker');\n            case 'json':\n                return buildWorker(workerOverrideGlobals, label, 'jsonWorker', 'JSON Worker');\n            default:\n                return buildWorker(workerOverrideGlobals, label, 'editorWorker', 'Editor Worker');\n        }\n    };\n\n    monEnv.getWorker = getWorker;\n}\n"],
  "mappings": ";;;AAYM,SAAU,sBAAsB,YAAoB,UAAkB,iBAAwB;AAEhG,QAAM,SAAU;AAChB,QAAM,wBAA+C;IACjD;IACA;IACA,eAAe;MACX,MAAM,kBAAkB,WAAW;;;AAI3C,MAAI,CAAC,OAAO,mBAAmB;AAC3B,WAAO,oBAAoB;MACvB;MACA,0BAA0B,CAAC,gBAAuB;AAC9C,eAAO;MACX;;;AAGR,QAAM,SAAS,OAAO;AACtB,SAAO,wBAAwB;AAE/B,QAAM,YAAY,CAAC,GAAW,UAAiB;AAC3C,YAAQ,IAAI,0BAA0B,IAAI,aAAa,KAAK;AAE5D,UAAM,cAAc,CAAC,SAAgCA,QAAe,YAAoB,eAAsB;AAC1G,cAAQ,cAAc,OAAOA;AAE7B,YAAM,iBAAiB,QAAQ,cAAc,SAAS,WAAW,GAAG,UAAU,WAAW,GAAG,UAAU;AACtG,YAAM,kBAAkB,GAAG,QAAQ,UAAU,IAAI,cAAc;AAC/D,YAAM,YAAY,IAAI,IAAI,iBAAiB,QAAQ,QAAQ;AAC3D,cAAQ,IAAI,GAAG,UAAU,UAAU,UAAU,IAAI,2BAA2B,QAAQ,QAAQ,cAAc,eAAe,EAAE;AAE3H,aAAO,IAAI,OAAO,UAAU,MAAM,QAAQ,aAAa;IAC3D;AAEA,YAAQ,OAAO;MACX,KAAK;MACL,KAAK;AACD,eAAO,YAAY,uBAAuB,OAAO,YAAY,WAAW;MAC5E,KAAK;MACL,KAAK;MACL,KAAK;AACD,eAAO,YAAY,uBAAuB,OAAO,cAAc,aAAa;MAChF,KAAK;MACL,KAAK;MACL,KAAK;AACD,eAAO,YAAY,uBAAuB,OAAO,aAAa,YAAY;MAC9E,KAAK;AACD,eAAO,YAAY,uBAAuB,OAAO,cAAc,aAAa;MAChF;AACI,eAAO,YAAY,uBAAuB,OAAO,gBAAgB,eAAe;;EAE5F;AAEA,SAAO,YAAY;AACvB;",
  "names": ["label"]
}
