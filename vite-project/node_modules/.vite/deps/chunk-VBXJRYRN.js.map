{
  "version": 3,
  "sources": ["../../vscode/vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.js"],
  "sourcesContent": ["import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nconst colorRegistry = ( Registry.as(Extensions.ColorContribution));\nconst colorReferenceSchema = colorRegistry.getColorReferenceSchema();\nconst colorIdPattern = '^\\\\w+[.\\\\w+]*$';\nconst configurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'colors',\n    jsonSchema: {\n        description: ( nls.localize('contributes.color', 'Contributes extension defined themable colors')),\n        type: 'array',\n        items: {\n            type: 'object',\n            properties: {\n                id: {\n                    type: 'string',\n                    description: ( nls.localize('contributes.color.id', 'The identifier of the themable color')),\n                    pattern: colorIdPattern,\n                    patternErrorMessage: ( nls.localize(\n                        'contributes.color.id.format',\n                        'Identifiers must only contain letters, digits and dots and can not start with a dot'\n                    )),\n                },\n                description: {\n                    type: 'string',\n                    description: ( nls.localize('contributes.color.description', 'The description of the themable color')),\n                },\n                defaults: {\n                    type: 'object',\n                    properties: {\n                        light: {\n                            description: ( nls.localize(\n                                'contributes.defaults.light',\n                                'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'\n                            )),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        },\n                        dark: {\n                            description: ( nls.localize(\n                                'contributes.defaults.dark',\n                                'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'\n                            )),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        },\n                        highContrast: {\n                            description: ( nls.localize(\n                                'contributes.defaults.highContrast',\n                                'The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes.'\n                            )),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        },\n                        highContrastLight: {\n                            description: ( nls.localize(\n                                'contributes.defaults.highContrastLight',\n                                'The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes.'\n                            )),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        }\n                    },\n                    required: ['light', 'dark']\n                }\n            }\n        }\n    }\n}));\nclass ColorExtensionPoint {\n    constructor() {\n        configurationExtPoint.setHandler((extensions, delta) => {\n            for (const extension of delta.added) {\n                const extensionValue = extension.value;\n                const collector = extension.collector;\n                if (!extensionValue || !Array.isArray(extensionValue)) {\n                    collector.error(( nls.localize('invalid.colorConfiguration', \"'configuration.colors' must be a array\")));\n                    return;\n                }\n                const parseColorValue = (s, name) => {\n                    if (s.length > 0) {\n                        if (s[0] === '#') {\n                            return Color.Format.CSS.parseHex(s);\n                        }\n                        else {\n                            return s;\n                        }\n                    }\n                    collector.error(( nls.localize(\n                        'invalid.default.colorType',\n                        \"{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.\",\n                        name\n                    )));\n                    return Color.red;\n                };\n                for (const colorContribution of extensionValue) {\n                    if (typeof colorContribution.id !== 'string' || colorContribution.id.length === 0) {\n                        collector.error(( nls.localize(\n                            'invalid.id',\n                            \"'configuration.colors.id' must be defined and can not be empty\"\n                        )));\n                        return;\n                    }\n                    if (!colorContribution.id.match(colorIdPattern)) {\n                        collector.error(( nls.localize(\n                            'invalid.id.format',\n                            \"'configuration.colors.id' must only contain letters, digits and dots and can not start with a dot\"\n                        )));\n                        return;\n                    }\n                    if (typeof colorContribution.description !== 'string' || colorContribution.id.length === 0) {\n                        collector.error(( nls.localize(\n                            'invalid.description',\n                            \"'configuration.colors.description' must be defined and can not be empty\"\n                        )));\n                        return;\n                    }\n                    const defaults = colorContribution.defaults;\n                    if (!defaults || typeof defaults !== 'object' || typeof defaults.light !== 'string' || typeof defaults.dark !== 'string') {\n                        collector.error(( nls.localize(\n                            'invalid.defaults',\n                            \"'configuration.colors.defaults' must be defined and must contain 'light' and 'dark'\"\n                        )));\n                        return;\n                    }\n                    if (defaults.highContrast && typeof defaults.highContrast !== 'string') {\n                        collector.error(( nls.localize(\n                            'invalid.defaults.highContrast',\n                            \"If defined, 'configuration.colors.defaults.highContrast' must be a string.\"\n                        )));\n                        return;\n                    }\n                    if (defaults.highContrastLight && typeof defaults.highContrastLight !== 'string') {\n                        collector.error(( nls.localize(\n                            'invalid.defaults.highContrastLight',\n                            \"If defined, 'configuration.colors.defaults.highContrastLight' must be a string.\"\n                        )));\n                        return;\n                    }\n                    colorRegistry.registerColor(colorContribution.id, {\n                        light: parseColorValue(defaults.light, 'configuration.colors.defaults.light'),\n                        dark: parseColorValue(defaults.dark, 'configuration.colors.defaults.dark'),\n                        hcDark: parseColorValue(defaults.highContrast ?? defaults.dark, 'configuration.colors.defaults.highContrast'),\n                        hcLight: parseColorValue(defaults.highContrastLight ?? defaults.light, 'configuration.colors.defaults.highContrastLight'),\n                    }, colorContribution.description);\n                }\n            }\n            for (const extension of delta.removed) {\n                const extensionValue = extension.value;\n                for (const colorContribution of extensionValue) {\n                    colorRegistry.deregisterColor(colorContribution.id);\n                }\n            }\n        });\n    }\n}\nexport { ColorExtensionPoint };\n"],
  "mappings": "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",
  "names": []
}
