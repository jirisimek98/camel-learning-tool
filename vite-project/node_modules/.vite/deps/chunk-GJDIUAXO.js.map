{
  "version": 3,
  "sources": ["../../vscode/external/tslib/tslib.es6.js", "../../vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js"],
  "sourcesContent": ["function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\nexport { __decorate, __param };\n", "import { cloneAndChange } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { getRemoteName } from 'monaco-editor/esm/vs/platform/remote/common/remoteHosts.js';\nimport { TELEMETRY_SETTING_ID, TELEMETRY_CRASH_REPORTER_SETTING_ID, TELEMETRY_OLD_SETTING_ID } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nclass TelemetryTrustedValue {\n    constructor(value) {\n        this.value = value;\n        this.isTrustedTelemetryValue = true;\n    }\n}\nclass NullEndpointTelemetryService {\n    async publicLog(_endpoint, _eventName, _data) {\n    }\n    async publicLogError(_endpoint, _errorEventName, _data) {\n    }\n}\nconst extensionTelemetryLogChannelId = 'extensionTelemetryLog';\nfunction supportsTelemetry(productService, environmentService) {\n    if (!environmentService.isBuilt && !environmentService.disableTelemetry) {\n        return true;\n    }\n    return !(environmentService.disableTelemetry || !productService.enableTelemetry || environmentService.extensionTestsLocationURI);\n}\nfunction isLoggingOnly(productService, environmentService) {\n    if (environmentService.isBuilt) {\n        return false;\n    }\n    if (environmentService.disableTelemetry) {\n        return false;\n    }\n    if (productService.enableTelemetry && productService.aiConfig?.ariaKey) {\n        return false;\n    }\n    return true;\n}\nfunction getTelemetryLevel(configurationService) {\n    const newConfig = configurationService.getValue(TELEMETRY_SETTING_ID);\n    const crashReporterConfig = configurationService.getValue(TELEMETRY_CRASH_REPORTER_SETTING_ID);\n    const oldConfig = configurationService.getValue(TELEMETRY_OLD_SETTING_ID);\n    if (oldConfig === false || crashReporterConfig === false) {\n        return 0 ;\n    }\n    switch (newConfig ?? \"all\" ) {\n        case \"all\" :\n            return 3 ;\n        case \"error\" :\n            return 2 ;\n        case \"crash\" :\n            return 1 ;\n        case \"off\" :\n            return 0 ;\n    }\n}\nconst telemetryAllowedAuthorities = ( new Set(\n    ['ssh-remote', 'dev-container', 'attached-container', 'wsl', 'tunnel', 'codespaces', 'amlext']\n));\nfunction cleanRemoteAuthority(remoteAuthority) {\n    if (!remoteAuthority) {\n        return 'none';\n    }\n    const remoteName = getRemoteName(remoteAuthority);\n    return ( telemetryAllowedAuthorities.has(remoteName)) ? remoteName : 'other';\n}\nfunction anonymizeFilePaths(stack, cleanupPatterns) {\n    if (!stack || (!stack.includes('/') && !stack.includes('\\\\'))) {\n        return stack;\n    }\n    let updatedStack = stack;\n    const cleanUpIndexes = [];\n    for (const regexp of cleanupPatterns) {\n        while (true) {\n            const result = regexp.exec(stack);\n            if (!result) {\n                break;\n            }\n            cleanUpIndexes.push([result.index, regexp.lastIndex]);\n        }\n    }\n    const nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n    const fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n    let lastIndex = 0;\n    updatedStack = '';\n    while (true) {\n        const result = fileRegex.exec(stack);\n        if (!result) {\n            break;\n        }\n        const overlappingRange = ( cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex));\n        if (!nodeModulesRegex.test(result[0]) && !overlappingRange) {\n            updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n            lastIndex = fileRegex.lastIndex;\n        }\n    }\n    if (lastIndex < stack.length) {\n        updatedStack += stack.substr(lastIndex);\n    }\n    return updatedStack;\n}\nfunction removePropertiesWithPossibleUserInfo(property) {\n    if (!property) {\n        return property;\n    }\n    const userDataRegexes = [\n        { label: 'Google API Key', regex: /AIza[A-Za-z0-9_\\\\\\-]{35}/ },\n        { label: 'Slack Token', regex: /xox[pbar]\\-[A-Za-z0-9]/ },\n        { label: 'Generic Secret', regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },\n        { label: 'Email', regex: /@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+/ }\n    ];\n    for (const secretRegex of userDataRegexes) {\n        if (secretRegex.regex.test(property)) {\n            return `<REDACTED: ${secretRegex.label}>`;\n        }\n    }\n    return property;\n}\nfunction cleanData(data, cleanUpPatterns) {\n    return cloneAndChange(data, value => {\n        if (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, 'isTrustedTelemetryValue')) {\n            return value.value;\n        }\n        if (typeof value === 'string') {\n            let updatedProperty = value.replaceAll('%20', ' ');\n            updatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);\n            for (const regexp of cleanUpPatterns) {\n                updatedProperty = updatedProperty.replace(regexp, '');\n            }\n            updatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);\n            return updatedProperty;\n        }\n        return undefined;\n    });\n}\nexport { NullEndpointTelemetryService, TelemetryTrustedValue, cleanData, cleanRemoteAuthority, extensionTelemetryLogChannelId, getTelemetryLevel, isLoggingOnly, supportsTelemetry };\n"],
  "mappings": "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",
  "names": []
}
