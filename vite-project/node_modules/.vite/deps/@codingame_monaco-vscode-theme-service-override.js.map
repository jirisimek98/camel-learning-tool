{
  "version": 3,
  "sources": ["../../vscode/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/colorThemeData.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/themeCompatibility.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/plistParser.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/textMateScopeMatcher.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/fileIconThemeSchema.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/productIconThemeSchema.js", "../../vscode/vscode/src/vs/workbench/services/themes/browser/fileIconThemeData.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/themeExtensionPoints.js", "../../vscode/vscode/src/vs/workbench/services/themes/common/themeConfiguration.js", "../../vscode/vscode/src/vs/workbench/services/themes/browser/productIconThemeData.js", "../../vscode/service-override/theme.js"],
  "sourcesContent": ["import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ThemeSettingDefaults, ThemeSettings, ExtensionData, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME, COLOR_THEME_LIGHT_INITIAL_COLORS, COLOR_THEME_DARK_INITIAL_COLORS } from '../common/workbenchThemeService.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport * as errors from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { ColorThemeData } from '../common/colorThemeData.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { registerFileIconThemeSchemas } from '../common/fileIconThemeSchema.js';\nimport { dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { FileIconThemeData, FileIconThemeLoader } from './fileIconThemeData.js';\nimport { createStyleSheet } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { registerColorThemeSchemas } from '../common/colorThemeSchema.js';\nimport { getRemoteAuthority } from 'monaco-editor/esm/vs/platform/remote/common/remoteHosts.js';\nimport { IWorkbenchLayoutService } from '../../layout/browser/layoutService.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint } from '../common/themeExtensionPoints.js';\nimport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas } from '../common/themeConfiguration.js';\nimport { ProductIconThemeData, DEFAULT_PRODUCT_ICON_THEME_ID } from './productIconThemeData.js';\nimport { registerProductIconThemeSchemas } from '../common/productIconThemeSchema.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { ColorScheme } from 'monaco-editor/esm/vs/platform/theme/common/theme.js';\nimport { IHostColorSchemeService } from '../common/hostColorSchemeService.js';\nimport { Sequencer, RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { IUserDataInitializationService } from '../../userData/browser/userDataInit.js';\nimport { getIconsStyleSheet } from 'monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js';\nimport { getColorRegistry, asCssVariableName } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nconst PERSISTED_OS_COLOR_SCHEME = 'osColorScheme';\nconst PERSISTED_OS_COLOR_SCHEME_SCOPE = -1 ;\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst DEFAULT_FILE_ICON_THEME_ID = 'vscode.vscode-theme-seti-vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst fileIconThemeRulesClassName = 'contributedFileIconTheme';\nconst productIconThemeRulesClassName = 'contributedProductIconTheme';\nconst themingRegistry = ( (Registry.as(Extensions.ThemingContribution)));\nfunction validateThemeId(theme) {\n    switch (theme) {\n        case VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n        case VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n        case VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n        case VS_HC_LIGHT_THEME: return `hc-light ${defaultThemeExtensionId}-themes-hc_light-json`;\n    }\n    return theme;\n}\nconst colorThemesExtPoint = registerColorThemeExtensionPoint();\nconst fileIconThemesExtPoint = registerFileIconThemeExtensionPoint();\nconst productIconThemesExtPoint = registerProductIconThemeExtensionPoint();\nlet WorkbenchThemeService = class WorkbenchThemeService {\n    constructor(extensionService, storageService, configurationService, telemetryService, environmentService, fileService, extensionResourceLoaderService, layoutService, logService, hostColorService, userDataInitializationService, languageService) {\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.environmentService = environmentService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.logService = logService;\n        this.hostColorService = hostColorService;\n        this.hasDefaultUpdated = false;\n        this.themeExtensionsActivated = ( (new Map()));\n        this.container = layoutService.container;\n        this.settings = ( (new ThemeConfiguration(configurationService)));\n        this.colorThemeRegistry = ( (new ThemeRegistry(colorThemesExtPoint, ColorThemeData.fromExtensionTheme)));\n        this.colorThemeWatcher = ( (new ThemeFileWatcher(fileService, environmentService, this.reloadCurrentColorTheme.bind(this))));\n        this.onColorThemeChange = ( (new Emitter({ leakWarningThreshold: 400 })));\n        this.currentColorTheme = ColorThemeData.createUnloadedTheme('');\n        this.colorThemeSequencer = ( (new Sequencer()));\n        this.fileIconThemeWatcher = ( (new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentFileIconTheme.bind(this)\n        )));\n        this.fileIconThemeRegistry = ( (new ThemeRegistry(\n            fileIconThemesExtPoint,\n            FileIconThemeData.fromExtensionTheme,\n            true,\n            FileIconThemeData.noIconTheme\n        )));\n        this.fileIconThemeLoader = ( (new FileIconThemeLoader(extensionResourceLoaderService, languageService)));\n        this.onFileIconThemeChange = ( (new Emitter({ leakWarningThreshold: 400 })));\n        this.currentFileIconTheme = FileIconThemeData.createUnloadedTheme('');\n        this.fileIconThemeSequencer = ( (new Sequencer()));\n        this.productIconThemeWatcher = ( (new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentProductIconTheme.bind(this)\n        )));\n        this.productIconThemeRegistry = ( (new ThemeRegistry(\n            productIconThemesExtPoint,\n            ProductIconThemeData.fromExtensionTheme,\n            true,\n            ProductIconThemeData.defaultTheme\n        )));\n        this.onProductIconThemeChange = ( (new Emitter()));\n        this.currentProductIconTheme = ProductIconThemeData.createUnloadedTheme('');\n        this.productIconThemeSequencer = ( (new Sequencer()));\n        let themeData = ColorThemeData.fromStorageData(this.storageService);\n        const colorThemeSetting = this.settings.colorTheme;\n        if (themeData && colorThemeSetting !== themeData.settingsId && this.settings.isDefaultColorTheme()) {\n            this.hasDefaultUpdated = themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK_OLD || themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD;\n            themeData = undefined;\n        }\n        const preferredColorScheme = this.getPreferredColorScheme();\n        const defaultColorMap = colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_LIGHT ? COLOR_THEME_LIGHT_INITIAL_COLORS : colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_DARK ? COLOR_THEME_DARK_INITIAL_COLORS : undefined;\n        if (preferredColorScheme && themeData?.type !== preferredColorScheme && this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE) !== preferredColorScheme) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(preferredColorScheme, undefined);\n        }\n        if (!themeData) {\n            const initialColorTheme = environmentService.options?.initialColorTheme;\n            if (initialColorTheme) {\n                themeData = ColorThemeData.createUnloadedThemeForThemeType(initialColorTheme.themeType, initialColorTheme.colors ?? defaultColorMap);\n            }\n        }\n        if (!themeData) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(isWeb ? ColorScheme.LIGHT : ColorScheme.DARK, defaultColorMap);\n        }\n        themeData.setCustomizations(this.settings);\n        this.applyTheme(themeData, undefined, true);\n        const fileIconData = FileIconThemeData.fromStorageData(this.storageService);\n        if (fileIconData) {\n            this.applyAndSetFileIconTheme(fileIconData, true);\n        }\n        const productIconData = ProductIconThemeData.fromStorageData(this.storageService);\n        if (productIconData) {\n            this.applyAndSetProductIconTheme(productIconData, true);\n        }\n        Promise.all([extensionService.whenInstalledExtensionsRegistered(), userDataInitializationService.whenInitializationFinished()]).then(_ => {\n            this.installConfigurationListener();\n            this.installPreferredSchemeListener();\n            this.installRegistryListeners();\n            this.initialize().catch(errors.onUnexpectedError);\n        });\n        const codiconStyleSheet = createStyleSheet();\n        codiconStyleSheet.id = 'codiconStyles';\n        const iconsStyleSheet = getIconsStyleSheet(this);\n        function updateAll() {\n            codiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n        }\n        const delayer = ( (new RunOnceScheduler(updateAll, 0)));\n        iconsStyleSheet.onDidChange(() => delayer.schedule());\n        delayer.schedule();\n    }\n    initialize() {\n        const extDevLocs = this.environmentService.extensionDevelopmentLocationURI;\n        const extDevLoc = extDevLocs && extDevLocs.length === 1 ? extDevLocs[0] : undefined;\n        const initializeColorTheme = async () => {\n            const devThemes = this.colorThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setColorTheme(devThemes[0].id, 8 );\n            }\n            const fallbackTheme = this.currentColorTheme.type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, fallbackTheme);\n            const preferredColorScheme = this.getPreferredColorScheme();\n            const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n            if (preferredColorScheme !== prevScheme) {\n                this.storageService.store(PERSISTED_OS_COLOR_SCHEME, preferredColorScheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 0 );\n                if (preferredColorScheme && theme?.type !== preferredColorScheme) {\n                    return this.applyPreferredColorTheme(preferredColorScheme);\n                }\n            }\n            return this.setColorTheme(theme && theme.id, undefined);\n        };\n        const initializeFileIconTheme = async () => {\n            const devThemes = this.fileIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setFileIconTheme(devThemes[0].id, 8 );\n            }\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            return this.setFileIconTheme(theme ? theme.id : DEFAULT_FILE_ICON_THEME_ID, undefined);\n        };\n        const initializeProductIconTheme = async () => {\n            const devThemes = this.productIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setProductIconTheme(devThemes[0].id, 8 );\n            }\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            return this.setProductIconTheme(theme ? theme.id : DEFAULT_PRODUCT_ICON_THEME_ID, undefined);\n        };\n        return Promise.all([initializeColorTheme(), initializeFileIconTheme(), initializeProductIconTheme()]);\n    }\n    installConfigurationListener() {\n        this.configurationService.onDidChangeConfiguration(e => {\n            let lazyPreferredColorScheme = null;\n            const getPreferredColorScheme = () => {\n                if (lazyPreferredColorScheme === null) {\n                    lazyPreferredColorScheme = this.getPreferredColorScheme();\n                }\n                return lazyPreferredColorScheme;\n            };\n            if (e.affectsConfiguration(ThemeSettings.COLOR_THEME)) {\n                this.restoreColorTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME) || e.affectsConfiguration(ThemeSettings.DETECT_HC)) {\n                this.handlePreferredSchemeUpdated();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_DARK_THEME) && getPreferredColorScheme() === ColorScheme.DARK) {\n                this.applyPreferredColorTheme(ColorScheme.DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_DARK_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_DARK) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.FILE_ICON_THEME)) {\n                this.restoreFileIconTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PRODUCT_ICON_THEME)) {\n                this.restoreProductIconTheme();\n            }\n            if (this.currentColorTheme) {\n                let hasColorChanges = false;\n                if (e.affectsConfiguration(ThemeSettings.COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomColors(this.settings.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomTokenColors(this.settings.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomSemanticTokenColors(this.settings.semanticTokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    this.updateDynamicCSSRules(this.currentColorTheme);\n                    this.onColorThemeChange.fire(this.currentColorTheme);\n                }\n            }\n        });\n    }\n    installRegistryListeners() {\n        let prevColorId = undefined;\n        this.colorThemeRegistry.onDidChange(async (event) => {\n            updateColorThemeConfigurationSchemas(event.themes);\n            if (await this.restoreColorTheme()) {\n                if (this.currentColorTheme.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK && !types.isUndefined(prevColorId) && (await this.colorThemeRegistry.findThemeById(prevColorId))) {\n                    await this.setColorTheme(prevColorId, 'auto');\n                    prevColorId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentColorTheme.settingsId)))) {\n                    await this.reloadCurrentColorTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentColorTheme.settingsId)))) {\n                prevColorId = this.currentColorTheme.id;\n                const defaultTheme = this.colorThemeRegistry.findThemeBySettingsId(ThemeSettingDefaults.COLOR_THEME_DARK);\n                await this.setColorTheme(defaultTheme, 'auto');\n            }\n        });\n        let prevFileIconId = undefined;\n        this.fileIconThemeRegistry.onDidChange(async (event) => {\n            updateFileIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreFileIconTheme()) {\n                if (this.currentFileIconTheme.id === DEFAULT_FILE_ICON_THEME_ID && !types.isUndefined(prevFileIconId) && this.fileIconThemeRegistry.findThemeById(prevFileIconId)) {\n                    await this.setFileIconTheme(prevFileIconId, 'auto');\n                    prevFileIconId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentFileIconTheme.settingsId)))) {\n                    await this.reloadCurrentFileIconTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentFileIconTheme.settingsId)))) {\n                prevFileIconId = this.currentFileIconTheme.id;\n                await this.setFileIconTheme(DEFAULT_FILE_ICON_THEME_ID, 'auto');\n            }\n        });\n        let prevProductIconId = undefined;\n        this.productIconThemeRegistry.onDidChange(async (event) => {\n            updateProductIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreProductIconTheme()) {\n                if (this.currentProductIconTheme.id === DEFAULT_PRODUCT_ICON_THEME_ID && !types.isUndefined(prevProductIconId) && this.productIconThemeRegistry.findThemeById(prevProductIconId)) {\n                    await this.setProductIconTheme(prevProductIconId, 'auto');\n                    prevProductIconId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentProductIconTheme.settingsId)))) {\n                    await this.reloadCurrentProductIconTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentProductIconTheme.settingsId)))) {\n                prevProductIconId = this.currentProductIconTheme.id;\n                await this.setProductIconTheme(DEFAULT_PRODUCT_ICON_THEME_ID, 'auto');\n            }\n        });\n        return Promise.all([this.getColorThemes(), this.getFileIconThemes(), this.getProductIconThemes()]).then(([ct, fit, pit]) => {\n            updateColorThemeConfigurationSchemas(ct);\n            updateFileIconThemeConfigurationSchemas(fit);\n            updateProductIconThemeConfigurationSchemas(pit);\n        });\n    }\n    installPreferredSchemeListener() {\n        this.hostColorService.onDidChangeColorScheme(() => this.handlePreferredSchemeUpdated());\n    }\n    async handlePreferredSchemeUpdated() {\n        const scheme = this.getPreferredColorScheme();\n        const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n        if (scheme !== prevScheme) {\n            this.storageService.store(PERSISTED_OS_COLOR_SCHEME, scheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 1 );\n            if (scheme) {\n                if (!prevScheme) {\n                    this.themeSettingIdBeforeSchemeSwitch = this.settings.colorTheme;\n                }\n                return this.applyPreferredColorTheme(scheme);\n            }\n            else if (prevScheme && this.themeSettingIdBeforeSchemeSwitch) {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.themeSettingIdBeforeSchemeSwitch, undefined);\n                if (theme) {\n                    this.setColorTheme(theme.id, 'auto');\n                }\n            }\n        }\n        return undefined;\n    }\n    getPreferredColorScheme() {\n        if (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n            return this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n        }\n        if (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            return this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n        }\n        return undefined;\n    }\n    async applyPreferredColorTheme(type) {\n        let settingId;\n        switch (type) {\n            case ColorScheme.LIGHT:\n                settingId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                settingId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                settingId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n            default:\n                settingId = ThemeSettings.PREFERRED_DARK_THEME;\n        }\n        const themeSettingId = this.configurationService.getValue(settingId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(themeSettingId, undefined);\n            if (theme) {\n                const configurationTarget = this.settings.findAutoConfigurationTarget(settingId);\n                return this.setColorTheme(theme.id, configurationTarget);\n            }\n        }\n        return null;\n    }\n    hasUpdatedDefaultThemes() {\n        return this.hasDefaultUpdated;\n    }\n    getColorTheme() {\n        return this.currentColorTheme;\n    }\n    async getColorThemes() {\n        return this.colorThemeRegistry.getThemes();\n    }\n    async getMarketplaceColorThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.colorThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    get onDidColorThemeChange() {\n        return this.onColorThemeChange.event;\n    }\n    setColorTheme(themeIdOrTheme, settingsTarget) {\n        return this.colorThemeSequencer.queue(async () => {\n            return this.internalSetColorTheme(themeIdOrTheme, settingsTarget);\n        });\n    }\n    async internalSetColorTheme(themeIdOrTheme, settingsTarget) {\n        if (!themeIdOrTheme) {\n            return null;\n        }\n        const themeId = types.isString(themeIdOrTheme) ? validateThemeId(themeIdOrTheme) : themeIdOrTheme.id;\n        if (this.currentColorTheme.isLoaded && themeId === this.currentColorTheme.id) {\n            if (settingsTarget !== 'preview') {\n                this.currentColorTheme.toStorage(this.storageService);\n            }\n            return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n        }\n        let themeData = this.colorThemeRegistry.findThemeById(themeId);\n        if (!themeData) {\n            if (themeIdOrTheme instanceof ColorThemeData) {\n                themeData = themeIdOrTheme;\n            }\n            else {\n                return null;\n            }\n        }\n        try {\n            await themeData.ensureLoaded(this.extensionResourceLoaderService);\n            themeData.setCustomizations(this.settings);\n            return this.applyTheme(themeData, settingsTarget);\n        }\n        catch (error) {\n            throw new Error(nls.localize('error.cannotloadtheme', \"Unable to load {0}: {1}\", themeData.location?.toString(), error.message));\n        }\n    }\n    reloadCurrentColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            try {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.currentColorTheme.settingsId) || this.currentColorTheme;\n                await theme.reload(this.extensionResourceLoaderService);\n                theme.setCustomizations(this.settings);\n                await this.applyTheme(theme, undefined, false);\n            }\n            catch (error) {\n                this.logService.info('Unable to reload {0}: {1}', this.currentColorTheme.location?.toString());\n            }\n        });\n    }\n    async restoreColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            const settingId = this.settings.colorTheme;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentColorTheme.settingsId) {\n                    await this.internalSetColorTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentColorTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService);\n                    theme.setCustomizations(this.settings);\n                    await this.applyTheme(theme, undefined, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    updateDynamicCSSRules(themeData) {\n        const cssRules = ( (new Set()));\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!( (cssRules.has(rule)))) {\n                    cssRules.add(rule);\n                }\n            }\n        };\n        ruleCollector.addRule(`.monaco-workbench { forced-color-adjust: none; }`);\n        themingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n        const colorVariables = [];\n        for (const item of getColorRegistry().getColors()) {\n            const color = themeData.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${( ( color.toString()))};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-workbench { ${colorVariables.join('\\n')} }`);\n        _applyRules([...cssRules].join('\\n'), colorThemeRulesClassName);\n    }\n    applyTheme(newTheme, settingsTarget, silent = false) {\n        this.updateDynamicCSSRules(newTheme);\n        if (this.currentColorTheme.id) {\n            this.container.classList.remove(...this.currentColorTheme.classNames);\n        }\n        else {\n            this.container.classList.remove(VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME);\n        }\n        this.container.classList.add(...newTheme.classNames);\n        this.currentColorTheme.clearCaches();\n        this.currentColorTheme = newTheme;\n        if (!this.colorThemingParticipantChangeListener) {\n            this.colorThemingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n        }\n        this.colorThemeWatcher.update(newTheme);\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        if (newTheme.isLoaded && settingsTarget !== 'preview') {\n            newTheme.toStorage(this.storageService);\n        }\n        return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n    }\n    sendTelemetry(themeId, themeData, themeType) {\n        if (themeData) {\n            const key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                this.telemetryService.publicLog2('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    }\n    async getFileIconThemes() {\n        return this.fileIconThemeRegistry.getThemes();\n    }\n    getFileIconTheme() {\n        return this.currentFileIconTheme;\n    }\n    get onDidFileIconThemeChange() {\n        return this.onFileIconThemeChange.event;\n    }\n    async setFileIconTheme(iconThemeOrId, settingsTarget) {\n        return this.fileIconThemeSequencer.queue(async () => {\n            return this.internalSetFileIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetFileIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = types.isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentFileIconTheme.id || !this.currentFileIconTheme.isLoaded) {\n            let newThemeData = this.fileIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof FileIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = FileIconThemeData.noIconTheme;\n            }\n            await newThemeData.ensureLoaded(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(newThemeData);\n        }\n        const themeData = this.currentFileIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setFileIconTheme(this.currentFileIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceFileIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.fileIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            await this.currentFileIconTheme.reload(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(this.currentFileIconTheme);\n        });\n    }\n    async restoreFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.fileIconTheme;\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentFileIconTheme.settingsId) {\n                    await this.internalSetFileIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentFileIconTheme) {\n                    await theme.ensureLoaded(this.fileIconThemeLoader);\n                    this.applyAndSetFileIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetFileIconTheme(iconThemeData, silent = false) {\n        this.currentFileIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, fileIconThemeRulesClassName);\n        if (iconThemeData.id) {\n            this.container.classList.add(fileIconsEnabledClass);\n        }\n        else {\n            this.container.classList.remove(fileIconsEnabledClass);\n        }\n        this.fileIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        if (!silent) {\n            this.onFileIconThemeChange.fire(this.currentFileIconTheme);\n        }\n    }\n    async getProductIconThemes() {\n        return this.productIconThemeRegistry.getThemes();\n    }\n    getProductIconTheme() {\n        return this.currentProductIconTheme;\n    }\n    get onDidProductIconThemeChange() {\n        return this.onProductIconThemeChange.event;\n    }\n    async setProductIconTheme(iconThemeOrId, settingsTarget) {\n        return this.productIconThemeSequencer.queue(async () => {\n            return this.internalSetProductIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetProductIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = types.isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentProductIconTheme.id || !this.currentProductIconTheme.isLoaded) {\n            let newThemeData = this.productIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof ProductIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = ProductIconThemeData.defaultTheme;\n            }\n            await newThemeData.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(newThemeData);\n        }\n        const themeData = this.currentProductIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setProductIconTheme(this.currentProductIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceProductIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.productIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            await this.currentProductIconTheme.reload(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(this.currentProductIconTheme);\n        });\n    }\n    async restoreProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.productIconTheme;\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentProductIconTheme.settingsId) {\n                    await this.internalSetProductIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentProductIconTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n                    this.applyAndSetProductIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetProductIconTheme(iconThemeData, silent = false) {\n        this.currentProductIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, productIconThemeRulesClassName);\n        this.productIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'productIcon');\n        }\n        if (!silent) {\n            this.onProductIconThemeChange.fire(this.currentProductIconTheme);\n        }\n    }\n};\nWorkbenchThemeService = ( (__decorate([\n    ( (__param(0, IExtensionService))),\n    ( (__param(1, IStorageService))),\n    ( (__param(2, IConfigurationService))),\n    ( (__param(3, ITelemetryService))),\n    ( (__param(4, IBrowserWorkbenchEnvironmentService))),\n    ( (__param(5, IFileService))),\n    ( (__param(6, IExtensionResourceLoaderService))),\n    ( (__param(7, IWorkbenchLayoutService))),\n    ( (__param(8, ILogService))),\n    ( (__param(9, IHostColorSchemeService))),\n    ( (__param(10, IUserDataInitializationService))),\n    ( (__param(11, ILanguageService)))\n], WorkbenchThemeService)));\nclass ThemeFileWatcher {\n    constructor(fileService, environmentService, onUpdate) {\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.onUpdate = onUpdate;\n    }\n    update(theme) {\n        if (!resources.isEqual(theme.location, this.watchedLocation)) {\n            this.dispose();\n            if (theme.location && (theme.watch || this.environmentService.isExtensionDevelopment)) {\n                this.watchedLocation = theme.location;\n                this.watcherDisposable = this.fileService.watch(theme.location);\n                this.fileService.onDidFilesChange(e => {\n                    if (this.watchedLocation && e.contains(this.watchedLocation, 0 )) {\n                        this.onUpdate();\n                    }\n                });\n            }\n        }\n    }\n    dispose() {\n        this.watcherDisposable = dispose(this.watcherDisposable);\n        this.fileChangeListener = dispose(this.fileChangeListener);\n        this.watchedLocation = undefined;\n    }\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    const themeStyles = document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        const elStyle = document.createElement('style');\n        elStyle.type = 'text/css';\n        elStyle.className = rulesClassName;\n        elStyle.textContent = styleSheetContent;\n        document.head.appendChild(elStyle);\n    }\n    else {\n        themeStyles[0].textContent = styleSheetContent;\n    }\n}\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\nregisterProductIconThemeSchemas();\nexport { WorkbenchThemeService };\n", "import { basename } from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_WILDCARD, themeScopeRegex, ExtensionData, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME } from './workbenchThemeService.js';\nimport { convertSettings } from './themeCompatibility.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { editorForeground, editorBackground, Extensions } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { getThemeTypeSelector } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { parse } from './plistParser.js';\nimport { TokenStyle, parseClassifierString, SemanticTokenRule, getTokenClassificationRegistry } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { createMatchers } from './textMateScopeMatcher.js';\nimport { ColorScheme } from 'monaco-editor/esm/vs/platform/theme/common/theme.js';\nconst colorRegistry = ( Registry.as(Extensions.ColorContribution));\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\nconst tokenGroupToScopesMap = {\n    comments: ['comment', 'punctuation.definition.comment'],\n    strings: ['string', 'meta.embedded.assembly'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nclass ColorThemeData {\n    static { this.STORAGE_KEY = 'colorThemeData'; }\n    constructor(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.semanticTokenRules = [];\n        this.customSemanticTokenRules = [];\n        this.textMateThemingRules = undefined;\n        this.tokenColorIndex = undefined;\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    get semanticHighlighting() {\n        if (this.customSemanticHighlighting !== undefined) {\n            return this.customSemanticHighlighting;\n        }\n        if (this.customSemanticHighlightingDeprecated !== undefined) {\n            return this.customSemanticHighlightingDeprecated;\n        }\n        return !!this.themeSemanticHighlighting;\n    }\n    get tokenColors() {\n        if (!this.textMateThemingRules) {\n            const result = [];\n            const foreground = this.getColor(editorForeground) || this.getDefault(editorForeground);\n            const background = this.getColor(editorBackground) || this.getDefault(editorBackground);\n            result.push({\n                settings: {\n                    foreground: normalizeColor(foreground),\n                    background: normalizeColor(background)\n                }\n            });\n            let hasDefaultTokens = false;\n            function addRule(rule) {\n                if (rule.scope && rule.settings) {\n                    if (rule.scope === 'token.info-token') {\n                        hasDefaultTokens = true;\n                    }\n                    result.push({ scope: rule.scope, settings: { foreground: normalizeColor(rule.settings.foreground), background: normalizeColor(rule.settings.background), fontStyle: rule.settings.fontStyle } });\n                }\n            }\n            this.themeTokenColors.forEach(addRule);\n            this.customTokenColors.forEach(addRule);\n            if (!hasDefaultTokens) {\n                defaultThemeColors[this.type].forEach(addRule);\n            }\n            this.textMateThemingRules = result;\n        }\n        return this.textMateThemingRules;\n    }\n    getColor(colorId, useDefault) {\n        let color = this.customColorMap[colorId];\n        if (color) {\n            return color;\n        }\n        color = this.colorMap[colorId];\n        if (useDefault !== false && types.isUndefined(color)) {\n            color = this.getDefault(colorId);\n        }\n        return color;\n    }\n    getTokenStyle(type, modifiers, language, useDefault = true, definitions = {}) {\n        const result = {\n            foreground: undefined,\n            bold: undefined,\n            underline: undefined,\n            strikethrough: undefined,\n            italic: undefined\n        };\n        const score = {\n            foreground: -1,\n            bold: -1,\n            underline: -1,\n            strikethrough: -1,\n            italic: -1\n        };\n        function _processStyle(matchScore, style, definition) {\n            if (style.foreground && score.foreground <= matchScore) {\n                score.foreground = matchScore;\n                result.foreground = style.foreground;\n                definitions.foreground = definition;\n            }\n            for (const p of ['bold', 'underline', 'strikethrough', 'italic']) {\n                const property = p;\n                const info = style[property];\n                if (info !== undefined) {\n                    if (score[property] <= matchScore) {\n                        score[property] = matchScore;\n                        result[property] = info;\n                        definitions[property] = definition;\n                    }\n                }\n            }\n        }\n        function _processSemanticTokenRule(rule) {\n            const matchScore = rule.selector.match(type, modifiers, language);\n            if (matchScore >= 0) {\n                _processStyle(matchScore, rule.style, rule);\n            }\n        }\n        this.semanticTokenRules.forEach(_processSemanticTokenRule);\n        this.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n        let hasUndefinedStyleProperty = false;\n        for (const k in score) {\n            const key = k;\n            if (score[key] === -1) {\n                hasUndefinedStyleProperty = true;\n            }\n            else {\n                score[key] = Number.MAX_VALUE;\n            }\n        }\n        if (hasUndefinedStyleProperty) {\n            for (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n                const matchScore = rule.selector.match(type, modifiers, language);\n                if (matchScore >= 0) {\n                    let style;\n                    if (rule.defaults.scopesToProbe) {\n                        style = this.resolveScopes(rule.defaults.scopesToProbe);\n                        if (style) {\n                            _processStyle(matchScore, style, rule.defaults.scopesToProbe);\n                        }\n                    }\n                    if (!style && useDefault !== false) {\n                        const tokenStyleValue = rule.defaults[this.type];\n                        style = this.resolveTokenStyleValue(tokenStyleValue);\n                        if (style) {\n                            _processStyle(matchScore, style, tokenStyleValue);\n                        }\n                    }\n                }\n            }\n        }\n        return TokenStyle.fromData(result);\n    }\n    resolveTokenStyleValue(tokenStyleValue) {\n        if (tokenStyleValue === undefined) {\n            return undefined;\n        }\n        else if (typeof tokenStyleValue === 'string') {\n            const { type, modifiers, language } = parseClassifierString(tokenStyleValue, '');\n            return this.getTokenStyle(type, modifiers, language);\n        }\n        else if (typeof tokenStyleValue === 'object') {\n            return tokenStyleValue;\n        }\n        return undefined;\n    }\n    getTokenColorIndex() {\n        if (!this.tokenColorIndex) {\n            const index = ( new TokenColorIndex());\n            this.tokenColors.forEach(rule => {\n                index.add(rule.settings.foreground);\n                index.add(rule.settings.background);\n            });\n            this.semanticTokenRules.forEach(r => index.add(r.style.foreground));\n            tokenClassificationRegistry.getTokenStylingDefaultRules().forEach(r => {\n                const defaultColor = r.defaults[this.type];\n                if (defaultColor && typeof defaultColor === 'object') {\n                    index.add(defaultColor.foreground);\n                }\n            });\n            this.customSemanticTokenRules.forEach(r => index.add(r.style.foreground));\n            this.tokenColorIndex = index;\n        }\n        return this.tokenColorIndex;\n    }\n    get tokenColorMap() {\n        return this.getTokenColorIndex().asArray();\n    }\n    getTokenStyleMetadata(typeWithLanguage, modifiers, defaultLanguage, useDefault = true, definitions = {}) {\n        const { type, language } = parseClassifierString(typeWithLanguage, defaultLanguage);\n        const style = this.getTokenStyle(type, modifiers, language, useDefault, definitions);\n        if (!style) {\n            return undefined;\n        }\n        return {\n            foreground: this.getTokenColorIndex().get(style.foreground),\n            bold: style.bold,\n            underline: style.underline,\n            strikethrough: style.strikethrough,\n            italic: style.italic,\n        };\n    }\n    getTokenStylingRuleScope(rule) {\n        if (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n            return 'setting';\n        }\n        if (this.semanticTokenRules.indexOf(rule) !== -1) {\n            return 'theme';\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    }\n    resolveScopes(scopes, definitions) {\n        if (!this.themeTokenScopeMatchers) {\n            this.themeTokenScopeMatchers = ( this.themeTokenColors.map(getScopeMatcher));\n        }\n        if (!this.customTokenScopeMatchers) {\n            this.customTokenScopeMatchers = ( this.customTokenColors.map(getScopeMatcher));\n        }\n        for (const scope of scopes) {\n            let foreground = undefined;\n            let fontStyle = undefined;\n            let foregroundScore = -1;\n            let fontStyleScore = -1;\n            let fontStyleThemingRule = undefined;\n            let foregroundThemingRule = undefined;\n            function findTokenStyleForScopeInScopes(scopeMatchers, themingRules) {\n                for (let i = 0; i < scopeMatchers.length; i++) {\n                    const score = scopeMatchers[i](scope);\n                    if (score >= 0) {\n                        const themingRule = themingRules[i];\n                        const settings = themingRules[i].settings;\n                        if (score >= foregroundScore && settings.foreground) {\n                            foreground = settings.foreground;\n                            foregroundScore = score;\n                            foregroundThemingRule = themingRule;\n                        }\n                        if (score >= fontStyleScore && types.isString(settings.fontStyle)) {\n                            fontStyle = settings.fontStyle;\n                            fontStyleScore = score;\n                            fontStyleThemingRule = themingRule;\n                        }\n                    }\n                }\n            }\n            findTokenStyleForScopeInScopes(this.themeTokenScopeMatchers, this.themeTokenColors);\n            findTokenStyleForScopeInScopes(this.customTokenScopeMatchers, this.customTokenColors);\n            if (foreground !== undefined || fontStyle !== undefined) {\n                if (definitions) {\n                    definitions.foreground = foregroundThemingRule;\n                    definitions.bold = definitions.italic = definitions.underline = definitions.strikethrough = fontStyleThemingRule;\n                    definitions.scope = scope;\n                }\n                return TokenStyle.fromSettings(foreground, fontStyle);\n            }\n        }\n        return undefined;\n    }\n    defines(colorId) {\n        return this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n    }\n    setCustomizations(settings) {\n        this.setCustomColors(settings.colorCustomizations);\n        this.setCustomTokenColors(settings.tokenColorCustomizations);\n        this.setCustomSemanticTokenColors(settings.semanticTokenColorCustomizations);\n    }\n    setCustomColors(colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        const themeSpecificColors = this.getThemeSpecificColors(colors);\n        if (types.isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    overwriteCustomColors(colors) {\n        for (const id in colors) {\n            const colorVal = colors[id];\n            if (typeof colorVal === 'string') {\n                this.customColorMap[id] = ( Color.fromHex(colorVal));\n            }\n        }\n    }\n    setCustomTokenColors(customTokenColors) {\n        this.customTokenColors = [];\n        this.customSemanticHighlightingDeprecated = undefined;\n        this.addCustomTokenColors(customTokenColors);\n        const themeSpecificTokenColors = this.getThemeSpecificColors(customTokenColors);\n        if (types.isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    setCustomSemanticTokenColors(semanticTokenColors) {\n        this.customSemanticTokenRules = [];\n        this.customSemanticHighlighting = undefined;\n        if (semanticTokenColors) {\n            this.customSemanticHighlighting = semanticTokenColors.enabled;\n            if (semanticTokenColors.rules) {\n                this.readSemanticTokenRules(semanticTokenColors.rules);\n            }\n            const themeSpecificColors = this.getThemeSpecificColors(semanticTokenColors);\n            if (types.isObject(themeSpecificColors)) {\n                if (themeSpecificColors.enabled !== undefined) {\n                    this.customSemanticHighlighting = themeSpecificColors.enabled;\n                }\n                if (themeSpecificColors.rules) {\n                    this.readSemanticTokenRules(themeSpecificColors.rules);\n                }\n            }\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n    }\n    isThemeScope(key) {\n        return key.charAt(0) === THEME_SCOPE_OPEN_PAREN && key.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN;\n    }\n    isThemeScopeMatch(themeId) {\n        const themeIdFirstChar = themeId.charAt(0);\n        const themeIdLastChar = themeId.charAt(themeId.length - 1);\n        const themeIdPrefix = themeId.slice(0, -1);\n        const themeIdInfix = themeId.slice(1, -1);\n        const themeIdSuffix = themeId.slice(1);\n        return themeId === this.settingsId\n            || (this.settingsId.includes(themeIdInfix) && themeIdFirstChar === THEME_SCOPE_WILDCARD && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.startsWith(themeIdPrefix) && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.endsWith(themeIdSuffix) && themeIdFirstChar === THEME_SCOPE_WILDCARD);\n    }\n    getThemeSpecificColors(colors) {\n        let themeSpecificColors;\n        for (const key in colors) {\n            const scopedColors = colors[key];\n            if (this.isThemeScope(key) && scopedColors instanceof Object && !Array.isArray(scopedColors)) {\n                const themeScopeList = key.match(themeScopeRegex) || [];\n                for (const themeScope of themeScopeList) {\n                    const themeId = themeScope.substring(1, themeScope.length - 1);\n                    if (this.isThemeScopeMatch(themeId)) {\n                        if (!themeSpecificColors) {\n                            themeSpecificColors = {};\n                        }\n                        const scopedThemeSpecificColors = scopedColors;\n                        for (const subkey in scopedThemeSpecificColors) {\n                            const originalColors = themeSpecificColors[subkey];\n                            const overrideColors = scopedThemeSpecificColors[subkey];\n                            if (Array.isArray(originalColors) && Array.isArray(overrideColors)) {\n                                themeSpecificColors[subkey] = originalColors.concat(overrideColors);\n                            }\n                            else if (overrideColors) {\n                                themeSpecificColors[subkey] = overrideColors;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return themeSpecificColors;\n    }\n    readSemanticTokenRules(tokenStylingRuleSection) {\n        for (const key in tokenStylingRuleSection) {\n            if (!this.isThemeScope(key)) {\n                try {\n                    const rule = readSemanticTokenRule(key, tokenStylingRuleSection[key]);\n                    if (rule) {\n                        this.customSemanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                }\n            }\n        }\n    }\n    addCustomTokenColors(customTokenColors) {\n        for (const tokenGroup in tokenGroupToScopesMap) {\n            const group = tokenGroup;\n            const value = customTokenColors[group];\n            if (value) {\n                const settings = typeof value === 'string' ? { foreground: value } : value;\n                const scopes = tokenGroupToScopesMap[group];\n                for (const scope of scopes) {\n                    this.customTokenColors.push({ scope, settings });\n                }\n            }\n        }\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (const rule of customTokenColors.textMateRules) {\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n        if (customTokenColors.semanticHighlighting !== undefined) {\n            this.customSemanticHighlightingDeprecated = customTokenColors.semanticHighlighting;\n        }\n    }\n    ensureLoaded(extensionResourceLoaderService) {\n        return !this.isLoaded ? this.load(extensionResourceLoaderService) : Promise.resolve(undefined);\n    }\n    reload(extensionResourceLoaderService) {\n        return this.load(extensionResourceLoaderService);\n    }\n    load(extensionResourceLoaderService) {\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        this.themeTokenColors = [];\n        this.clearCaches();\n        const result = {\n            colors: {},\n            textMateRules: [],\n            semanticTokenRules: [],\n            semanticHighlighting: false\n        };\n        return _loadColorTheme(extensionResourceLoaderService, this.location, result).then(_ => {\n            this.isLoaded = true;\n            this.semanticTokenRules = result.semanticTokenRules;\n            this.colorMap = result.colors;\n            this.themeTokenColors = result.textMateRules;\n            this.themeSemanticHighlighting = result.semanticHighlighting;\n        });\n    }\n    clearCaches() {\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.themeTokenScopeMatchers = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    toStorage(storageService) {\n        const colorMapData = {};\n        for (const key in this.colorMap) {\n            colorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        const value = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            themeTokenColors: ( this.themeTokenColors.map(tc => ({ settings: tc.settings, scope: tc.scope }))),\n            semanticTokenRules: ( this.semanticTokenRules.map(SemanticTokenRule.toJSONObject)),\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            themeSemanticHighlighting: this.themeSemanticHighlighting,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n        storageService.store(ColorThemeData.STORAGE_KEY, value, 0 , 0 );\n    }\n    get baseTheme() {\n        return this.classNames[0];\n    }\n    get classNames() {\n        return this.id.split(' ');\n    }\n    get type() {\n        switch (this.baseTheme) {\n            case VS_LIGHT_THEME: return ColorScheme.LIGHT;\n            case VS_HC_THEME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case VS_HC_LIGHT_THEME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    static createUnloadedThemeForThemeType(themeType, colorMap) {\n        return ColorThemeData.createUnloadedTheme(getThemeTypeSelector(themeType), colorMap);\n    }\n    static createUnloadedTheme(id, colorMap) {\n        const themeData = ( new ColorThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        if (colorMap) {\n            for (const id in colorMap) {\n                themeData.colorMap[id] = ( Color.fromHex(colorMap[id]));\n            }\n        }\n        return themeData;\n    }\n    static createLoadedEmptyTheme(id, settingsId) {\n        const themeData = ( new ColorThemeData(id, '', settingsId));\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ColorThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ColorThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'colorMap': {\n                        const colorMapData = data[key];\n                        for (const id in colorMapData) {\n                            theme.colorMap[id] = ( Color.fromHex(colorMapData[id]));\n                        }\n                        break;\n                    }\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'watch':\n                    case 'themeSemanticHighlighting':\n                        theme[key] = data[key];\n                        break;\n                    case 'semanticTokenRules': {\n                        const rulesData = data[key];\n                        if (Array.isArray(rulesData)) {\n                            for (const d of rulesData) {\n                                const rule = SemanticTokenRule.fromJSONObject(tokenClassificationRegistry, d);\n                                if (rule) {\n                                    theme.semanticTokenRules.push(rule);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    static fromExtensionTheme(theme, colorThemeLocation, extensionData) {\n        const baseTheme = theme['uiTheme'] || 'vs-dark';\n        const themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        const id = `${baseTheme} ${themeSelector}`;\n        const label = theme.label || basename(theme.path);\n        const settingsId = theme.id || label;\n        const themeData = ( new ColorThemeData(id, label, settingsId));\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n}\nfunction toCSSSelector(extensionId, path) {\n    if (path.startsWith('./')) {\n        path = path.substr(2);\n    }\n    let str = `${extensionId}-${path}`;\n    str = str.replace(/[^_a-zA-Z0-9-]/g, '-');\n    if (str.charAt(0).match(/[0-9-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nasync function _loadColorTheme(extensionResourceLoaderService, themeLocation, result) {\n    if (resources.extname(themeLocation) === '.json') {\n        const content = await extensionResourceLoaderService.readExtensionResource(themeLocation);\n        const errors = [];\n        const contentValue = json.parse(content, errors);\n        if (errors.length > 0) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.cannotparsejson',\n                \"Problems parsing JSON theme file: {0}\",\n                ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (json.getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.invalidformat',\n                \"Invalid format for JSON theme file: Object expected.\"\n            )))));\n        }\n        if (contentValue.include) {\n            await _loadColorTheme(extensionResourceLoaderService, resources.joinPath(resources.dirname(themeLocation), contentValue.include), result);\n        }\n        if (Array.isArray(contentValue.settings)) {\n            convertSettings(contentValue.settings, result);\n            return null;\n        }\n        result.semanticHighlighting = result.semanticHighlighting || contentValue.semanticHighlighting;\n        const colors = contentValue.colors;\n        if (colors) {\n            if (typeof colors !== 'object') {\n                return Promise.reject(( new Error(( nls.localize(\n                    { key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n                    ( themeLocation.toString())\n                )))));\n            }\n            for (const colorId in colors) {\n                const colorHex = colors[colorId];\n                if (typeof colorHex === 'string') {\n                    result.colors[colorId] = ( Color.fromHex(colors[colorId]));\n                }\n            }\n        }\n        const tokenColors = contentValue.tokenColors;\n        if (tokenColors) {\n            if (Array.isArray(tokenColors)) {\n                result.textMateRules.push(...tokenColors);\n            }\n            else if (typeof tokenColors === 'string') {\n                await _loadSyntaxTokens(extensionResourceLoaderService, resources.joinPath(resources.dirname(themeLocation), tokenColors), result);\n            }\n            else {\n                return Promise.reject(( new Error(( nls.localize(\n                    { key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n                    ( themeLocation.toString())\n                )))));\n            }\n        }\n        const semanticTokenColors = contentValue.semanticTokenColors;\n        if (semanticTokenColors && typeof semanticTokenColors === 'object') {\n            for (const key in semanticTokenColors) {\n                try {\n                    const rule = readSemanticTokenRule(key, semanticTokenColors[key]);\n                    if (rule) {\n                        result.semanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                    return Promise.reject(( new Error(( nls.localize(\n                        { key: 'error.invalidformat.semanticTokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                        \"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n                        ( themeLocation.toString())\n                    )))));\n                }\n            }\n        }\n    }\n    else {\n        return _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result);\n    }\n}\nfunction _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result) {\n    return extensionResourceLoaderService.readExtensionResource(themeLocation).then(content => {\n        try {\n            const contentValue = parse(content);\n            const settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.plist.invalidformat',\n                    \"Problem parsing tmTheme file: {0}. 'settings' is not array.\"\n                )))));\n            }\n            convertSettings(settings, result);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(( new Error(( nls.localize('error.cannotparse', \"Problems parsing tmTheme file: {0}\", e.message)))));\n        }\n    }, error => {\n        return Promise.reject(( new Error(( nls.localize(\n            'error.cannotload',\n            \"Problems loading tmTheme file {0}: {1}\",\n            ( themeLocation.toString()),\n            error.message\n        )))));\n    });\n}\nconst defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hcLight': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'hcDark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ]\n};\nconst noMatch = (_scope) => -1;\nfunction nameMatcher(identifers, scope) {\n    function findInIdents(s, lastIndent) {\n        for (let i = lastIndent - 1; i >= 0; i--) {\n            if (scopesAreMatching(s, identifers[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    if (scope.length < identifers.length) {\n        return -1;\n    }\n    let lastScopeIndex = scope.length - 1;\n    let lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], identifers.length);\n    if (lastIdentifierIndex >= 0) {\n        const score = (lastIdentifierIndex + 1) * 0x10000 + identifers[lastIdentifierIndex].length;\n        while (lastScopeIndex >= 0) {\n            lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], lastIdentifierIndex);\n            if (lastIdentifierIndex === -1) {\n                return -1;\n            }\n        }\n        return score;\n    }\n    return -1;\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction getScopeMatcher(rule) {\n    const ruleScope = rule.scope;\n    if (!ruleScope || !rule.settings) {\n        return noMatch;\n    }\n    const matchers = [];\n    if (Array.isArray(ruleScope)) {\n        for (const rs of ruleScope) {\n            createMatchers(rs, nameMatcher, matchers);\n        }\n    }\n    else {\n        createMatchers(ruleScope, nameMatcher, matchers);\n    }\n    if (matchers.length === 0) {\n        return noMatch;\n    }\n    return (scope) => {\n        let max = matchers[0].matcher(scope);\n        for (let i = 1; i < matchers.length; i++) {\n            max = Math.max(max, matchers[i].matcher(scope));\n        }\n        return max;\n    };\n}\nfunction readSemanticTokenRule(selectorString, settings) {\n    const selector = tokenClassificationRegistry.parseTokenSelector(selectorString);\n    let style;\n    if (typeof settings === 'string') {\n        style = TokenStyle.fromSettings(settings, undefined);\n    }\n    else if (isSemanticTokenColorizationSetting(settings)) {\n        style = TokenStyle.fromSettings(settings.foreground, settings.fontStyle, settings.bold, settings.underline, settings.strikethrough, settings.italic);\n    }\n    if (style) {\n        return { selector, style };\n    }\n    return undefined;\n}\nfunction isSemanticTokenColorizationSetting(style) {\n    return style && (types.isString(style.foreground) || types.isString(style.fontStyle) || types.isBoolean(style.italic)\n        || types.isBoolean(style.underline) || types.isBoolean(style.strikethrough) || types.isBoolean(style.bold));\n}\nclass TokenColorIndex {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n    }\n    add(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    get(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        const value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        console.log(`Color ${color} not in index.`);\n        return 0;\n    }\n    asArray() {\n        return this._id2color.slice(0);\n    }\n}\nfunction normalizeColor(color) {\n    if (!color) {\n        return undefined;\n    }\n    if (typeof color !== 'string') {\n        color = Color.Format.CSS.formatHexA(color, true);\n    }\n    const len = color.length;\n    if (color.charCodeAt(0) !== 35  || (len !== 4 && len !== 5 && len !== 7 && len !== 9)) {\n        return undefined;\n    }\n    const result = [35 ];\n    for (let i = 1; i < len; i++) {\n        const upper = hexUpper(color.charCodeAt(i));\n        if (!upper) {\n            return undefined;\n        }\n        result.push(upper);\n        if (len === 4 || len === 5) {\n            result.push(upper);\n        }\n    }\n    if (result.length === 9 && result[7] === 70  && result[8] === 70 ) {\n        result.length = 7;\n    }\n    return String.fromCharCode(...result);\n}\nfunction hexUpper(charCode) {\n    if (charCode >= 48  && charCode <= 57  || charCode >= 65  && charCode <= 70 ) {\n        return charCode;\n    }\n    else if (charCode >= 97  && charCode <= 102 ) {\n        return charCode - 97  + 65 ;\n    }\n    return 0;\n}\nexport { ColorThemeData };\n", "import { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport * as colors from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport * as editorColorRegistry from 'monaco-editor/esm/vs/editor/common/core/editorColorRegistry.js';\nconst settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    let colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, result) {\n    for (const rule of oldSettings) {\n        result.textMateRules.push(rule);\n        if (!rule.scope) {\n            const settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (const settingKey in settings) {\n                    const key = settingKey;\n                    const mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        const colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            const color = ( Color.fromHex(colorHex));\n                            for (const colorId of mappings) {\n                                result.colors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\naddSettingMapping('background', colors.editorBackground);\naddSettingMapping('foreground', colors.editorForeground);\naddSettingMapping('selection', colors.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colors.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colors.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colors.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colors.editorFindMatch);\naddSettingMapping('hoverHighlight', colors.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground');\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colors.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuide1);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuide1);\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (const color of ansiColorMap) {\n    addSettingMapping(color, 'terminal.' + color);\n}\nexport { convertSettings };\n", "function parse(content) {\n    return _parse(content, null, null);\n}\nfunction _parse(content, filename, locationKeyName) {\n    const len = content.length;\n    let pos = 0;\n    let line = 1;\n    let char = 0;\n    if (len > 0 && content.charCodeAt(0) === 65279 ) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        if (locationKeyName === null) {\n            pos = pos + by;\n        }\n        else {\n            while (by > 0) {\n                const chCode = content.charCodeAt(pos);\n                if (chCode === 10 ) {\n                    pos++;\n                    line++;\n                    char = 0;\n                }\n                else {\n                    pos++;\n                    char++;\n                }\n                by--;\n            }\n        }\n    }\n    function advancePosTo(to) {\n        if (locationKeyName === null) {\n            pos = to;\n        }\n        else {\n            advancePosBy(to - pos);\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            const chCode = content.charCodeAt(pos);\n            if (chCode !== 32  && chCode !== 9  && chCode !== 13  && chCode !== 10 ) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            const r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            const r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    let state = 0 ;\n    let cur = null;\n    const stateStack = [];\n    const objStack = [];\n    let curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw new Error('Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~');\n    }\n    const dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 , newArr);\n        }\n    };\n    const arrState = {\n        enterDict: function () {\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur.push(newDict);\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            const newArr = [];\n            cur.push(newArr);\n            pushState(2 , newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 ) {\n            dictState.enterDict();\n        }\n        else if (state === 2 ) {\n            arrState.enterDict();\n        }\n        else {\n            cur = {};\n            if (locationKeyName !== null) {\n                cur[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            pushState(1 , cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 ) {\n            popState();\n        }\n        else if (state === 2 ) {\n            return fail('unexpected </dict>');\n        }\n        else {\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 ) {\n            dictState.enterArray();\n        }\n        else if (state === 2 ) {\n            arrState.enterArray();\n        }\n        else {\n            cur = [];\n            pushState(2 , cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 ) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 ) {\n            popState();\n        }\n        else {\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 ) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 ) {\n            return fail('unexpected <key>');\n        }\n        else {\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        let r = captureUntil('>');\n        let isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 ) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        const val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        const chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 ) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        const peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 ) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 ) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 ) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        const tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(( new Date(parseTagValue(tag))));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\nexport { parse };\n", "function createMatchers(selector, matchesName, results) {\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        const matcher = parseConjunction();\n        if (matcher) {\n            results.push({ matcher, priority });\n        }\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            if (!expressionToNegate) {\n                return null;\n            }\n            return matcherInput => {\n                const score = expressionToNegate(matcherInput);\n                return score < 0 ? 0 : -1;\n            };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        let matcher = parseOperand();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => {\n            let min = matchers[0](matcherInput);\n            for (let i = 1; min >= 0 && i < matchers.length; i++) {\n                min = Math.min(min, matchers[i](matcherInput));\n            }\n            return min;\n        };\n    }\n    function parseInnerExpression() {\n        let matcher = parseConjunction();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ',');\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => {\n            let max = matchers[0](matcherInput);\n            for (let i = 1; i < matchers.length; i++) {\n                max = Math.max(max, matchers[i](matcherInput));\n            }\n            return max;\n        };\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    const regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\nexport { createMatchers };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontSizeRegex } from './productIconThemeSchema.js';\nconst schemaId = 'vscode://schemas/icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    definitions: {\n        folderExpanded: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.folderExpanded',\n                'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'\n            ))\n        },\n        folder: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.folder',\n                'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'\n            ))\n        },\n        file: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.file',\n                'The default file icon, shown for all files that don\\'t match any extension, filename or language id.'\n            ))\n        },\n        folderNames: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.folderNames',\n                'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.folderName', 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNamesExpanded: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.folderNamesExpanded',\n                'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize(\n                    'schema.folderNameExpanded',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileExtensions: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.fileExtensions',\n                'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize(\n                    'schema.fileExtension',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileNames: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.fileNames',\n                'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.fileName', 'The ID of the icon definition for the association.'))\n            }\n        },\n        languageIds: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.languageIds',\n                'Associates languages to icons. The object key is the language id as defined in the language contribution point.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.languageId', 'The ID of the icon definition for the association.'))\n            }\n        },\n        associations: {\n            type: 'object',\n            properties: {\n                folderExpanded: {\n                    $ref: '#/definitions/folderExpanded'\n                },\n                folder: {\n                    $ref: '#/definitions/folder'\n                },\n                file: {\n                    $ref: '#/definitions/file'\n                },\n                folderNames: {\n                    $ref: '#/definitions/folderNames'\n                },\n                folderNamesExpanded: {\n                    $ref: '#/definitions/folderNamesExpanded'\n                },\n                fileExtensions: {\n                    $ref: '#/definitions/fileExtensions'\n                },\n                fileNames: {\n                    $ref: '#/definitions/fileNames'\n                },\n                languageIds: {\n                    $ref: '#/definitions/languageIds'\n                }\n            }\n        }\n    },\n    properties: {\n        fonts: {\n            type: 'array',\n            description: ( nls.localize('schema.fonts', 'Fonts that are used in the icon definitions.')),\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( nls.localize('schema.id', 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( nls.localize(\n                            'schema.id.formatError',\n                            'The ID must only contain letter, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( nls.localize('schema.src', 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( nls.localize(\n                                        'schema.font-path',\n                                        'The font path, relative to the current file icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( nls.localize('schema.font-format', 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        pattern: fontWeightRegex\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        pattern: fontStyleRegex\n                    },\n                    size: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-size',\n                            'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'\n                        )),\n                        pattern: fontSizeRegex\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.iconDefinitions',\n                'Description of all icons that can be used when associating files to icons.'\n            )),\n            additionalProperties: {\n                type: 'object',\n                description: ( nls.localize(\n                    'schema.iconDefinition',\n                    'An icon definition. The object key is the ID of the definition.'\n                )),\n                properties: {\n                    iconPath: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.iconPath',\n                            'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'\n                        ))\n                    },\n                    fontCharacter: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontCharacter',\n                            'When using a glyph font: The character in the font to use.'\n                        ))\n                    },\n                    fontColor: {\n                        type: 'string',\n                        format: 'color-hex',\n                        description: ( nls.localize('schema.fontColor', 'When using a glyph font: The color to use.'))\n                    },\n                    fontSize: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontSize',\n                            'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'\n                        )),\n                        pattern: fontSizeRegex\n                    },\n                    fontId: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontId',\n                            'When using a font: The id of the font. If not set, defaults to the first font definition.'\n                        ))\n                    }\n                }\n            }\n        },\n        folderExpanded: {\n            $ref: '#/definitions/folderExpanded'\n        },\n        folder: {\n            $ref: '#/definitions/folder'\n        },\n        file: {\n            $ref: '#/definitions/file'\n        },\n        folderNames: {\n            $ref: '#/definitions/folderNames'\n        },\n        folderNamesExpanded: {\n            $ref: '#/definitions/folderNamesExpanded'\n        },\n        fileExtensions: {\n            $ref: '#/definitions/fileExtensions'\n        },\n        fileNames: {\n            $ref: '#/definitions/fileNames'\n        },\n        languageIds: {\n            $ref: '#/definitions/languageIds'\n        },\n        light: {\n            $ref: '#/definitions/associations',\n            description: ( nls.localize(\n                'schema.light',\n                'Optional associations for file icons in light color themes.'\n            ))\n        },\n        highContrast: {\n            $ref: '#/definitions/associations',\n            description: ( nls.localize(\n                'schema.highContrast',\n                'Optional associations for file icons in high contrast color themes.'\n            ))\n        },\n        hidesExplorerArrows: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.hidesExplorerArrows',\n                'Configures whether the file explorer\\'s arrows should be hidden when this theme is active.'\n            ))\n        },\n        showLanguageModeIcons: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.showLanguageModeIcons',\n                'Configures whether the default language icons should be used if the theme does not define an icon for a language.'\n            ))\n        }\n    }\n};\nfunction registerFileIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\nexport { registerFileIconThemeSchemas };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { iconsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nconst fontIdRegex = '^([\\\\w_-]+)$';\nconst fontStyleRegex = '^(normal|italic|(oblique[ \\\\w\\\\s-]+))$';\nconst fontWeightRegex = '^(normal|bold|lighter|bolder|(\\\\d{0-1000}))$';\nconst fontSizeRegex = '^([\\\\w .%_-]+)$';\nconst fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';\nconst schemaId = 'vscode://schemas/product-icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        fonts: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( nls.localize('schema.id', 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( nls.localize(\n                            'schema.id.formatError',\n                            'The ID must only contain letters, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( nls.localize('schema.src', 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( nls.localize(\n                                        'schema.font-path',\n                                        'The font path, relative to the current product icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( nls.localize('schema.font-format', 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },\n                            { type: 'string', pattern: fontWeightRegex }\n                        ]\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'italic', 'oblique'] },\n                            { type: 'string', pattern: fontStyleRegex }\n                        ]\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            description: ( nls.localize('schema.iconDefinitions', 'Association of icon name to a font character.')),\n            $ref: iconsSchemaId\n        }\n    }\n};\nfunction registerProductIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\nexport { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as path from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { ExtensionData } from '../common/workbenchThemeService.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { asCSSUrl } from 'monaco-editor/esm/vs/base/browser/dom.js';\nclass FileIconThemeData {\n    static { this.STORAGE_KEY = 'iconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    ensureLoaded(themeLoader) {\n        return !this.isLoaded ? this.load(themeLoader) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(themeLoader) {\n        return this.load(themeLoader);\n    }\n    load(themeLoader) {\n        return themeLoader.load(this);\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || path.basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new FileIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static { this._noIconTheme = null; }\n    static get noIconTheme() {\n        let themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = ( new FileIconThemeData('', '', null));\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new FileIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(FileIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new FileIconThemeData('', '', null));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            watch: this.watch\n        });\n        storageService.store(FileIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nclass FileIconThemeLoader {\n    constructor(fileService, languageService) {\n        this.fileService = fileService;\n        this.languageService = languageService;\n    }\n    load(data) {\n        if (!data.location) {\n            return Promise.resolve(data.styleSheetContent);\n        }\n        return this.loadIconThemeDocument(data.location).then(iconThemeDocument => {\n            const result = this.processIconThemeDocument(data.id, data.location, iconThemeDocument);\n            data.styleSheetContent = result.content;\n            data.hasFileIcons = result.hasFileIcons;\n            data.hasFolderIcons = result.hasFolderIcons;\n            data.hidesExplorerArrows = result.hidesExplorerArrows;\n            data.isLoaded = true;\n            return data.styleSheetContent;\n        });\n    }\n    loadIconThemeDocument(location) {\n        return this.fileService.readExtensionResource(location).then((content) => {\n            const errors = [];\n            const contentValue = json.parse(content, errors);\n            if (errors.length > 0) {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.cannotparseicontheme',\n                    \"Problems parsing file icons file: {0}\",\n                    ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n                )))));\n            }\n            else if (json.getNodeType(contentValue) !== 'object') {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.invalidformat',\n                    \"Invalid format for file icons theme file: Object expected.\"\n                )))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        let hasSpecificFileIcons = false;\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        const selectorByDefinitionId = {};\n        const coveredLanguages = {};\n        const iconThemeDocumentLocationDirname = resources.dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return resources.joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents';\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                const rootFolder = associations.rootFolder || associations.folder;\n                const rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                const folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (const key in folderNames) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${selectors.join('')}.folder-icon::before`, folderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (const key in folderNamesExpanded) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${expanded} ${selectors.join('')}.folder-icon::before`, folderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (const languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                        coveredLanguages[languageId] = true;\n                    }\n                }\n                const fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (const key in fileExtensions) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        const segments = name.split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n                const fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (const key in fileNames) {\n                        const selectors = [];\n                        const fileName = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        selectors.push('.name-file-icon');\n                        const segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-light');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        const showLanguageModeIcons = iconThemeDocument.showLanguageModeIcons === true || (hasSpecificFileIcons && iconThemeDocument.showLanguageModeIcons !== false);\n        const cssRules = [];\n        const fonts = iconThemeDocument.fonts;\n        const fontSizes = ( new Map());\n        if (Array.isArray(fonts)) {\n            const defaultFontSize = fonts[0].size || '150%';\n            fonts.forEach(font => {\n                const src = ( font.src.map(l => `${asCSSUrl(resolvePath(l.path))} format('${l.format}')`)).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; font-display: block; }`);\n                if (font.size !== undefined && font.size !== defaultFontSize) {\n                    fontSizes.set(font.id, font.size);\n                }\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${defaultFontSize}; }`);\n        }\n        for (const defId in selectorByDefinitionId) {\n            const selectors = selectorByDefinitionId[defId];\n            const definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: ' '; background-image: ${asCSSUrl(resolvePath(definition.iconPath))}; }`);\n                }\n                else if (definition.fontCharacter || definition.fontColor) {\n                    const body = [];\n                    if (definition.fontColor) {\n                        body.push(`color: ${definition.fontColor};`);\n                    }\n                    if (definition.fontCharacter) {\n                        body.push(`content: '${definition.fontCharacter}';`);\n                    }\n                    const fontSize = definition.fontSize ?? (definition.fontId ? fontSizes.get(definition.fontId) : undefined);\n                    if (fontSize) {\n                        body.push(`font-size: ${fontSize};`);\n                    }\n                    if (definition.fontId) {\n                        body.push(`font-family: ${definition.fontId};`);\n                    }\n                    if (showLanguageModeIcons) {\n                        body.push(`background-image: unset;`);\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body.join(' ')} }`);\n                }\n            }\n        }\n        if (showLanguageModeIcons) {\n            for (const languageId of this.languageService.getRegisteredLanguageIds()) {\n                if (!coveredLanguages[languageId]) {\n                    const icon = this.languageService.getIcon(languageId);\n                    if (icon) {\n                        const selector = `.show-file-icons .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`;\n                        cssRules.push(`${selector} { content: ' '; background-image: ${asCSSUrl(icon.dark)}; }`);\n                        cssRules.push(`.vs ${selector} { content: ' '; background-image: ${asCSSUrl(icon.light)}; }`);\n                    }\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n}\nfunction handleParentFolder(key, selectors) {\n    const lastIndexOfSlash = key.lastIndexOf('/');\n    if (lastIndexOfSlash >= 0) {\n        const parentFolder = key.substring(0, lastIndexOfSlash);\n        selectors.push(`.${escapeCSS(parentFolder)}-name-dir-icon`);\n        return key.substring(lastIndexOfSlash + 1);\n    }\n    return key;\n}\nfunction escapeCSS(str) {\n    str = str.replace(/[\\11\\12\\14\\15\\40]/g, '/');\n    return window.CSS.escape(str);\n}\nexport { FileIconThemeData, FileIconThemeLoader };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { workbenchColorsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { tokenStylingSchemaId } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nconst textMateScopes = [\n    'comment',\n    'comment.block',\n    'comment.block.documentation',\n    'comment.line',\n    'constant',\n    'constant.character',\n    'constant.character.escape',\n    'constant.numeric',\n    'constant.numeric.integer',\n    'constant.numeric.float',\n    'constant.numeric.hex',\n    'constant.numeric.octal',\n    'constant.other',\n    'constant.regexp',\n    'constant.rgb-value',\n    'emphasis',\n    'entity',\n    'entity.name',\n    'entity.name.class',\n    'entity.name.function',\n    'entity.name.method',\n    'entity.name.section',\n    'entity.name.selector',\n    'entity.name.tag',\n    'entity.name.type',\n    'entity.other',\n    'entity.other.attribute-name',\n    'entity.other.inherited-class',\n    'invalid',\n    'invalid.deprecated',\n    'invalid.illegal',\n    'keyword',\n    'keyword.control',\n    'keyword.operator',\n    'keyword.operator.new',\n    'keyword.operator.assignment',\n    'keyword.operator.arithmetic',\n    'keyword.operator.logical',\n    'keyword.other',\n    'markup',\n    'markup.bold',\n    'markup.changed',\n    'markup.deleted',\n    'markup.heading',\n    'markup.inline.raw',\n    'markup.inserted',\n    'markup.italic',\n    'markup.list',\n    'markup.list.numbered',\n    'markup.list.unnumbered',\n    'markup.other',\n    'markup.quote',\n    'markup.raw',\n    'markup.underline',\n    'markup.underline.link',\n    'meta',\n    'meta.block',\n    'meta.cast',\n    'meta.class',\n    'meta.function',\n    'meta.function-call',\n    'meta.preprocessor',\n    'meta.return-type',\n    'meta.selector',\n    'meta.tag',\n    'meta.type.annotation',\n    'meta.type',\n    'punctuation.definition.string.begin',\n    'punctuation.definition.string.end',\n    'punctuation.separator',\n    'punctuation.separator.continuation',\n    'punctuation.terminator',\n    'storage',\n    'storage.modifier',\n    'storage.type',\n    'string',\n    'string.interpolated',\n    'string.other',\n    'string.quoted',\n    'string.quoted.double',\n    'string.quoted.other',\n    'string.quoted.single',\n    'string.quoted.triple',\n    'string.regexp',\n    'string.unquoted',\n    'strong',\n    'support',\n    'support.class',\n    'support.constant',\n    'support.function',\n    'support.other',\n    'support.type',\n    'support.type.property-name',\n    'support.variable',\n    'variable',\n    'variable.language',\n    'variable.name',\n    'variable.other',\n    'variable.other.readwrite',\n    'variable.parameter'\n];\nconst textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\nconst textmateColorGroupSchemaId = `${textmateColorsSchemaId}#/definitions/colorGroup`;\nconst textmateColorSchema = {\n    type: 'array',\n    definitions: {\n        colorGroup: {\n            default: '#FF0000',\n            anyOf: [\n                {\n                    type: 'string',\n                    format: 'color-hex'\n                },\n                {\n                    $ref: '#/definitions/settings'\n                }\n            ]\n        },\n        settings: {\n            type: 'object',\n            description: ( nls.localize('schema.token.settings', 'Colors and styles for the token.')),\n            properties: {\n                foreground: {\n                    type: 'string',\n                    description: ( nls.localize('schema.token.foreground', 'Foreground color for the token.')),\n                    format: 'color-hex',\n                    default: '#ff0000'\n                },\n                background: {\n                    type: 'string',\n                    deprecationMessage: ( nls.localize(\n                        'schema.token.background.warning',\n                        'Token background colors are currently not supported.'\n                    ))\n                },\n                fontStyle: {\n                    type: 'string',\n                    description: ( nls.localize(\n                        'schema.token.fontStyle',\n                        'Font style of the rule: \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination. The empty string unsets inherited settings.'\n                    )),\n                    pattern: '^(\\\\s*\\\\b(italic|bold|underline|strikethrough))*\\\\s*$',\n                    patternErrorMessage: ( nls.localize(\n                        'schema.fontStyle.error',\n                        'Font style must be \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination or the empty string.'\n                    )),\n                    defaultSnippets: [\n                        { label: ( nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)')), bodyText: '\"\"' },\n                        { body: 'italic' },\n                        { body: 'bold' },\n                        { body: 'underline' },\n                        { body: 'strikethrough' },\n                        { body: 'italic bold' },\n                        { body: 'italic underline' },\n                        { body: 'italic strikethrough' },\n                        { body: 'bold underline' },\n                        { body: 'bold strikethrough' },\n                        { body: 'underline strikethrough' },\n                        { body: 'italic bold underline' },\n                        { body: 'italic bold strikethrough' },\n                        { body: 'italic underline strikethrough' },\n                        { body: 'bold underline strikethrough' },\n                        { body: 'italic bold underline strikethrough' }\n                    ]\n                }\n            },\n            additionalProperties: false,\n            defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n        }\n    },\n    items: {\n        type: 'object',\n        defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n        properties: {\n            name: {\n                type: 'string',\n                description: ( nls.localize('schema.properties.name', 'Description of the rule.'))\n            },\n            scope: {\n                description: ( nls.localize(\n                    'schema.properties.scope',\n                    'Scope selector against which this rule matches.'\n                )),\n                anyOf: [\n                    {\n                        enum: textMateScopes\n                    },\n                    {\n                        type: 'string'\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            enum: textMateScopes\n                        }\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                ]\n            },\n            settings: {\n                $ref: '#/definitions/settings'\n            }\n        },\n        required: [\n            'settings'\n        ],\n        additionalProperties: false\n    }\n};\nconst colorThemeSchemaId = 'vscode://schemas/color-theme';\nconst colorThemeSchema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        colors: {\n            description: ( nls.localize('schema.workbenchColors', 'Colors in the workbench')),\n            $ref: workbenchColorsSchemaId,\n            additionalProperties: false\n        },\n        tokenColors: {\n            anyOf: [{\n                    type: 'string',\n                    description: ( nls.localize(\n                        'schema.tokenColors.path',\n                        'Path to a tmTheme file (relative to the current file).'\n                    ))\n                },\n                {\n                    description: ( nls.localize('schema.colors', 'Colors for syntax highlighting')),\n                    $ref: textmateColorsSchemaId\n                }\n            ]\n        },\n        semanticHighlighting: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.supportsSemanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            ))\n        },\n        semanticTokenColors: {\n            type: 'object',\n            description: ( nls.localize('schema.semanticTokenColors', 'Colors for semantic tokens')),\n            $ref: tokenStylingSchemaId\n        }\n    }\n};\nfunction registerColorThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(colorThemeSchemaId, colorThemeSchema);\n    schemaRegistry.registerSchema(textmateColorsSchemaId, textmateColorSchema);\n}\nexport { colorThemeSchemaId, registerColorThemeSchemas, textmateColorGroupSchemaId, textmateColorsSchemaId };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { ExtensionData, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME } from './workbenchThemeService.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nfunction registerColorThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'themes',\n        jsonSchema: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.themes',\n                'Contributes textmate color themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.id',\n                            'Id of the color theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.label',\n                            'Label of the color theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    uiTheme: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.uiTheme',\n                            'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme, \\'hc-light\\' is the light high contrast theme.'\n                        )),\n                        enum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME]\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.path',\n                            'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./colorthemes/awesome-color-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'uiTheme']\n            }\n        }\n    }));\n}\nfunction registerFileIconThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'iconThemes',\n        jsonSchema: {\n            description: ( nls.localize('vscode.extension.contributes.iconThemes', 'Contributes file icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.id',\n                            'Id of the file icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.label',\n                            'Label of the file icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.path',\n                            'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \\'./fileicons/awesome-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    }));\n}\nfunction registerProductIconThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'productIconThemes',\n        jsonSchema: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.productIconThemes',\n                'Contributes product icon themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './producticons/${3:id}-product-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.id',\n                            'Id of the product icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.label',\n                            'Label of the product icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.path',\n                            'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \\'./producticons/awesome-product-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    }));\n}\nclass ThemeRegistry {\n    constructor(themesExtPoint, create, idRequired = false, builtInTheme = undefined) {\n        this.themesExtPoint = themesExtPoint;\n        this.create = create;\n        this.idRequired = idRequired;\n        this.builtInTheme = builtInTheme;\n        this.onDidChangeEmitter = ( new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.extensionThemes = [];\n        this.initialize();\n    }\n    initialize() {\n        this.themesExtPoint.setHandler((extensions, delta) => {\n            const previousIds = {};\n            const added = [];\n            for (const theme of this.extensionThemes) {\n                previousIds[theme.id] = theme;\n            }\n            this.extensionThemes.length = 0;\n            for (const ext of extensions) {\n                const extensionData = ExtensionData.fromName(ext.description.publisher, ext.description.name, ext.description.isBuiltin);\n                this.onThemes(extensionData, ext.description.extensionLocation, ext.value, this.extensionThemes, ext.collector);\n            }\n            for (const theme of this.extensionThemes) {\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n                else {\n                    delete previousIds[theme.id];\n                }\n            }\n            const removed = ( Object.values(previousIds));\n            this.onDidChangeEmitter.fire({ themes: this.extensionThemes, added, removed });\n        });\n    }\n    onThemes(extensionData, extensionLocation, themeContributions, resultingThemes = [], log) {\n        if (!Array.isArray(themeContributions)) {\n            log?.error(( nls.localize(\n                'reqarray',\n                \"Extension point `{0}` must be an array.\",\n                this.themesExtPoint.name\n            )));\n            return resultingThemes;\n        }\n        themeContributions.forEach(theme => {\n            if (!theme.path || !types.isString(theme.path)) {\n                log?.error(( nls.localize(\n                    'reqpath',\n                    \"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.path)\n                )));\n                return;\n            }\n            if (this.idRequired && (!theme.id || !types.isString(theme.id))) {\n                log?.error(( nls.localize(\n                    'reqid',\n                    \"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.id)\n                )));\n                return;\n            }\n            const themeLocation = resources.joinPath(extensionLocation, theme.path);\n            if (!resources.isEqualOrParent(themeLocation, extensionLocation)) {\n                log?.warn(( nls.localize(\n                    'invalid.path.1',\n                    \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n                    this.themesExtPoint.name,\n                    themeLocation.path,\n                    extensionLocation.path\n                )));\n            }\n            const themeData = this.create(theme, themeLocation, extensionData);\n            resultingThemes.push(themeData);\n        });\n        return resultingThemes;\n    }\n    findThemeById(themeId) {\n        if (this.builtInTheme && this.builtInTheme.id === themeId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        for (const t of allThemes) {\n            if (t.id === themeId) {\n                return t;\n            }\n        }\n        return undefined;\n    }\n    findThemeBySettingsId(settingsId, defaultSettingsId) {\n        if (this.builtInTheme && this.builtInTheme.settingsId === settingsId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        let defaultTheme = undefined;\n        for (const t of allThemes) {\n            if (t.settingsId === settingsId) {\n                return t;\n            }\n            if (t.settingsId === defaultSettingsId) {\n                defaultTheme = t;\n            }\n        }\n        return defaultTheme;\n    }\n    findThemeByExtensionLocation(extLocation) {\n        if (extLocation) {\n            return this.getThemes().filter(t => t.location && resources.isEqualOrParent(t.location, extLocation));\n        }\n        return [];\n    }\n    getThemes() {\n        return this.extensionThemes;\n    }\n    getMarketplaceThemes(manifest, extensionLocation, extensionData) {\n        const themes = manifest?.contributes?.[this.themesExtPoint.name];\n        if (Array.isArray(themes)) {\n            return this.onThemes(extensionData, extensionLocation, themes);\n        }\n        return [];\n    }\n}\nexport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { textmateColorsSchemaId, textmateColorGroupSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { tokenStylingSchemaId } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { ThemeSettings, ThemeSettingDefaults } from './workbenchThemeService.js';\nimport { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nconst colorThemeSettingEnum = [];\nconst colorThemeSettingEnumItemLabels = [];\nconst colorThemeSettingEnumDescriptions = [];\nfunction formatSettingAsLink(str) {\n    return `\\`#${str}#\\``;\n}\nconst colorThemeSettingSchema = {\n    type: 'string',\n    description: ( nls.localize('colorTheme', \"Specifies the color theme used in the workbench.\")),\n    default: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for dark OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for light OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredHCDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredHCDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast dark mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredHCLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredHCLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast light mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst detectColorSchemeSettingSchema = {\n    type: 'boolean',\n    markdownDescription: ( nls.localize(\n        { key: 'detectColorScheme', comment: ['{0} and {1} will become links to other settings.'] },\n        'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at {0} is used, for light {1}.',\n        formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)\n    )),\n    default: false\n};\nconst colorCustomizationsSchema = {\n    type: 'object',\n    description: ( nls.localize(\n        'workbenchColors',\n        \"Overrides colors from the currently selected color theme.\"\n    )),\n    allOf: [{ $ref: workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nconst fileIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.FILE_ICON_THEME,\n    description: ( nls.localize(\n        'iconTheme',\n        \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"\n    )),\n    enum: [null],\n    enumItemLabels: [( nls.localize('noIconThemeLabel', 'None'))],\n    enumDescriptions: [( nls.localize('noIconThemeDesc', 'No file icons'))],\n    errorMessage: ( nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\"))\n};\nconst productIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n    description: ( nls.localize('productIconTheme', \"Specifies the product icon theme used.\")),\n    enum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n    enumItemLabels: [( nls.localize('defaultProductIconThemeLabel', 'Default'))],\n    enumDescriptions: [( nls.localize('defaultProductIconThemeDesc', 'Default'))],\n    errorMessage: ( nls.localize('productIconThemeError', \"Product icon theme is unknown or not installed.\"))\n};\nconst detectHCSchemeSettingSchema = {\n    type: 'boolean',\n    default: true,\n    markdownDescription: ( nls.localize(\n        { key: 'autoDetectHighContrast', comment: ['{0} and {1} will become links to other settings.'] },\n        \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}\",\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n    )),\n    scope: 1\n};\nconst themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n        [ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n        [ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n        [ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n        [ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nconst themeSettingsWindowConfiguration = {\n    id: 'window',\n    order: 8.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n        [ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description,\n        $ref: textmateColorGroupSchemaId\n    };\n}\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\nconst tokenColorSchema = {\n    type: 'object',\n    properties: {\n        comments: tokenGroupSettings(( nls.localize('editorColors.comments', \"Sets the colors and styles for comments\"))),\n        strings: tokenGroupSettings(( nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\"))),\n        keywords: tokenGroupSettings(( nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\"))),\n        numbers: tokenGroupSettings(( nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\"))),\n        types: tokenGroupSettings(( nls.localize(\n            'editorColors.types',\n            \"Sets the colors and styles for type declarations and references.\"\n        ))),\n        functions: tokenGroupSettings(( nls.localize(\n            'editorColors.functions',\n            \"Sets the colors and styles for functions declarations and references.\"\n        ))),\n        variables: tokenGroupSettings(( nls.localize(\n            'editorColors.variables',\n            \"Sets the colors and styles for variables declarations and references.\"\n        ))),\n        textMateRules: {\n            description: ( nls.localize(\n                'editorColors.textMateRules',\n                'Sets colors and styles using textmate theming rules (advanced).'\n            )),\n            $ref: textmateColorsSchemaId\n        },\n        semanticHighlighting: {\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            )),\n            deprecationMessage: ( nls.localize(\n                'editorColors.semanticHighlighting.deprecationMessage',\n                'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'\n            )),\n            markdownDeprecationMessage: ( nls.localize(\n                { key: 'editorColors.semanticHighlighting.deprecationMessageMarkdown', comment: ['{0} will become a link to another setting.'] },\n                'Use `enabled` in {0} setting instead.',\n                formatSettingAsLink('editor.semanticTokenColorCustomizations')\n            )),\n            type: 'boolean'\n        }\n    },\n    additionalProperties: false\n};\nconst tokenColorCustomizationSchema = {\n    description: ( nls.localize(\n        'editorColors',\n        \"Overrides editor syntax colors and font style from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst semanticTokenColorSchema = {\n    type: 'object',\n    properties: {\n        enabled: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting.enabled',\n                'Whether semantic highlighting is enabled or disabled for this theme'\n            )),\n            suggestSortText: '0_enabled'\n        },\n        rules: {\n            $ref: tokenStylingSchemaId,\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting.rules',\n                'Semantic token styling rules for this theme.'\n            )),\n            suggestSortText: '0_rules'\n        }\n    },\n    additionalProperties: false\n};\nconst semanticTokenColorCustomizationSchema = {\n    description: ( nls.localize(\n        'semanticTokenColors',\n        \"Overrides editor semantic token color and styles from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: {\n        [ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n        [ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nfunction updateColorThemeConfigurationSchemas(themes) {\n    themes.sort((a, b) => a.label.localeCompare(b.label));\n    colorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...( themes.map(t => t.settingsId)));\n    colorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...( themes.map(t => t.description || '')));\n    colorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...( themes.map(t => t.label || '')));\n    const themeSpecificWorkbenchColors = { properties: {} };\n    const themeSpecificTokenColors = { properties: {} };\n    const themeSpecificSemanticTokenColors = { properties: {} };\n    const workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n    const tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n    for (const t of themes) {\n        const themeId = `[${t.settingsId}]`;\n        themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n        themeSpecificTokenColors.properties[themeId] = tokenColors;\n        themeSpecificSemanticTokenColors.properties[themeId] = semanticTokenColorSchema;\n    }\n    themeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n    themeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n    themeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n    colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n    tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n    semanticTokenColorCustomizationSchema.allOf[1] = themeSpecificSemanticTokenColors;\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\nfunction updateFileIconThemeConfigurationSchemas(themes) {\n    fileIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    fileIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    fileIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nfunction updateProductIconThemeConfigurationSchemas(themes) {\n    productIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    productIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    productIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nclass ThemeConfiguration {\n    constructor(configurationService) {\n        this.configurationService = configurationService;\n    }\n    get colorTheme() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_THEME);\n    }\n    get fileIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.FILE_ICON_THEME);\n    }\n    get productIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.PRODUCT_ICON_THEME);\n    }\n    get colorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n    }\n    get tokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n    }\n    get semanticTokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n    }\n    async setColorTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.COLOR_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setFileIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setProductIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    isDefaultColorTheme() {\n        const settings = this.configurationService.inspect(ThemeSettings.COLOR_THEME);\n        return settings && settings.default?.value === settings.value;\n    }\n    findAutoConfigurationTarget(key) {\n        const settings = this.configurationService.inspect(key);\n        if (!types.isUndefined(settings.workspaceFolderValue)) {\n            return 6 ;\n        }\n        else if (!types.isUndefined(settings.workspaceValue)) {\n            return 5 ;\n        }\n        else if (!types.isUndefined(settings.userRemote)) {\n            return 4 ;\n        }\n        return 2 ;\n    }\n    async writeConfiguration(key, value, settingsTarget) {\n        if (settingsTarget === undefined || settingsTarget === 'preview') {\n            return;\n        }\n        const settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            return this.configurationService.updateValue(key, value);\n        }\n        if (settingsTarget === 2 ) {\n            if (value === settings.userValue) {\n                return Promise.resolve(undefined);\n            }\n            else if (value === settings.defaultValue) {\n                if (types.isUndefined(settings.userValue)) {\n                    return Promise.resolve(undefined);\n                }\n                value = undefined;\n            }\n        }\n        else if (settingsTarget === 5  || settingsTarget === 6  || settingsTarget === 4 ) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined);\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    }\n}\nexport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas };\n", "import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as path from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { ThemeSettingDefaults, ExtensionData } from '../common/workbenchThemeService.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontFormatRegex } from '../common/productIconThemeSchema.js';\nimport { isObject, isString } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IconFontDefinition, getIconRegistry } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nconst DEFAULT_PRODUCT_ICON_THEME_ID = '';\nclass ProductIconThemeData {\n    static { this.STORAGE_KEY = 'productIconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.iconThemeDocument = { iconDefinitions: ( new Map()) };\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    getIcon(iconContribution) {\n        return _resolveIconDefinition(iconContribution, this.iconThemeDocument);\n    }\n    ensureLoaded(fileService, logService) {\n        return !this.isLoaded ? this.load(fileService, logService) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(fileService, logService) {\n        return this.load(fileService, logService);\n    }\n    async load(fileService, logService) {\n        const location = this.location;\n        if (!location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        const warnings = [];\n        this.iconThemeDocument = await _loadProductIconThemeDocument(fileService, location, warnings);\n        this.isLoaded = true;\n        if (warnings.length) {\n            logService.error(( nls.localize(\n                'error.parseicondefs',\n                \"Problems processing product icons definitions in {0}:\\n{1}\",\n                ( location.toString()),\n                warnings.join('\\n')\n            )));\n        }\n        return this.styleSheetContent;\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || path.basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new ProductIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new ProductIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static { this._defaultProductIconTheme = null; }\n    static get defaultTheme() {\n        let themeData = ProductIconThemeData._defaultProductIconTheme;\n        if (!themeData) {\n            themeData = ProductIconThemeData._defaultProductIconTheme = ( new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, ( nls.localize('defaultTheme', 'Default')), ThemeSettingDefaults.PRODUCT_ICON_THEME));\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ProductIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ProductIconThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            const { iconDefinitions, iconFontDefinitions } = data;\n            if (Array.isArray(iconDefinitions) && isObject(iconFontDefinitions)) {\n                const restoredIconDefinitions = ( new Map());\n                for (const entry of iconDefinitions) {\n                    const { id, fontCharacter, fontId } = entry;\n                    if (isString(id) && isString(fontCharacter)) {\n                        if (isString(fontId)) {\n                            const iconFontDefinition = IconFontDefinition.fromJSONObject(iconFontDefinitions[fontId]);\n                            if (iconFontDefinition) {\n                                restoredIconDefinitions.set(id, { fontCharacter, font: { id: fontId, definition: iconFontDefinition } });\n                            }\n                        }\n                        else {\n                            restoredIconDefinitions.set(id, { fontCharacter });\n                        }\n                    }\n                }\n                theme.iconThemeDocument = { iconDefinitions: restoredIconDefinitions };\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const iconDefinitions = [];\n        const iconFontDefinitions = {};\n        for (const entry of this.iconThemeDocument.iconDefinitions.entries()) {\n            const font = entry[1].font;\n            iconDefinitions.push({ id: entry[0], fontCharacter: entry[1].fontCharacter, fontId: font?.id });\n            if (font && iconFontDefinitions[font.id] === undefined) {\n                iconFontDefinitions[font.id] = IconFontDefinition.toJSONObject(font.definition);\n            }\n        }\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            watch: this.watch,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            iconDefinitions,\n            iconFontDefinitions\n        });\n        storageService.store(ProductIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nfunction _loadProductIconThemeDocument(fileService, location, warnings) {\n    return fileService.readExtensionResource(location).then((content) => {\n        const parseErrors = [];\n        const contentValue = json.parse(content, parseErrors);\n        if (parseErrors.length > 0) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.cannotparseicontheme',\n                \"Problems parsing product icons file: {0}\",\n                ( parseErrors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (json.getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.invalidformat',\n                \"Invalid format for product icons theme file: Object expected.\"\n            )))));\n        }\n        else if (!contentValue.iconDefinitions || !Array.isArray(contentValue.fonts) || !contentValue.fonts.length) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.missingProperties',\n                \"Invalid format for product icons theme file: Must contain iconDefinitions and fonts.\"\n            )))));\n        }\n        const iconThemeDocumentLocationDirname = resources.dirname(location);\n        const sanitizedFonts = ( new Map());\n        for (const font of contentValue.fonts) {\n            if (isString(font.id) && font.id.match(fontIdRegex)) {\n                const fontId = font.id;\n                let fontWeight = undefined;\n                if (isString(font.weight) && font.weight.match(fontWeightRegex)) {\n                    fontWeight = font.weight;\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.fontWeight',\n                        'Invalid font weight in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                let fontStyle = undefined;\n                if (isString(font.style) && font.style.match(fontStyleRegex)) {\n                    fontStyle = font.style;\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.fontStyle',\n                        'Invalid font style in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                const sanitizedSrc = [];\n                if (Array.isArray(font.src)) {\n                    for (const s of font.src) {\n                        if (isString(s.path) && isString(s.format) && s.format.match(fontFormatRegex)) {\n                            const iconFontLocation = resources.joinPath(iconThemeDocumentLocationDirname, s.path);\n                            sanitizedSrc.push({ location: iconFontLocation, format: s.format });\n                        }\n                        else {\n                            warnings.push(( nls.localize(\n                                'error.fontSrc',\n                                'Invalid font source in font \\'{0}\\'. Ignoring source.',\n                                font.id\n                            )));\n                        }\n                    }\n                }\n                if (sanitizedSrc.length) {\n                    sanitizedFonts.set(fontId, { weight: fontWeight, style: fontStyle, src: sanitizedSrc });\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.noFontSrc',\n                        'No valid font source in font \\'{0}\\'. Ignoring font definition.',\n                        font.id\n                    )));\n                }\n            }\n            else {\n                warnings.push(( nls.localize(\n                    'error.fontId',\n                    'Missing or invalid font id \\'{0}\\'. Skipping font definition.',\n                    font.id\n                )));\n            }\n        }\n        const iconDefinitions = ( new Map());\n        const primaryFontId = contentValue.fonts[0].id;\n        for (const iconId in contentValue.iconDefinitions) {\n            const definition = contentValue.iconDefinitions[iconId];\n            if (isString(definition.fontCharacter)) {\n                const fontId = definition.fontId ?? primaryFontId;\n                const fontDefinition = sanitizedFonts.get(fontId);\n                if (fontDefinition) {\n                    const font = { id: `pi-${fontId}`, definition: fontDefinition };\n                    iconDefinitions.set(iconId, { fontCharacter: definition.fontCharacter, font });\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.icon.font',\n                        'Skipping icon definition \\'{0}\\'. Unknown font.',\n                        iconId\n                    )));\n                }\n            }\n            else {\n                warnings.push(( nls.localize(\n                    'error.icon.fontCharacter',\n                    'Skipping icon definition \\'{0}\\'. Unknown fontCharacter.',\n                    iconId\n                )));\n            }\n        }\n        return { iconDefinitions };\n    });\n}\nconst iconRegistry = getIconRegistry();\nfunction _resolveIconDefinition(iconContribution, iconThemeDocument) {\n    const iconDefinitions = iconThemeDocument.iconDefinitions;\n    let definition = iconDefinitions.get(iconContribution.id);\n    let defaults = iconContribution.defaults;\n    while (!definition && ThemeIcon.isThemeIcon(defaults)) {\n        const ic = iconRegistry.getIcon(defaults.id);\n        if (ic) {\n            definition = iconDefinitions.get(ic.id);\n            defaults = ic.defaults;\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (definition) {\n        return definition;\n    }\n    if (!ThemeIcon.isThemeIcon(defaults)) {\n        return defaults;\n    }\n    return undefined;\n}\nexport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData };\n", "import '../missing-services.js';\nimport { WorkbenchThemeService } from '../vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport getServiceOverride$1 from './files.js';\nclass StandaloneWorkbenchThemeService extends WorkbenchThemeService {\n    registerEditorContainer() {\n        return {\n            dispose() { }\n        };\n    }\n    setTheme(themeName) {\n        void this.getColorThemes().then(themes => {\n            setTimeout(() => {\n                void this.setColorTheme(themes.find(theme => theme.settingsId === themeName) ?? themeName, 8 );\n            });\n        });\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IThemeService.toString())]: new SyncDescriptor(StandaloneWorkbenchThemeService, [], false)\n    };\n}\nexport { getServiceOverride as default };\n"],
  "mappings": "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",
  "names": ["init_platform", "init_platform", "parse", "Extensions", "id", "parse", "init_platform", "init_platform", "schemaId", "schema", "init_platform", "init_platform", "Extensions", "Extensions", "WorkbenchThemeService", "getServiceOverride"]
}
