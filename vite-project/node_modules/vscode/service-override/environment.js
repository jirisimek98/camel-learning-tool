import { __decorate, __param } from '../external/tslib/tslib.es6.js';
import '../missing-services.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IBrowserWorkbenchEnvironmentService, BrowserWorkbenchEnvironmentService } from '../vscode/src/vs/workbench/services/environment/browser/environmentService.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
let InjectedBrowserWorkbenchEnvironmentService = class InjectedBrowserWorkbenchEnvironmentService extends BrowserWorkbenchEnvironmentService {
    constructor(options, productService) {
        super('default', ( URI.from({ scheme: 'logs', path: '/' })), options, productService);
    }
};
InjectedBrowserWorkbenchEnvironmentService = __decorate([
    ( __param(1, IProductService))
], InjectedBrowserWorkbenchEnvironmentService);
function getServiceOverride(options = {}) {
    return {
        [( IEnvironmentService.toString())]: new SyncDescriptor(InjectedBrowserWorkbenchEnvironmentService, [], true),
        [( IBrowserWorkbenchEnvironmentService.toString())]: new SyncDescriptor(InjectedBrowserWorkbenchEnvironmentService, [options], true)
    };
}
export { getServiceOverride as default };
