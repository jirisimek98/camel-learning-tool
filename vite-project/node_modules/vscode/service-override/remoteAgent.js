import { __decorate, __param } from '../external/tslib/tslib.es6.js';
import '../missing-services.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IRemoteAgentService } from '../vscode/src/vs/workbench/services/remote/common/remoteAgentService.js';
import { RemoteAgentService } from '../vscode/src/vs/workbench/services/remote/browser/remoteAgentService.js';
import { IRemoteSocketFactoryService, RemoteSocketFactoryService } from '../vscode/src/vs/platform/remote/common/remoteSocketFactoryService.js';
import { IRemoteAuthorityResolverService } from '../vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js';
import { RemoteAuthorityResolverService } from '../vscode/src/vs/platform/remote/browser/remoteAuthorityResolverService.js';
import { BrowserSocketFactory } from '../vscode/src/vs/platform/remote/browser/browserSocketFactory.js';
import { RemoteFileSystemProviderClient } from '../vscode/src/vs/workbench/services/remote/common/remoteFileSystemProviderClient.js';
import { IBrowserWorkbenchEnvironmentService } from '../vscode/src/vs/workbench/services/environment/browser/environmentService.js';
import getServiceOverride$1 from './environment.js';
import { registerServiceInitializePreParticipant } from '../lifecycle.js';
import './layout.js';
import './extensions.js';
import './files.js';
import './quickaccess.js';
import '../override/vs/platform/dialogs/common/dialogs.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import '../vscode/src/vs/workbench/contrib/remote/common/remote.contribution.js';
let CustomRemoteSocketFactoryService = class CustomRemoteSocketFactoryService extends RemoteSocketFactoryService {
    constructor(browserWorkbenchEnvironmentService) {
        super();
        this.register(0 , new BrowserSocketFactory(browserWorkbenchEnvironmentService.options?.webSocketFactory));
    }
};
CustomRemoteSocketFactoryService = __decorate([
    ( __param(0, IBrowserWorkbenchEnvironmentService))
], CustomRemoteSocketFactoryService);
registerServiceInitializePreParticipant(async (serviceAccessor) => {
    RemoteFileSystemProviderClient.register(serviceAccessor.get(IRemoteAgentService), serviceAccessor.get(IFileService), serviceAccessor.get(ILogService));
});
function getServiceOverride(connectionToken, resourceUriProvider) {
    return {
        ...getServiceOverride$1(),
        [( IRemoteAgentService.toString())]: new SyncDescriptor(RemoteAgentService),
        [( IRemoteSocketFactoryService.toString())]: new SyncDescriptor(CustomRemoteSocketFactoryService),
        [( IRemoteAuthorityResolverService.toString())]: new SyncDescriptor(RemoteAuthorityResolverService, [true, connectionToken, resourceUriProvider])
    };
}
export { getServiceOverride as default };
