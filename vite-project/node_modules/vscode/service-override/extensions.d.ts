import { IFileService } from '../vscode/src/vs/platform/files/common/files.js';
import { ILifecycleService } from '../vscode/src/vs/workbench/services/lifecycle/common/lifecycle.js';
import { IExtensionService } from '../vscode/src/vs/workbench/services/extensions/common/extensions.js';
import { ILogService } from '../vscode/src/vs/platform/log/common/log.js';
import { IExtension, IRelaxedExtensionDescription } from '../vscode/src/vs/platform/extensions/common/extensions.js';
import { IWorkspaceContextService } from '../vscode/src/vs/platform/workspace/common/workspace.js';
import { IInstantiationService } from '../vscode/src/vs/platform/instantiation/common/instantiation.js';
import { INotificationService } from '../vscode/src/vs/platform/notification/common/notification.js';
import { AbstractExtensionService, ResolvedExtensions } from '../vscode/src/vs/workbench/services/extensions/common/abstractExtensionService.js';
import { ITelemetryService } from '../vscode/src/vs/platform/telemetry/common/telemetry.js';
import { IDialogService } from '../vscode/src/vs/platform/dialogs/common/dialogs.js';
import { IRemoteAuthorityResolverService, ResolverResult } from '../vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js';
import { IRemoteExtensionsScannerService } from '../vscode/src/vs/platform/remote/common/remoteExtensionsScanner.js';
import { IRemoteAgentService } from '../vscode/src/vs/workbench/services/remote/common/remoteAgentService.js';
import { IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../vscode/src/vs/workbench/services/extensionManagement/common/extensionManagement.js';
import { IExtensionManifestPropertiesService } from '../vscode/src/vs/workbench/services/extensions/common/extensionManifestPropertiesService.js';
import { IConfigurationService } from '../vscode/src/vs/platform/configuration/common/configuration.js';
import { IProductService } from '../vscode/src/vs/platform/product/common/productService.js';
import { IBrowserWorkbenchEnvironmentService } from '../vscode/src/vs/workbench/services/environment/browser/environmentService.js';
import { IEditorOverrideServices } from '../vscode/src/vs/editor/standalone/browser/standaloneServices.js';
import { IUserDataInitializationService } from '../vscode/src/vs/workbench/services/userData/browser/userDataInit.js';
import { ExtensionHostKind } from '../vscode/src/vs/workbench/services/extensions/common/extensionHostKind.js';
import { ExtHostExtensionService } from '../vscode/src/vs/workbench/api/worker/extHostExtensionService.js';
import * as vscode from 'vscode';

declare class LocalExtHostExtensionService extends ExtHostExtensionService {
    private _defaultApiImpl?;
    private readonly _extApiImpl;
    getApi(extensionId?: string): Promise<typeof vscode>;
}
interface WorkerConfig {
    url: string;
    options?: WorkerOptions;
}
interface IExtensionWithExtHostKind extends IExtension {
    extHostKind?: ExtensionHostKind;
}
declare class SimpleExtensionService extends AbstractExtensionService implements IExtensionService {
    constructor(workerConfig: WorkerConfig | undefined, instantiationService: IInstantiationService, notificationService: INotificationService, browserEnvironmentService: IBrowserWorkbenchEnvironmentService, telemetryService: ITelemetryService, extensionEnablementService: IWorkbenchExtensionEnablementService, fileService: IFileService, productService: IProductService, extensionManagementService: IWorkbenchExtensionManagementService, contextService: IWorkspaceContextService, configurationService: IConfigurationService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, logService: ILogService, remoteAgentService: IRemoteAgentService, remoteExtensionsScannerService: IRemoteExtensionsScannerService, lifecycleService: ILifecycleService, remoteAuthorityResolverService: IRemoteAuthorityResolverService, userDataInitializationService: IUserDataInitializationService, dialogService: IDialogService);
    private _initFetchFileSystem;
    deltaExtensions(toAdd: IExtensionWithExtHostKind[], toRemove: IExtension[]): Promise<void>;
    protected _resolveExtensions(): Promise<ResolvedExtensions>;
    protected _scanSingleExtension(extension: IExtension): Promise<Readonly<IRelaxedExtensionDescription> | null>;
    protected _onExtensionHostExit(): void;
    protected _resolveAuthority(remoteAuthority: string): Promise<ResolverResult>;
}
declare function getServiceOverride(workerConfig?: WorkerConfig, _iframeAlternateDomains?: string): IEditorOverrideServices;
declare function getLocalExtHostExtensionService(): Promise<LocalExtHostExtensionService>;

export { ExtensionHostKind, type IExtensionWithExtHostKind, LocalExtHostExtensionService, SimpleExtensionService, type WorkerConfig, getServiceOverride as default, getLocalExtHostExtensionService };
