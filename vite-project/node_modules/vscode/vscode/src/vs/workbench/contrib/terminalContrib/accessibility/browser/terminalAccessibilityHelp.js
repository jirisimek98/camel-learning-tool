import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { format } from 'monaco-editor/esm/vs/base/common/strings.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';
let TerminalAccessibleContentProvider = class TerminalAccessibleContentProvider extends Disposable {
    onClose() {
        if (this._contextKeyService.getContextKeyValue(TerminalContextKeys.accessibleBufferFocus.key) === true) {
            this._commandService.executeCommand("workbench.action.terminal.focusAccessibleBuffer" );
        }
        else {
            this._instance.focus();
        }
        this.dispose();
    }
    constructor(_instance, _xterm, _instantiationService, _keybindingService, _contextKeyService, _commandService, _accessibilityService) {
        super();
        this._instance = _instance;
        this._keybindingService = _keybindingService;
        this._contextKeyService = _contextKeyService;
        this._commandService = _commandService;
        this._accessibilityService = _accessibilityService;
        this._hasShellIntegration = false;
        this.options = {
            type: "help" ,
            readMoreUrl: 'https://code.visualstudio.com/docs/editor/accessibility#_terminal-accessibility'
        };
        this.verbositySettingKey = "accessibility.verbosity.terminal" ;
        this._hasShellIntegration = _xterm.shellIntegration.status === 2 ;
    }
    _descriptionForCommand(commandId, msg, noKbMsg) {
        if (commandId === "workbench.action.terminal.runRecentCommand" ) {
            const kb = this._keybindingService.lookupKeybindings(commandId);
            const isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();
            if (isScreenReaderOptimized && kb[1]) {
                format(msg, kb[1].getAriaLabel());
            }
            else if (kb[0]) {
                format(msg, kb[0].getAriaLabel());
            }
            else {
                return format(noKbMsg, commandId);
            }
        }
        const kb = this._keybindingService.lookupKeybinding(commandId, this._contextKeyService)?.getAriaLabel();
        return !kb ? format(noKbMsg, commandId) : format(msg, kb);
    }
    provideContent() {
        const content = [];
        content.push(this._descriptionForCommand("workbench.action.terminal.focusAccessibleBuffer" , ( localize(
            'focusAccessibleBuffer',
            'The Focus Accessible Buffer ({0}) command enables screen readers to read terminal contents.'
        )), ( localize(
            'focusAccessibleBufferNoKb',
            'The Focus Accessible Buffer command enables screen readers to read terminal contents and is currently not triggerable by a keybinding.'
        ))));
        if (this._instance.shellType === "cmd" ) {
            content.push(( localize(
                'commandPromptMigration',
                "Consider using powershell instead of command prompt for an improved experience"
            )));
        }
        if (this._hasShellIntegration) {
            const shellIntegrationCommandList = [];
            shellIntegrationCommandList.push(( localize(
                'shellIntegration',
                "The terminal has a feature called shell integration that offers an enhanced experience and provides useful commands for screen readers such as:"
            )));
            shellIntegrationCommandList.push('- ' + this._descriptionForCommand("workbench.action.terminal.accessibleBufferGoToNextCommand" , ( localize('goToNextCommand', 'Go to Next Command ({0})')), ( localize(
                'goToNextCommandNoKb',
                'Go to Next Command is currently not triggerable by a keybinding.'
            ))));
            shellIntegrationCommandList.push('- ' + this._descriptionForCommand("workbench.action.terminal.accessibleBufferGoToPreviousCommand" , ( localize('goToPreviousCommand', 'Go to Previous Command ({0})')), ( localize(
                'goToPreviousCommandNoKb',
                'Go to Previous Command is currently not triggerable by a keybinding.'
            ))));
            shellIntegrationCommandList.push('- ' + this._descriptionForCommand("workbench.action.terminal.navigateAccessibleBuffer" , ( localize('navigateAccessibleBuffer', 'Navigate Accessible Buffer ({0})')), ( localize(
                'navigateAccessibleBufferNoKb',
                'Navigate Accessible Buffer is currently not triggerable by a keybinding.'
            ))));
            shellIntegrationCommandList.push('- ' + this._descriptionForCommand("workbench.action.terminal.runRecentCommand" , ( localize('runRecentCommand', 'Run Recent Command ({0})')), ( localize(
                'runRecentCommandNoKb',
                'Run Recent Command is currently not triggerable by a keybinding.'
            ))));
            shellIntegrationCommandList.push('- ' + this._descriptionForCommand("workbench.action.terminal.goToRecentDirectory" , ( localize('goToRecentDirectory', 'Go to Recent Directory ({0})')), ( localize(
                'goToRecentDirectoryNoKb',
                'Go to Recent Directory is currently not triggerable by a keybinding.'
            ))));
            content.push(shellIntegrationCommandList.join('\n'));
        }
        else {
            content.push(this._descriptionForCommand("workbench.action.terminal.runRecentCommand" , ( localize(
                'goToRecentDirectoryNoShellIntegration',
                'The Go to Recent Directory command ({0}) enables screen readers to easily navigate to a directory that has been used in the terminal.'
            )), ( localize(
                'goToRecentDirectoryNoKbNoShellIntegration',
                'The Go to Recent Directory command enables screen readers to easily navigate to a directory that has been used in the terminal and is currently not triggerable by a keybinding.'
            ))));
        }
        content.push(this._descriptionForCommand("workbench.action.terminal.openDetectedLink" , ( localize(
            'openDetectedLink',
            'The Open Detected Link ({0}) command enables screen readers to easily open links found in the terminal.'
        )), ( localize(
            'openDetectedLinkNoKb',
            'The Open Detected Link command enables screen readers to easily open links found in the terminal and is currently not triggerable by a keybinding.'
        ))));
        content.push(this._descriptionForCommand("workbench.action.terminal.newWithProfile" , ( localize(
            'newWithProfile',
            'The Create New Terminal (With Profile) ({0}) command allows for easy terminal creation using a specific profile.'
        )), ( localize(
            'newWithProfileNoKb',
            'The Create New Terminal (With Profile) command allows for easy terminal creation using a specific profile and is currently not triggerable by a keybinding.'
        ))));
        content.push(( localize(
            'focusAfterRun',
            'Configure what gets focused after running selected text in the terminal with `{0}`.',
            "terminal.integrated.focusAfterRun"
        )));
        content.push(( localize(
            'accessibilitySettings',
            'Access accessibility settings such as `terminal.integrated.tabFocusMode` via the Preferences: Open Accessibility Settings command.'
        )));
        return content.join('\n\n');
    }
};
TerminalAccessibleContentProvider = ( __decorate([
    ( __param(2, IInstantiationService)),
    ( __param(3, IKeybindingService)),
    ( __param(4, IContextKeyService)),
    ( __param(5, ICommandService)),
    ( __param(6, IAccessibilityService))
], TerminalAccessibleContentProvider));
export { TerminalAccessibleContentProvider };
