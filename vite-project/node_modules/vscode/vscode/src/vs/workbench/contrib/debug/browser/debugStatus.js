import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IDebugService } from '../common/debug.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';
let DebugStatusContribution = class DebugStatusContribution {
    constructor(statusBarService, debugService, configurationService) {
        this.statusBarService = statusBarService;
        this.debugService = debugService;
        this.toDispose = [];
        const addStatusBarEntry = () => {
            this.entryAccessor = this.statusBarService.addEntry(this.entry, 'status.debug', 0 , 30 );
        };
        const setShowInStatusBar = () => {
            this.showInStatusBar = configurationService.getValue('debug').showInStatusBar;
            if (this.showInStatusBar === 'always' && !this.entryAccessor) {
                addStatusBarEntry();
            }
        };
        setShowInStatusBar();
        this.toDispose.push(this.debugService.onDidChangeState(state => {
            if (state !== 0  && this.showInStatusBar === 'onFirstSessionStart' && !this.entryAccessor) {
                addStatusBarEntry();
            }
        }));
        this.toDispose.push(configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('debug.showInStatusBar')) {
                setShowInStatusBar();
                if (this.entryAccessor && this.showInStatusBar === 'never') {
                    this.entryAccessor.dispose();
                    this.entryAccessor = undefined;
                }
            }
        }));
        this.toDispose.push(this.debugService.getConfigurationManager().onDidSelectConfiguration(e => {
            this.entryAccessor?.update(this.entry);
        }));
    }
    get entry() {
        let text = '';
        const manager = this.debugService.getConfigurationManager();
        const name = manager.selectedConfiguration.name || '';
        const nameAndLaunchPresent = name && manager.selectedConfiguration.launch;
        if (nameAndLaunchPresent) {
            text = (manager.getLaunches().length > 1 ? `${name} (${manager.selectedConfiguration.launch.name})` : name);
        }
        return {
            name: ( nls.localize('status.debug', "Debug")),
            text: '$(debug-alt-small) ' + text,
            ariaLabel: ( nls.localize('debugTarget', "Debug: {0}", text)),
            tooltip: ( nls.localize('selectAndStartDebug', "Select and start debug configuration")),
            command: 'workbench.action.debug.selectandstart'
        };
    }
    dispose() {
        this.entryAccessor?.dispose();
        dispose(this.toDispose);
    }
};
DebugStatusContribution = ( __decorate([
    ( __param(0, IStatusbarService)),
    ( __param(1, IDebugService)),
    ( __param(2, IConfigurationService))
], DebugStatusContribution));
export { DebugStatusContribution };
