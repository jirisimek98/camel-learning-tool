import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';
import { IRemoteAgentService } from '../common/remoteAgentService.js';
import { RemoteAuthorityResolverError, IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';
import { AbstractRemoteAgentService } from '../common/abstractRemoteAgentService.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { ISignService } from '../../../../platform/sign/common/sign.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { Severity } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import '../../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from '../../../common/contributions.js';
import { IHostService } from '../../host/browser/host.js';
import { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';
import { IRemoteSocketFactoryService } from '../../../../platform/remote/common/remoteSocketFactoryService.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
let RemoteAgentService = class RemoteAgentService extends AbstractRemoteAgentService {
    constructor(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService) {
        super(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService);
    }
};
RemoteAgentService = ( __decorate([
    ( __param(0, IRemoteSocketFactoryService)),
    ( __param(1, IUserDataProfileService)),
    ( __param(2, IWorkbenchEnvironmentService)),
    ( __param(3, IProductService)),
    ( __param(4, IRemoteAuthorityResolverService)),
    ( __param(5, ISignService)),
    ( __param(6, ILogService))
], RemoteAgentService));
let RemoteConnectionFailureNotificationContribution = class RemoteConnectionFailureNotificationContribution {
    constructor(remoteAgentService, _dialogService, _hostService) {
        this._dialogService = _dialogService;
        this._hostService = _hostService;
        remoteAgentService.getRawEnvironment()
            .then(undefined, (err) => {
            if (!RemoteAuthorityResolverError.isHandled(err)) {
                this._presentConnectionError(err);
            }
        });
    }
    async _presentConnectionError(err) {
        await this._dialogService.prompt({
            type: Severity.Error,
            message: ( nls.localize(
                'connectionError',
                "An unexpected error occurred that requires a reload of this page."
            )),
            detail: ( nls.localize(
                'connectionErrorDetail',
                "The workbench failed to connect to the server (Error: {0})",
                err ? err.message : ''
            )),
            buttons: [
                {
                    label: ( nls.localize({ key: 'reload', comment: ['&& denotes a mnemonic'] }, "&&Reload")),
                    run: () => this._hostService.reload()
                }
            ]
        });
    }
};
RemoteConnectionFailureNotificationContribution = ( __decorate([
    ( __param(0, IRemoteAgentService)),
    ( __param(1, IDialogService)),
    ( __param(2, IHostService))
], RemoteConnectionFailureNotificationContribution));
const workbenchRegistry = ( Registry.as(Extensions.Workbench));
workbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, 2 );
export { RemoteAgentService };
