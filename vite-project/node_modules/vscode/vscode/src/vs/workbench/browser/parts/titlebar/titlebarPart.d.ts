import { Part } from '../../part.js';
import { ITitleService, ITitleProperties } from '../../../services/title/common/titleService.js';
import { MenuBarVisibility } from '../../../../platform/window/common/window.js';
import { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';
import { IConfigurationService, IConfigurationChangeEvent } from '../../../../platform/configuration/common/configuration.js';
import { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';
import { IThemeService } from '../../../../platform/theme/common/themeService.js';
import { Dimension } from '../../../../base/browser/dom.js';
import { CustomMenubarControl } from './menubarControl.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { MenuId } from '../../../../platform/actions/common/actions.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
import { IHostService } from '../../../services/host/browser/host.js';
import { IHoverService } from '../../../services/hover/browser/hover.js';

declare class TitlebarPart extends Part implements ITitleService {
    private readonly contextMenuService;
    protected readonly configurationService: IConfigurationService;
    protected readonly environmentService: IBrowserWorkbenchEnvironmentService;
    protected readonly instantiationService: IInstantiationService;
    private readonly contextKeyService;
    private readonly hostService;
    private static readonly configCommandCenter;
    readonly _serviceBrand: undefined;
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    get minimumHeight(): number;
    get maximumHeight(): number;
    private _onMenubarVisibilityChange;
    readonly onMenubarVisibilityChange: Event<boolean>;
    private readonly _onDidChangeCommandCenterVisibility;
    readonly onDidChangeCommandCenterVisibility: Event<void>;
    protected rootContainer: HTMLElement;
    protected primaryWindowControls: HTMLElement | undefined;
    protected dragRegion: HTMLElement | undefined;
    protected title: HTMLElement;
    private leftContent;
    private centerContent;
    private rightContent;
    protected customMenubar: CustomMenubarControl | undefined;
    protected appIcon: HTMLElement | undefined;
    private appIconBadge;
    protected menubar?: HTMLElement;
    protected layoutControls: HTMLElement | undefined;
    private layoutToolbar;
    protected lastLayoutDimensions: Dimension | undefined;
    private hoverDelegate;
    private readonly titleDisposables;
    private titleBarStyle;
    private isInactive;
    private readonly windowTitle;
    constructor(contextMenuService: IContextMenuService, configurationService: IConfigurationService, environmentService: IBrowserWorkbenchEnvironmentService, instantiationService: IInstantiationService, themeService: IThemeService, storageService: IStorageService, layoutService: IWorkbenchLayoutService, contextKeyService: IContextKeyService, hostService: IHostService, hoverService: IHoverService);
    updateProperties(properties: ITitleProperties): void;
    get isCommandCenterVisible(): boolean;
    private registerListeners;
    private onBlur;
    private onFocus;
    protected onConfigurationChanged(event: IConfigurationChangeEvent): void;
    protected onMenubarVisibilityChanged(visible: boolean): void;
    private uninstallMenubar;
    protected installMenubar(): void;
    private updateTitle;
    protected createContentArea(parent: HTMLElement): HTMLElement;
    updateStyles(): void;
    protected onContextMenu(e: MouseEvent, menuId: MenuId): void;
    protected get currentMenubarVisibility(): MenuBarVisibility;
    private get layoutControlEnabled();
    protected get useCounterZoom(): boolean;
    updateLayout(dimension: Dimension): void;
    layout(width: number, height: number): void;
    toJSON(): object;
}

export { TitlebarPart };
