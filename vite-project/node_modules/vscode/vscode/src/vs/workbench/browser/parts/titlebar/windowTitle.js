import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { dirname, basename } from 'monaco-editor/esm/vs/base/common/resources.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';
import { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { isWindows, isMacintosh, isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';
import { trim } from 'monaco-editor/esm/vs/base/common/strings.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { template } from 'monaco-editor/esm/vs/base/common/labels.js';
import { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { getVirtualWorkspaceLocation } from '../../../../platform/workspace/common/virtualWorkspace.js';
import { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';
import { IViewsService } from '../../../common/views.js';
var WindowTitle_1;
let WindowTitle = class WindowTitle extends Disposable {
    static { WindowTitle_1 = this; }
    static { this.NLS_USER_IS_ADMIN = isWindows ? ( localize('userIsAdmin', "[Administrator]")) : ( localize('userIsSudo', "[Superuser]")); }
    static { this.NLS_EXTENSION_HOST = ( localize('devExtensionWindowTitlePrefix', "[Extension Development Host]")); }
    static { this.TITLE_DIRTY = '\u25cf '; }
    constructor(configurationService, editorService, environmentService, contextService, instantiationService, labelService, userDataProfileService, productService, viewsService) {
        super();
        this.configurationService = configurationService;
        this.editorService = editorService;
        this.environmentService = environmentService;
        this.contextService = contextService;
        this.instantiationService = instantiationService;
        this.labelService = labelService;
        this.userDataProfileService = userDataProfileService;
        this.productService = productService;
        this.viewsService = viewsService;
        this.properties = { isPure: true, isAdmin: false, prefix: undefined };
        this.activeEditorListeners = this._register(( new DisposableStore()));
        this.titleUpdater = this._register(( new RunOnceScheduler(() => this.doUpdateTitle(), 0)));
        this.onDidChangeEmitter = ( new Emitter());
        this.onDidChange = this.onDidChangeEmitter.event;
        this.registerListeners();
    }
    get value() {
        return this.title ?? '';
    }
    get workspaceName() {
        return this.labelService.getWorkspaceLabel(this.contextService.getWorkspace());
    }
    registerListeners() {
        this._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChanged(e)));
        this._register(this.editorService.onDidActiveEditorChange(() => this.onActiveEditorChange()));
        this._register(this.contextService.onDidChangeWorkspaceFolders(() => this.titleUpdater.schedule()));
        this._register(this.contextService.onDidChangeWorkbenchState(() => this.titleUpdater.schedule()));
        this._register(this.contextService.onDidChangeWorkspaceName(() => this.titleUpdater.schedule()));
        this._register(this.labelService.onDidChangeFormatters(() => this.titleUpdater.schedule()));
        this._register(this.userDataProfileService.onDidChangeCurrentProfile(() => this.titleUpdater.schedule()));
        this._register(this.viewsService.onDidChangeFocusedView(() => this.titleUpdater.schedule()));
    }
    onConfigurationChanged(event) {
        if (event.affectsConfiguration("window.title" ) || event.affectsConfiguration("window.titleSeparator" )) {
            this.titleUpdater.schedule();
        }
    }
    onActiveEditorChange() {
        this.activeEditorListeners.clear();
        this.titleUpdater.schedule();
        const activeEditor = this.editorService.activeEditor;
        if (activeEditor) {
            this.activeEditorListeners.add(activeEditor.onDidChangeDirty(() => this.titleUpdater.schedule()));
            this.activeEditorListeners.add(activeEditor.onDidChangeLabel(() => this.titleUpdater.schedule()));
        }
    }
    doUpdateTitle() {
        const title = this.getFullWindowTitle();
        if (title !== this.title) {
            let nativeTitle = title;
            if (!trim(nativeTitle)) {
                nativeTitle = this.productService.nameLong;
            }
            if (!window.document.title && isMacintosh && nativeTitle === this.productService.nameLong) {
                window.document.title = `${this.productService.nameLong} ${WindowTitle_1.TITLE_DIRTY}`;
            }
            window.document.title = nativeTitle;
            this.title = title;
            this.onDidChangeEmitter.fire();
        }
    }
    getFullWindowTitle() {
        let title = this.getWindowTitle() || this.productService.nameLong;
        const { prefix, suffix } = this.getTitleDecorations();
        if (prefix) {
            title = `${prefix} ${title}`;
        }
        if (suffix) {
            title = `${title} ${suffix}`;
        }
        title = title.replace(/[^\S ]/g, ' ');
        return title;
    }
    getTitleDecorations() {
        let prefix;
        let suffix;
        if (this.properties.prefix) {
            prefix = this.properties.prefix;
        }
        if (this.environmentService.isExtensionDevelopment) {
            prefix = !prefix
                ? WindowTitle_1.NLS_EXTENSION_HOST
                : `${WindowTitle_1.NLS_EXTENSION_HOST} - ${prefix}`;
        }
        if (this.properties.isAdmin) {
            suffix = WindowTitle_1.NLS_USER_IS_ADMIN;
        }
        return { prefix, suffix };
    }
    updateProperties(properties) {
        const isAdmin = typeof properties.isAdmin === 'boolean' ? properties.isAdmin : this.properties.isAdmin;
        const isPure = typeof properties.isPure === 'boolean' ? properties.isPure : this.properties.isPure;
        const prefix = typeof properties.prefix === 'string' ? properties.prefix : this.properties.prefix;
        if (isAdmin !== this.properties.isAdmin || isPure !== this.properties.isPure || prefix !== this.properties.prefix) {
            this.properties.isAdmin = isAdmin;
            this.properties.isPure = isPure;
            this.properties.prefix = prefix;
            this.titleUpdater.schedule();
        }
    }
    getWindowTitle() {
        const editor = this.editorService.activeEditor;
        const workspace = this.contextService.getWorkspace();
        let root;
        if (workspace.configuration) {
            root = workspace.configuration;
        }
        else if (workspace.folders.length) {
            root = workspace.folders[0].uri;
        }
        const editorResource = EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY });
        let editorFolderResource = editorResource ? dirname(editorResource) : undefined;
        if (editorFolderResource?.path === '.') {
            editorFolderResource = undefined;
        }
        let folder = undefined;
        if (this.contextService.getWorkbenchState() === 2 ) {
            folder = workspace.folders[0];
        }
        else if (editorResource) {
            folder = this.contextService.getWorkspaceFolder(editorResource) ?? undefined;
        }
        let remoteName = undefined;
        if (this.environmentService.remoteAuthority && !isWeb) {
            remoteName = this.labelService.getHostLabel(Schemas.vscodeRemote, this.environmentService.remoteAuthority);
        }
        else {
            const virtualWorkspaceLocation = getVirtualWorkspaceLocation(workspace);
            if (virtualWorkspaceLocation) {
                remoteName = this.labelService.getHostLabel(virtualWorkspaceLocation.scheme, virtualWorkspaceLocation.authority);
            }
        }
        const activeEditorShort = editor ? editor.getTitle(0 ) : '';
        const activeEditorMedium = editor ? editor.getTitle(1 ) : activeEditorShort;
        const activeEditorLong = editor ? editor.getTitle(2 ) : activeEditorMedium;
        const activeFolderShort = editorFolderResource ? basename(editorFolderResource) : '';
        const activeFolderMedium = editorFolderResource ? this.labelService.getUriLabel(editorFolderResource, { relative: true }) : '';
        const activeFolderLong = editorFolderResource ? this.labelService.getUriLabel(editorFolderResource) : '';
        const rootName = this.labelService.getWorkspaceLabel(workspace);
        const rootNameShort = this.labelService.getWorkspaceLabel(workspace, { verbose: 0  });
        const rootPath = root ? this.labelService.getUriLabel(root) : '';
        const folderName = folder ? folder.name : '';
        const folderPath = folder ? this.labelService.getUriLabel(folder.uri) : '';
        const dirty = editor?.isDirty() && !editor.isSaving() ? WindowTitle_1.TITLE_DIRTY : '';
        const appName = this.productService.nameLong;
        const profileName = this.userDataProfileService.currentProfile.isDefault ? '' : this.userDataProfileService.currentProfile.name;
        const separator = this.configurationService.getValue("window.titleSeparator" );
        const titleTemplate = this.configurationService.getValue("window.title" );
        const focusedView = this.viewsService.getFocusedViewName();
        return template(titleTemplate, {
            activeEditorShort,
            activeEditorLong,
            activeEditorMedium,
            activeFolderShort,
            activeFolderMedium,
            activeFolderLong,
            rootName,
            rootPath,
            rootNameShort,
            folderName,
            folderPath,
            dirty,
            appName,
            remoteName,
            profileName,
            focusedView,
            separator: { label: separator }
        });
    }
    isCustomTitleFormat() {
        const title = this.configurationService.inspect("window.title" );
        const titleSeparator = this.configurationService.inspect("window.titleSeparator" );
        return title.value !== title.defaultValue || titleSeparator.value !== titleSeparator.defaultValue;
    }
};
WindowTitle = WindowTitle_1 = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IEditorService)),
    ( __param(2, IBrowserWorkbenchEnvironmentService)),
    ( __param(3, IWorkspaceContextService)),
    ( __param(4, IInstantiationService)),
    ( __param(5, ILabelService)),
    ( __param(6, IUserDataProfileService)),
    ( __param(7, IProductService)),
    ( __param(8, IViewsService))
], WindowTitle));
export { WindowTitle };
