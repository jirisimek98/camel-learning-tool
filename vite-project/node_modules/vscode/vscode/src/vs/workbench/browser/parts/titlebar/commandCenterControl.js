import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { reset } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { BaseActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionViewItems.js';
import { setupCustomHover } from 'monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabelHover.js';
import { renderIcon } from 'monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabels.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { Color } from 'monaco-editor/esm/vs/base/common/color.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { createActionViewItem } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { MenuWorkbenchToolBar } from 'monaco-editor/esm/vs/platform/actions/browser/toolbar.js';
import { MenuId, MenuItemAction } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import * as colors from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { TITLE_BAR_ACTIVE_FOREGROUND, MENUBAR_SELECTION_FOREGROUND, TITLE_BAR_INACTIVE_FOREGROUND, MENUBAR_SELECTION_BACKGROUND } from '../../../common/theme.js';
let CommandCenterControl = class CommandCenterControl {
    constructor(windowTitle, hoverDelegate, instantiationService, quickInputService, keybindingService) {
        this._disposables = ( new DisposableStore());
        this._onDidChangeVisibility = ( new Emitter());
        this.onDidChangeVisibility = this._onDidChangeVisibility.event;
        this.element = document.createElement('div');
        this.element.classList.add('command-center');
        const titleToolbar = instantiationService.createInstance(MenuWorkbenchToolBar, this.element, MenuId.CommandCenter, {
            contextMenu: MenuId.TitleBarContext,
            hiddenItemStrategy: 0 ,
            toolbarOptions: {
                primaryGroup: () => true,
            },
            telemetrySource: 'commandCenter',
            actionViewItemProvider: (action) => {
                if (action instanceof MenuItemAction && action.id === 'workbench.action.quickOpenWithModes') {
                    class CommandCenterViewItem extends BaseActionViewItem {
                        constructor(action, options) {
                            super(undefined, action, options);
                        }
                        render(container) {
                            super.render(container);
                            container.classList.add('command-center');
                            const searchIcon = renderIcon(Codicon.search);
                            searchIcon.classList.add('search-icon');
                            const label = this._getLabel();
                            const labelElement = document.createElement('span');
                            labelElement.classList.add('search-label');
                            labelElement.innerText = label;
                            reset(container, searchIcon, labelElement);
                            const hover = this._store.add(setupCustomHover(hoverDelegate, container, this.getTooltip()));
                            this._store.add(windowTitle.onDidChange(() => {
                                hover.update(this.getTooltip());
                                labelElement.innerText = this._getLabel();
                            }));
                        }
                        _getLabel() {
                            const { prefix, suffix } = windowTitle.getTitleDecorations();
                            let label = windowTitle.isCustomTitleFormat() ? windowTitle.getWindowTitle() : windowTitle.workspaceName;
                            if (!label) {
                                label = ( localize('label.dfl', "Search"));
                            }
                            if (prefix) {
                                label = ( localize('label1', "{0} {1}", prefix, label));
                            }
                            if (suffix) {
                                label = ( localize('label2', "{0} {1}", label, suffix));
                            }
                            return label;
                        }
                        getTooltip() {
                            const kb = keybindingService.lookupKeybinding(action.id)?.getLabel();
                            const title = kb
                                ? ( localize(
                                'title',
                                "Search {0} ({1}) \u2014 {2}",
                                windowTitle.workspaceName,
                                kb,
                                windowTitle.value
                            ))
                                : ( localize(
                                'title2',
                                "Search {0} \u2014 {1}",
                                windowTitle.workspaceName,
                                windowTitle.value
                            ));
                            return title;
                        }
                    }
                    return instantiationService.createInstance(CommandCenterViewItem, action, {});
                }
                else {
                    return createActionViewItem(instantiationService, action, { hoverDelegate });
                }
            }
        });
        this._disposables.add(quickInputService.onShow(this._setVisibility.bind(this, false)));
        this._disposables.add(quickInputService.onHide(this._setVisibility.bind(this, true)));
        this._disposables.add(titleToolbar);
    }
    _setVisibility(show) {
        this.element.classList.toggle('hide', !show);
        this._onDidChangeVisibility.fire();
    }
    dispose() {
        this._disposables.dispose();
    }
};
CommandCenterControl = ( __decorate([
    ( __param(2, IInstantiationService)),
    ( __param(3, IQuickInputService)),
    ( __param(4, IKeybindingService))
], CommandCenterControl));
colors.registerColor('commandCenter.foreground', { dark: TITLE_BAR_ACTIVE_FOREGROUND, hcDark: TITLE_BAR_ACTIVE_FOREGROUND, light: TITLE_BAR_ACTIVE_FOREGROUND, hcLight: TITLE_BAR_ACTIVE_FOREGROUND }, ( localize('commandCenter-foreground', "Foreground color of the command center")), false);
colors.registerColor('commandCenter.activeForeground', { dark: MENUBAR_SELECTION_FOREGROUND, hcDark: MENUBAR_SELECTION_FOREGROUND, light: MENUBAR_SELECTION_FOREGROUND, hcLight: MENUBAR_SELECTION_FOREGROUND }, ( localize(
    'commandCenter-activeForeground',
    "Active foreground color of the command center"
)), false);
colors.registerColor('commandCenter.inactiveForeground', { dark: TITLE_BAR_INACTIVE_FOREGROUND, hcDark: TITLE_BAR_INACTIVE_FOREGROUND, light: TITLE_BAR_INACTIVE_FOREGROUND, hcLight: TITLE_BAR_INACTIVE_FOREGROUND }, ( localize(
    'commandCenter-inactiveForeground',
    "Foreground color of the command center when the window is inactive"
)), false);
colors.registerColor('commandCenter.background', {
    dark: ( Color.white.transparent(0.05)), hcDark: null, light: ( Color.black.transparent(0.05)), hcLight: null
}, ( localize('commandCenter-background', "Background color of the command center")), false);
colors.registerColor('commandCenter.activeBackground', { dark: ( Color.white.transparent(0.08)), hcDark: MENUBAR_SELECTION_BACKGROUND, light: ( Color.black.transparent(0.08)), hcLight: MENUBAR_SELECTION_BACKGROUND }, ( localize(
    'commandCenter-activeBackground',
    "Active background color of the command center"
)), false);
colors.registerColor('commandCenter.border', { dark: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .20)), hcDark: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .60)), light: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .20)), hcLight: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .60)) }, ( localize('commandCenter-border', "Border color of the command center")), false);
colors.registerColor('commandCenter.activeBorder', { dark: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .30)), hcDark: TITLE_BAR_ACTIVE_FOREGROUND, light: ( colors.transparent(TITLE_BAR_ACTIVE_FOREGROUND, .30)), hcLight: TITLE_BAR_ACTIVE_FOREGROUND }, ( localize('commandCenter-activeBorder', "Active border color of the command center")), false);
colors.registerColor('commandCenter.inactiveBorder', { dark: ( colors.transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25)), hcDark: ( colors.transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25)), light: ( colors.transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25)), hcLight: ( colors.transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25)) }, ( localize(
    'commandCenter-inactiveBorder',
    "Border color of the command center when the window is inactive"
)), false);
export { CommandCenterControl };
