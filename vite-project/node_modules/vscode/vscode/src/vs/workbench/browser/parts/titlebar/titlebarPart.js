import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import './media/titlebarpart.css.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Part } from '../../part.js';
import { isWCOEnabled, getZoomFactor } from 'monaco-editor/esm/vs/base/browser/browser.js';
import { getTitleBarStyle, getMenuBarVisibility } from '../../../../platform/window/common/window.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { StandardMouseEvent } from 'monaco-editor/esm/vs/base/browser/mouseEvent.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { TITLE_BAR_INACTIVE_BACKGROUND, TITLE_BAR_ACTIVE_BACKGROUND, WORKBENCH_BACKGROUND, TITLE_BAR_INACTIVE_FOREGROUND, TITLE_BAR_ACTIVE_FOREGROUND, TITLE_BAR_BORDER } from '../../../common/theme.js';
import { isWeb, isMacintosh, isWindows, isLinux, isNative, platformLocale } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Color } from 'monaco-editor/esm/vs/base/common/color.js';
import { append, $, reset, prepend, EventType, addDisposableListener, EventHelper, isAncestor, Dimension } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { CustomMenubarControl } from './menubarControl.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { createActionViewItem } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { MenuId, registerAction2, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IHostService } from '../../../services/host/browser/host.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { getIconRegistry } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { WindowTitle } from './windowTitle.js';
import { CommandCenterControl } from './commandCenterControl.js';
import { IHoverService } from '../../../services/hover/browser/hover.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { MenuWorkbenchToolBar } from 'monaco-editor/esm/vs/platform/actions/browser/toolbar.js';
var TitlebarPart_1;
let TitlebarPart = class TitlebarPart extends Part {
    static { TitlebarPart_1 = this; }
    static { this.configCommandCenter = 'window.commandCenter'; }
    get minimumHeight() {
        const value = this.isCommandCenterVisible || (isWeb && isWCOEnabled()) ? 35 : 30;
        return value / (this.useCounterZoom ? getZoomFactor() : 1);
    }
    get maximumHeight() { return this.minimumHeight; }
    constructor(contextMenuService, configurationService, environmentService, instantiationService, themeService, storageService, layoutService, contextKeyService, hostService, hoverService) {
        super("workbench.parts.titlebar" , { hasTitle: false }, themeService, storageService, layoutService);
        this.contextMenuService = contextMenuService;
        this.configurationService = configurationService;
        this.environmentService = environmentService;
        this.instantiationService = instantiationService;
        this.contextKeyService = contextKeyService;
        this.hostService = hostService;
        this.minimumWidth = 0;
        this.maximumWidth = Number.POSITIVE_INFINITY;
        this._onMenubarVisibilityChange = this._register(( new Emitter()));
        this.onMenubarVisibilityChange = this._onMenubarVisibilityChange.event;
        this._onDidChangeCommandCenterVisibility = ( new Emitter());
        this.onDidChangeCommandCenterVisibility = this._onDidChangeCommandCenterVisibility.event;
        this.titleDisposables = this._register(( new DisposableStore()));
        this.isInactive = false;
        this.windowTitle = this._register(instantiationService.createInstance(WindowTitle));
        this.titleBarStyle = getTitleBarStyle(this.configurationService);
        this.hoverDelegate = new (class {
            constructor() {
                this._lastHoverHideTime = 0;
                this.showHover = hoverService.showHover.bind(hoverService);
                this.placement = 'element';
            }
            get delay() {
                return Date.now() - this._lastHoverHideTime < 200
                    ? 0
                    : configurationService.getValue('workbench.hover.delay');
            }
            onDidHideHover() {
                this._lastHoverHideTime = Date.now();
            }
        });
        this.registerListeners();
    }
    updateProperties(properties) {
        this.windowTitle.updateProperties(properties);
    }
    get isCommandCenterVisible() {
        return this.configurationService.getValue(TitlebarPart_1.configCommandCenter);
    }
    registerListeners() {
        this._register(this.hostService.onDidChangeFocus(focused => focused ? this.onFocus() : this.onBlur()));
        this._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChanged(e)));
    }
    onBlur() {
        this.isInactive = true;
        this.updateStyles();
    }
    onFocus() {
        this.isInactive = false;
        this.updateStyles();
    }
    onConfigurationChanged(event) {
        if (this.titleBarStyle !== 'native' && (!isMacintosh || isWeb)) {
            if (event.affectsConfiguration('window.menuBarVisibility')) {
                if (this.currentMenubarVisibility === 'compact') {
                    this.uninstallMenubar();
                }
                else {
                    this.installMenubar();
                }
            }
        }
        if (this.titleBarStyle !== 'native' && this.layoutControls && event.affectsConfiguration('workbench.layoutControl.enabled')) {
            this.layoutControls.classList.toggle('show-layout-control', this.layoutControlEnabled);
            this._onDidChange.fire(undefined);
        }
        if (event.affectsConfiguration(TitlebarPart_1.configCommandCenter)) {
            this.updateTitle();
            this._onDidChangeCommandCenterVisibility.fire();
            this._onDidChange.fire(undefined);
        }
    }
    onMenubarVisibilityChanged(visible) {
        if (isWeb || isWindows || isLinux) {
            if (this.lastLayoutDimensions) {
                this.layout(this.lastLayoutDimensions.width, this.lastLayoutDimensions.height);
            }
            this._onMenubarVisibilityChange.fire(visible);
        }
    }
    uninstallMenubar() {
        if (this.customMenubar) {
            this.customMenubar.dispose();
            this.customMenubar = undefined;
        }
        if (this.menubar) {
            this.menubar.remove();
            this.menubar = undefined;
        }
        this.onMenubarVisibilityChanged(false);
    }
    installMenubar() {
        if (this.menubar) {
            return;
        }
        this.customMenubar = this._register(this.instantiationService.createInstance(CustomMenubarControl));
        this.menubar = append(this.leftContent, $('div.menubar'));
        this.menubar.setAttribute('role', 'menubar');
        this._register(this.customMenubar.onVisibilityChange(e => this.onMenubarVisibilityChanged(e)));
        this.customMenubar.create(this.menubar);
    }
    updateTitle() {
        this.titleDisposables.clear();
        if (!this.isCommandCenterVisible) {
            this.title.innerText = this.windowTitle.value;
            this.titleDisposables.add(this.windowTitle.onDidChange(() => {
                this.title.innerText = this.windowTitle.value;
            }));
        }
        else {
            const commandCenter = this.instantiationService.createInstance(CommandCenterControl, this.windowTitle, this.hoverDelegate);
            reset(this.title, commandCenter.element);
            this.titleDisposables.add(commandCenter);
        }
    }
    createContentArea(parent) {
        this.element = parent;
        this.rootContainer = append(parent, $('.titlebar-container'));
        this.leftContent = append(this.rootContainer, $('.titlebar-left'));
        this.centerContent = append(this.rootContainer, $('.titlebar-center'));
        this.rightContent = append(this.rootContainer, $('.titlebar-right'));
        if (!isMacintosh && !isWeb) {
            this.appIcon = prepend(this.leftContent, $('a.window-appicon'));
            if (isWeb) {
                const homeIndicator = this.environmentService.options?.homeIndicator;
                if (homeIndicator) {
                    const icon = getIconRegistry().getIcon(homeIndicator.icon) ? { id: homeIndicator.icon } : Codicon.code;
                    this.appIcon.setAttribute('href', homeIndicator.href);
                    this.appIcon.classList.add(...ThemeIcon.asClassNameArray(icon));
                    this.appIconBadge = document.createElement('div');
                    this.appIconBadge.classList.add('home-bar-icon-badge');
                    this.appIcon.appendChild(this.appIconBadge);
                }
            }
        }
        this.dragRegion = prepend(this.rootContainer, $('div.titlebar-drag-region'));
        if (this.titleBarStyle !== 'native'
            && (!isMacintosh || isWeb)
            && this.currentMenubarVisibility !== 'compact') {
            this.installMenubar();
        }
        this.title = append(this.centerContent, $('div.window-title'));
        this.updateTitle();
        if (this.titleBarStyle !== 'native') {
            this.layoutControls = append(this.rightContent, $('div.layout-controls-container'));
            this.layoutControls.classList.toggle('show-layout-control', this.layoutControlEnabled);
            this.layoutToolbar = this.instantiationService.createInstance(MenuWorkbenchToolBar, this.layoutControls, MenuId.LayoutControlMenu, {
                contextMenu: MenuId.TitleBarContext,
                toolbarOptions: { primaryGroup: () => true },
                actionViewItemProvider: action => {
                    return createActionViewItem(this.instantiationService, action, { hoverDelegate: this.hoverDelegate });
                }
            });
        }
        let primaryControlLocation = isMacintosh ? 'left' : 'right';
        if (isMacintosh && isNative) {
            const localeInfo = new Intl.Locale(platformLocale);
            if (localeInfo?.textInfo?.direction === 'rtl') {
                primaryControlLocation = 'right';
            }
        }
        this.primaryWindowControls = append(primaryControlLocation === 'left' ? this.leftContent : this.rightContent, $('div.window-controls-container.primary'));
        append(primaryControlLocation === 'left' ? this.rightContent : this.leftContent, $('div.window-controls-container.secondary'));
        [EventType.CONTEXT_MENU, EventType.MOUSE_DOWN].forEach(event => {
            this._register(addDisposableListener(this.rootContainer, event, e => {
                if (e.type === EventType.CONTEXT_MENU || (e.target === this.title && e.metaKey)) {
                    EventHelper.stop(e);
                    this.onContextMenu(e, e.target === this.title ? MenuId.TitleBarTitleContext : MenuId.TitleBarContext);
                }
            }));
        });
        this._register(addDisposableListener(this.element, EventType.MOUSE_DOWN, e => {
            if (e.target && this.menubar && isAncestor(e.target, this.menubar)) {
                return;
            }
            if (e.target && this.layoutToolbar && isAncestor(e.target, this.layoutToolbar.getElement())) {
                return;
            }
            if (e.target && isAncestor(e.target, this.title)) {
                return;
            }
            const active = document.activeElement;
            setTimeout(() => {
                if (active instanceof HTMLElement) {
                    active.focus();
                }
            }, 0 );
        }, true ));
        this.updateStyles();
        const that = this;
        registerAction2(class FocusTitleBar extends Action2 {
            constructor() {
                super({
                    id: `workbench.action.focusTitleBar`,
                    title: { value: ( localize('focusTitleBar', "Focus Title Bar")), original: 'Focus Title Bar' },
                    category: Categories.View,
                    f1: true,
                });
            }
            run(accessor, ...args) {
                if (that.customMenubar) {
                    that.customMenubar.toggleFocus();
                }
                else {
                    that.element.querySelector('[tabindex]:not([tabindex="-1"])').focus();
                }
            }
        });
        return this.element;
    }
    updateStyles() {
        super.updateStyles();
        if (this.element) {
            if (this.isInactive) {
                this.element.classList.add('inactive');
            }
            else {
                this.element.classList.remove('inactive');
            }
            const titleBackground = this.getColor(this.isInactive ? TITLE_BAR_INACTIVE_BACKGROUND : TITLE_BAR_ACTIVE_BACKGROUND, (color, theme) => {
                return color.isOpaque() ? color : color.makeOpaque(WORKBENCH_BACKGROUND(theme));
            }) || '';
            this.element.style.backgroundColor = titleBackground;
            if (this.appIconBadge) {
                this.appIconBadge.style.backgroundColor = titleBackground;
            }
            if (titleBackground && ( Color.fromHex(titleBackground)).isLighter()) {
                this.element.classList.add('light');
            }
            else {
                this.element.classList.remove('light');
            }
            const titleForeground = this.getColor(this.isInactive ? TITLE_BAR_INACTIVE_FOREGROUND : TITLE_BAR_ACTIVE_FOREGROUND);
            this.element.style.color = titleForeground || '';
            const titleBorder = this.getColor(TITLE_BAR_BORDER);
            this.element.style.borderBottom = titleBorder ? `1px solid ${titleBorder}` : '';
        }
    }
    onContextMenu(e, menuId) {
        const event = ( new StandardMouseEvent(e));
        this.contextMenuService.showContextMenu({
            getAnchor: () => event,
            menuId,
            contextKeyService: this.contextKeyService,
            domForShadowRoot: isMacintosh && isNative ? event.target : undefined
        });
    }
    get currentMenubarVisibility() {
        return getMenuBarVisibility(this.configurationService);
    }
    get layoutControlEnabled() {
        return this.configurationService.getValue('workbench.layoutControl.enabled');
    }
    get useCounterZoom() {
        const zoomFactor = getZoomFactor();
        const noMenubar = this.currentMenubarVisibility === 'hidden' || (!isWeb && isMacintosh);
        const noCommandCenter = !this.isCommandCenterVisible;
        const noLayoutControls = !this.layoutControlEnabled;
        return zoomFactor < 1 || (noMenubar && noCommandCenter && noLayoutControls);
    }
    updateLayout(dimension) {
        this.lastLayoutDimensions = dimension;
        if (getTitleBarStyle(this.configurationService) === 'custom') {
            const zoomFactor = getZoomFactor();
            this.element.style.setProperty('--zoom-factor', ( zoomFactor.toString()));
            this.rootContainer.classList.toggle('counter-zoom', this.useCounterZoom);
            if (this.customMenubar) {
                const menubarDimension = ( new Dimension(0, dimension.height));
                this.customMenubar.layout(menubarDimension);
            }
        }
    }
    layout(width, height) {
        this.updateLayout(( new Dimension(width, height)));
        super.layoutContents(width, height);
    }
    toJSON() {
        return {
            type: "workbench.parts.titlebar"
        };
    }
};
TitlebarPart = TitlebarPart_1 = ( __decorate([
    ( __param(0, IContextMenuService)),
    ( __param(1, IConfigurationService)),
    ( __param(2, IBrowserWorkbenchEnvironmentService)),
    ( __param(3, IInstantiationService)),
    ( __param(4, IThemeService)),
    ( __param(5, IStorageService)),
    ( __param(6, IWorkbenchLayoutService)),
    ( __param(7, IContextKeyService)),
    ( __param(8, IHostService)),
    ( __param(9, IHoverService))
], TitlebarPart));
class ToogleConfigAction extends Action2 {
    constructor(section, title, order) {
        super({
            id: `toggle.${section}`,
            title,
            toggled: ( ContextKeyExpr.equals(`config.${section}`, true)),
            menu: { id: MenuId.TitleBarContext, order }
        });
        this.section = section;
    }
    run(accessor, ...args) {
        const configService = accessor.get(IConfigurationService);
        const value = configService.getValue(this.section);
        configService.updateValue(this.section, !value);
    }
}
registerAction2(class ToogleCommandCenter extends ToogleConfigAction {
    constructor() {
        super('window.commandCenter', ( localize('toggle.commandCenter', 'Command Center')), 1);
    }
});
registerAction2(class ToogleLayoutControl extends ToogleConfigAction {
    constructor() {
        super('workbench.layoutControl.enabled', ( localize('toggle.layout', 'Layout Controls')), 2);
    }
});
export { TitlebarPart };
