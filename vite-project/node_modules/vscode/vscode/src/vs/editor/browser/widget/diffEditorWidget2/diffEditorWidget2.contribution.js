import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { EditorAction2 } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { findFocusedDiffEditor } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditor.contribution.js';
import { DiffEditorWidget2 } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget2/diffEditorWidget2.js';
import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2, MenuRegistry, MenuId, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ContextKeyExpr, ContextKeyEqualsExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
class ToggleCollapseUnchangedRegions extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleCollapseUnchangedRegions',
            title: { value: ( localize('toggleCollapseUnchangedRegions', "Toggle Collapse Unchanged Regions")), original: 'Toggle Collapse Unchanged Regions' },
            icon: Codicon.map,
            precondition: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
            toggled: ( ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled')),
            menu: {
                id: MenuId.EditorTitle,
                order: 22,
                group: 'navigation',
                when: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
            },
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');
        configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);
    }
}
registerAction2(ToggleCollapseUnchangedRegions);
class ToggleShowMovedCodeBlocks extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleShowMovedCodeBlocks',
            title: { value: ( localize('toggleShowMovedCodeBlocks', "Toggle Show Moved Code Blocks")), original: 'Toggle Show Moved Code Blocks' },
            precondition: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');
        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);
    }
}
registerAction2(ToggleShowMovedCodeBlocks);
class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',
            title: { value: ( localize(
                'toggleUseInlineViewWhenSpaceIsLimited',
                "Toggle Use Inline View When Space Is Limited"
            )), original: 'Toggle Use Inline View When Space Is Limited' },
            precondition: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');
        configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);
    }
}
registerAction2(ToggleUseInlineViewWhenSpaceIsLimited);
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleUseInlineViewWhenSpaceIsLimited()).desc.id,
        title: ( localize('useInlineViewWhenSpaceIsLimited', "Use Inline View When Space Is Limited")),
        toggled: ( ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited')),
    },
    order: 11,
    group: '1_diff',
    when: ( ContextKeyExpr.and(
        EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached,
        ContextKeyEqualsExpr.create('diffEditorVersion', 2)
    ))
});
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleShowMovedCodeBlocks()).desc.id,
        title: ( localize('showMoves', "Show Moved Code Blocks")),
        icon: Codicon.move,
        toggled: ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),
    },
    order: 10,
    group: '1_diff',
    when: ContextKeyEqualsExpr.create('diffEditorVersion', 2)
});
const diffEditorCategory = {
    value: ( localize('diffEditor', 'Diff Editor')),
    original: 'Diff Editor',
};
class SwitchSide extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.switchSide',
            title: { value: ( localize('switchSide', "Switch Side")), original: 'Switch Side' },
            icon: Codicon.arrowSwap,
            precondition: ( ContextKeyExpr.and(ContextKeyEqualsExpr.create('diffEditorVersion', 2), ( ContextKeyExpr.has('isInDiffEditor')))),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, arg) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget2) {
            if (arg && arg.dryRun) {
                return { destinationSelection: diffEditor.mapToOtherSide().destinationSelection };
            }
            else {
                diffEditor.switchSide();
            }
        }
        return undefined;
    }
}
registerAction2(SwitchSide);
class ExitCompareMove extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.exitCompareMove',
            title: { value: ( localize('exitCompareMove', "Exit Compare Move")), original: 'Exit Compare Move' },
            icon: Codicon.close,
            precondition: EditorContextKeys.comparingMovedCode,
            f1: false,
            category: diffEditorCategory,
            keybinding: {
                weight: 10000,
                primary: 9 ,
            }
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget2) {
            diffEditor.exitCompareMove();
        }
    }
}
registerAction2(ExitCompareMove);
class CollapseAllUnchangedRegions extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.collapseAllUnchangedRegions',
            title: { value: ( localize('collapseAllUnchangedRegions', "Collapse All Unchanged Regions")), original: 'Collapse All Unchanged Regions' },
            icon: Codicon.fold,
            precondition: ( ContextKeyExpr.and(ContextKeyEqualsExpr.create('diffEditorVersion', 2), ( ContextKeyExpr.has('isInDiffEditor')))),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget2) {
            diffEditor.collapseAllUnchangedRegions();
        }
    }
}
registerAction2(CollapseAllUnchangedRegions);
class ShowAllUnchangedRegions extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.showAllUnchangedRegions',
            title: { value: ( localize('showAllUnchangedRegions', "Show All Unchanged Regions")), original: 'Show All Unchanged Regions' },
            icon: Codicon.unfold,
            precondition: ( ContextKeyExpr.and(ContextKeyEqualsExpr.create('diffEditorVersion', 2), ( ContextKeyExpr.has('isInDiffEditor')))),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget2) {
            diffEditor.showAllUnchangedRegions();
        }
    }
}
registerAction2(ShowAllUnchangedRegions);
export { CollapseAllUnchangedRegions, ExitCompareMove, ShowAllUnchangedRegions, SwitchSide, ToggleCollapseUnchangedRegions, ToggleShowMovedCodeBlocks, ToggleUseInlineViewWhenSpaceIsLimited };
